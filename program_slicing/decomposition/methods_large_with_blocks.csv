,Unnamed: 0,cc_range,fail_slice,emos_block,emos_slices_cont,emos_slices_discont,slices_dic,has_for,has_while,has_try,has_if,anon_class,File,method_name,start_line,cyclo,ncss,blocks
0,0,2,False,"[(50, 55)]","[(10, 10), (32, 32), (31, 31), (35, 35)]","[[(39, 39), (45, 45), (38, 38), (40, 40)], [(10, 10), (16, 16)], [(4, 4), (78, 78), (5, 5), (0, 0)], [(37, 37), (46, 46)], [(76, 76), (71, 71), (72, 72), (70, 70), (74, 74), (73, 73), (75, 75)], [(17, 17), (23, 23), (27, 27), (16, 16), (10, 10), (19, 19), (12, 12), (18, 18), (22, 22), (24, 24)], [(57, 57), (38, 38), (35, 35), (48, 48), (50, 50)], [(17, 17), (14, 14), (27, 27), (16, 16), (26, 26), (10, 10), (21, 21), (22, 22)], [(76, 76), (71, 71), (72, 72), (70, 70), (74, 74), (73, 73), (75, 75)], [(17, 17), (23, 23), (27, 27), (16, 16), (25, 25), (20, 20), (13, 13), (10, 10), (18, 18), (22, 22)], [(78, 78), (2, 2), (0, 0)], [(76, 76), (71, 71), (72, 72), (70, 70), (74, 74), (73, 73), (75, 75)], [(57, 57), (49, 49), (48, 48)], [(4, 4), (78, 78), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad5172820>"": ""i++) {\nIMethodBinding binding= (IMethodBinding) bindings[i];\nString curr= binding.getName();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c850>"": ""SimpleName nameNode= (SimpleName) selectedNode;\nASTNode invocationNode= nameNode.getParent();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd0070>"": ""IBinding[] bindings= (new ScopeAnalyzer(astRoot)).getDeclarationsInScope(nameNode, ScopeAnalyzer.METHODS);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c190>"": ""{\nCompilationUnit astRoot= context.getASTRoot();\nASTNode selectedNode= problem.getCoveringNode(astRoot);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd09d0>"": ""int nArguments= arguments.size();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd0a30>"": ""HashSet<String> suggestedRenames= new HashSet<String>();\nsuggestedRenames= null;"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbe6b50>"": ""if (!isSuperInvocation && sender == null && invocationNode.getParent() instanceof ThrowStatement) {\n\tString str= \""new \"";   //$NON-NLS-1$ // do it the manual way, copting all the arguments is nasty\n\tString label= CorrectionMessages.UnresolvedElementsSubProcessor_addnewkeyword_description;\n\tint relevance= Character.isUpperCase(methodName.charAt(0)) ? IProposalRelevance.ADD_NEW_KEYWORD_UPPERCASE : IProposalRelevance.ADD_NEW_KEYWORD;\n\tReplaceCorrectionProposal proposal= new ReplaceCorrectionProposal(label, cu, invocationNode.getStartPosition(), 0, str, relevance);\n\tproposals.add(proposal);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c3a0>"": ""SimpleName nameNode= (SimpleName) selectedNode;\nList<Expression> arguments;\nASTNode invocationNode= nameNode.getParent();\nif (invocationNode instanceof MethodInvocation) {\n\tMethodInvocation methodImpl= (MethodInvocation) invocationNode;\n\targuments= methodImpl.arguments();\n} else if (invocationNode instanceof SuperMethodInvocation) {\n\tSuperMethodInvocation methodImpl= (SuperMethodInvocation) invocationNode;\n\targuments= methodImpl.arguments();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad51723d0>"": ""IBinding[] bindings= (new ScopeAnalyzer(astRoot)).getDeclarationsInScope(nameNode, ScopeAnalyzer.METHODS);\nfor (int i= 0; i < bindings.length; i++) {\nif (isOnlyParameterMismatch) {\n\tfor (int i= 0; i < bindings.length; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c460>"": ""SimpleName nameNode= (SimpleName) selectedNode;\nboolean isSuperInvocation;\nASTNode invocationNode= nameNode.getParent();\nif (invocationNode instanceof MethodInvocation) {\n\tisSuperInvocation= false;\n} else if (invocationNode instanceof SuperMethodInvocation) {\n\tisSuperInvocation= true;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbe6d00>"": ""if (!isSuperInvocation && sender == null && invocationNode.getParent() instanceof ThrowStatement) {\n\tString str= \""new \"";   //$NON-NLS-1$ // do it the manual way, copting all the arguments is nasty\n\tString label= CorrectionMessages.UnresolvedElementsSubProcessor_addnewkeyword_description;\n\tint relevance= Character.isUpperCase(methodName.charAt(0)) ? IProposalRelevance.ADD_NEW_KEYWORD_UPPERCASE : IProposalRelevance.ADD_NEW_KEYWORD;\n\tReplaceCorrectionProposal proposal= new ReplaceCorrectionProposal(label, cu, invocationNode.getStartPosition(), 0, str, relevance);\n\tproposals.add(proposal);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c550>"": ""SimpleName nameNode= (SimpleName) selectedNode;\nExpression sender;\nASTNode invocationNode= nameNode.getParent();\nif (invocationNode instanceof MethodInvocation) {\n\tMethodInvocation methodImpl= (MethodInvocation) invocationNode;\n\tsender= methodImpl.getExpression();\n} else if (invocationNode instanceof SuperMethodInvocation) {\n\tSuperMethodInvocation methodImpl= (SuperMethodInvocation) invocationNode;\n\tsender= methodImpl.getQualifier();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd0670>"": ""String methodName= nameNode.getIdentifier();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1ceb0>"": ""{\nICompilationUnit cu= context.getCompilationUnit();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbe6eb0>"": ""if (!isSuperInvocation && sender == null && invocationNode.getParent() instanceof ThrowStatement) {\n\tString str= \""new \"";   //$NON-NLS-1$ // do it the manual way, copting all the arguments is nasty\n\tString label= CorrectionMessages.UnresolvedElementsSubProcessor_addnewkeyword_description;\n\tint relevance= Character.isUpperCase(methodName.charAt(0)) ? IProposalRelevance.ADD_NEW_KEYWORD_UPPERCASE : IProposalRelevance.ADD_NEW_KEYWORD;\n\tReplaceCorrectionProposal proposal= new ReplaceCorrectionProposal(label, cu, invocationNode.getStartPosition(), 0, str, relevance);\n\tproposals.add(proposal);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1cee0>"": ""SimpleName nameNode= (SimpleName) selectedNode;"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40d700>"": ""{\nArrayList<IMethodBinding> parameterMismatchs= new ArrayList<IMethodBinding>();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c790>"": ""{\nCompilationUnit astRoot= context.getASTRoot();\n""}",4,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/text/correction/UnresolvedElementsSubProcessor.java,getMethodProposals,1053,20.0,53.0,exception_happened
1,1,2,False,"[(48, 73), (40, 46), (41, 46), (31, 37), (48, 55)]","[(41, 41), (40, 40), (19, 19)]","[[(59, 59), (60, 60), (58, 58), (68, 68)], [(62, 62), (68, 68), (61, 61), (63, 63), (58, 58), (67, 67), (64, 64), (57, 57), (59, 59), (60, 60)], [(54, 54), (58, 58), (55, 55), (48, 48), (50, 50), (51, 51), (49, 49), (53, 53)], [(30, 30), (36, 36), (25, 25), (35, 35), (32, 32), (77, 77), (37, 37), (31, 31), (33, 33)], [(9, 9), (0, 0), (82, 82), (86, 86), (6, 6)], [(68, 68), (61, 61), (58, 58), (59, 59), (60, 60)], [(43, 43), (45, 45), (42, 42)], [(25, 25), (29, 29), (32, 32), (77, 77), (37, 37), (34, 34), (31, 31), (33, 33)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa670>"": ""++ix\n{\r\n   Tag t = (Tag)jComboBoxQueryType.getItemAt(ix);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa2b0>"": ""boolean found = false;\nfor (int ix=0; ix<jComboBoxQueryType.getItemCount(); ++ix)\r\n{\r\n   Tag t = (Tag)jComboBoxQueryType.getItemAt(ix);\n   String lang = (\""\""+t.getValue()).toLowerCase();\n   if (lang.equals(language.toLowerCase()))\r\n   {\r\n       found = true;\n   }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b14ee0>"": ""for (int ix=0; ix<jComboBoxQueryType.getItemCount(); ++ix)\r\n{\r\n   if (!(jComboBoxQueryType.getItemAt(ix) instanceof Tag))\r\n   {\r\n    ix--;\n   }\n}\nfor (int ix=0; ix<jComboBoxQueryType.getItemCount(); ++ix)\r"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ce1100>"": ""Iterator i = dataset.getFieldsList().iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd0730>"": ""\r\n    String language = \""sql\"";\n    if (this.dataset.getQuery() != null && \r\n        this.dataset.getQuery().getText() != null)\n    {\r\n        language = this.dataset.getQuery().getLanguage();\n        if (language == null || language.length() == 0) language = \""sql\"";\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ce1d60>"": ""List columns = new ArrayList();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbf7580>"": ""{\r\n    try { // Used only to perform a finally op\r\n        DefaultTableModel dtm = (DefaultTableModel)jTableFields.getModel();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faad90>"": ""++ix\n{\r\n   Tag t = (Tag)jComboBoxQueryType.getItemAt(ix);\n   String lang = (\""\""+t.getValue()).toLowerCase();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5cdefa0>"": ""{\r\n    JRDesignField field = (JRDesignField)i.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4bd0fd0>"": ""\r\n    String query = \""\"";\n    if (this.dataset.getQuery() != null && \r\n        this.dataset.getQuery().getText() != null)\n    {\r\n        query = this.dataset.getQuery().getText();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbf71f0>"": ""Exception ex""}",4,1,2,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/ireport/ireport-3.7.5/src/iReport-3.7.5-src/ireport-designer/src/com/jaspersoft/ireport/designer/data/ReportQueryDialog.java,setDataset,2535,13.0,49.0,exception_happened
2,2,2,False,[],[],"[[(1, 1), (69, 69), (0, 0)], [(12, 12), (16, 16), (15, 15), (14, 14)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe96a7c0>"": ""{\n    TokenSequence<CppTokenId> prep = ts.embedded(CppTokenId.languagePreproc());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a6d0>"": ""Token<CppTokenId> directive = null;\nif (prep.token() != null) {\n    directive = prep.token();\n}""}",0,2,0,11,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.editor/src/org/netbeans/modules/cnd/editor/fortran/reformat/FortranPreprocessorFormatter.java,indentPreprocessor,79,23.0,53.0,exception_happened
3,3,1,False,"[(59, 77), (79, 91), (1, 8)]",[],"[[(92, 92), (36, 36), (0, 0)], [(17, 17), (14, 14), (23, 23), (16, 16), (9, 9), (0, 0), (24, 24), (20, 20), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18), (92, 92), (11, 11), (15, 15)], [(17, 17), (14, 14), (16, 16), (9, 9), (0, 0), (20, 20), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18), (92, 92), (59, 59), (11, 11), (15, 15)], [(92, 92), (11, 11), (0, 0)], [(92, 92), (12, 12), (0, 0)], [(56, 56), (43, 43), (52, 52), (20, 20), (39, 39), (42, 42), (48, 48), (57, 57), (11, 11), (53, 53), (16, 16), (35, 35), (44, 44), (12, 12), (21, 21), (40, 40), (49, 49), (17, 17), (36, 36), (45, 45), (54, 54), (18, 18), (55, 55), (15, 15), (41, 41), (50, 50), (51, 51), (14, 14), (23, 23), (9, 9), (0, 0), (46, 46), (10, 10), (19, 19), (92, 92), (37, 37), (47, 47), (24, 24)], [(17, 17), (14, 14), (16, 16), (62, 62), (9, 9), (0, 0), (61, 61), (20, 20), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18), (92, 92), (59, 59), (11, 11), (15, 15)], [(17, 17), (14, 14), (16, 16), (9, 9), (0, 0), (20, 20), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18), (92, 92), (11, 11), (15, 15)], [(6, 6), (92, 92), (0, 0)], [(17, 17), (14, 14), (23, 23), (16, 16), (27, 27), (9, 9), (0, 0), (24, 24), (20, 20), (26, 26), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18), (92, 92), (11, 11), (15, 15)], [(92, 92), (35, 35), (0, 0)], [(92, 92), (9, 9), (0, 0)], [(92, 92), (10, 10), (0, 0)], [(56, 56), (43, 43), (52, 52), (20, 20), (39, 39), (42, 42), (80, 80), (48, 48), (57, 57), (11, 11), (53, 53), (16, 16), (35, 35), (44, 44), (12, 12), (21, 21), (40, 40), (49, 49), (17, 17), (36, 36), (45, 45), (54, 54), (79, 79), (18, 18), (55, 55), (15, 15), (41, 41), (50, 50), (51, 51), (14, 14), (23, 23), (9, 9), (0, 0), (46, 46), (10, 10), (19, 19), (92, 92), (37, 37), (47, 47), (24, 24)], [(92, 92), (1, 1), (0, 0)], [(37, 37), (92, 92), (0, 0)], [(0, 0), (1, 1), (92, 92), (3, 3), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac22c7fa0>"": ""{\n    Column closeStackColumn = new Column(\""close_stack_id\"", Long.class, getMessage(\""Column.CloseStack\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873a30>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    final DataTableMetadata dtraceFopsMetadata =\n            new DataTableMetadata(\""fops\"", fopsColumns, null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c7e20>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    IndicatorMetadata indicatorMetadata = new IndicatorMetadata(fopsColumns);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db7880>"": ""{\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db7490>"": ""{\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c7490>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    final DataTableMetadata dtraceFopsMetadata =\n            new DataTableMetadata(\""fops\"", fopsColumns, null); // NOI18N\n    Column openStackColumn = new Column(\""open_stack_id\"", Long.class, getMessage(\""Column.OpenStack\""), null); // NOI18N\n    Column closeStackColumn = new Column(\""close_stack_id\"", Long.class, getMessage(\""Column.CloseStack\""), null); // NOI18N\n    Column statusColumn = new Column(\""status\"", String.class, getMessage(\""Column.Status\""), null); // NOI18N\n    DataTableMetadata detailsMetadata = new DataTableMetadata(\""iosummary\"", // NOI18N\n            Arrays.asList(\n                    fileColumn,\n                    new Column(\""bytes_read\"", Long.class, getMessage(\""Column.BytesRead\""), null), // NOI18N\n                    new Column(\""bytes_written\"", Long.class, getMessage(\""Column.BytesWritten\""), null), // NOI18N\n                    openStackColumn,\n                    closeStackColumn,\n                    statusColumn),\n            \""SELECT file, bytes_read, bytes_written, open_stack_id, close_stack_id, CASEWHEN(open_failed, 'err', CASEWHEN(open_seen AND NOT close_seen, 'warn', 'ok')) AS status FROM \"" + // NOI18N\n            \""(SELECT file, SUM(CASEWHEN(operation='read', size, 0)) AS bytes_read, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='write', size, 0)) AS bytes_written, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='open', stack_id, 0)) AS open_stack_id, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='close', stack_id, 0)) AS close_stack_id, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='open', timestamp, 0)) AS open_timestamp, \"" + // NOI18N\n            \""BOOL_OR(operation='open') AS open_seen, \"" + // NOI18N\n            \""BOOL_OR(operation='open' AND sid=0) AS open_failed, \"" + // NOI18N\n            \""BOOL_OR(operation='close') AS close_seen \"" + // NOI18N\n            \""FROM fops GROUP BY sid, file) ORDER BY open_timestamp, file\"", // NOI18N\n            Arrays.asList(dtraceFopsMetadata));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac00d24c0>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    IndicatorMetadata indicatorMetadata = new IndicatorMetadata(fopsColumns);\n    TimeSeriesIndicatorConfiguration indicatorConfiguration = new TimeSeriesIndicatorConfiguration(\n            indicatorMetadata, INDICATOR_POSITION);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db76d0>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7d00>"": ""{\n    FeatureDescriptor descriptor = new FeatureDescriptor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873b20>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    final DataTableMetadata dtraceFopsMetadata =\n            new DataTableMetadata(\""fops\"", fopsColumns, null); // NOI18N\n    final DTDCConfiguration dtraceCollectorConfig =\n            new DTDCConfiguration(getScriptUrl(), Arrays.asList(dtraceFopsMetadata));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c7b80>"": ""{\n    Column openStackColumn = new Column(\""open_stack_id\"", Long.class, getMessage(\""Column.OpenStack\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7370>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7b80>"": ""{\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8fd0>"": ""{\n    Column opColumn = new Column(\""operation\"", String.class, getMessage(\""Column.OpType\""), null); // NOI18N\n    Column fileColumn = new Column(\""file\"", String.class, getMessage(\""Column.Filename\""), null); // NOI18N\n    Column sizeColumn = new Column(\""size\"", Long.class, getMessage(\""Column.Size\""), null); // NOI18N\n    Column fileCountColumn = new Column(\""file_count\"", Long.class, getMessage(\""Column.FileCount\""), null); // NOI18N\n    List<Column> fopsColumns = Arrays.asList(\n            new Column(\""timestamp\"", Time.class, getMessage(\""Column.Timestamp\""), null), // NOI18N\n            opColumn,\n            new Column(\""sid\"", Integer.class, getMessage(\""Column.SID\""), null), // NOI18N\n            fileColumn,\n            sizeColumn,\n            fileCountColumn,\n            new Column(\""stack_id\"", Long.class, getMessage(\""Column.StackId\""), null)); // NOI18N\n    final DataTableMetadata dtraceFopsMetadata =\n            new DataTableMetadata(\""fops\"", fopsColumns, null); // NOI18N\n    Column openStackColumn = new Column(\""open_stack_id\"", Long.class, getMessage(\""Column.OpenStack\""), null); // NOI18N\n    Column closeStackColumn = new Column(\""close_stack_id\"", Long.class, getMessage(\""Column.CloseStack\""), null); // NOI18N\n    Column statusColumn = new Column(\""status\"", String.class, getMessage(\""Column.Status\""), null); // NOI18N\n    DataTableMetadata detailsMetadata = new DataTableMetadata(\""iosummary\"", // NOI18N\n            Arrays.asList(\n                    fileColumn,\n                    new Column(\""bytes_read\"", Long.class, getMessage(\""Column.BytesRead\""), null), // NOI18N\n                    new Column(\""bytes_written\"", Long.class, getMessage(\""Column.BytesWritten\""), null), // NOI18N\n                    openStackColumn,\n                    closeStackColumn,\n                    statusColumn),\n            \""SELECT file, bytes_read, bytes_written, open_stack_id, close_stack_id, CASEWHEN(open_failed, 'err', CASEWHEN(open_seen AND NOT close_seen, 'warn', 'ok')) AS status FROM \"" + // NOI18N\n            \""(SELECT file, SUM(CASEWHEN(operation='read', size, 0)) AS bytes_read, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='write', size, 0)) AS bytes_written, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='open', stack_id, 0)) AS open_stack_id, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='close', stack_id, 0)) AS close_stack_id, \"" + // NOI18N\n            \""SUM(CASEWHEN(operation='open', timestamp, 0)) AS open_timestamp, \"" + // NOI18N\n            \""BOOL_OR(operation='open') AS open_seen, \"" + // NOI18N\n            \""BOOL_OR(operation='open' AND sid=0) AS open_failed, \"" + // NOI18N\n            \""BOOL_OR(operation='close') AS close_seen \"" + // NOI18N\n            \""FROM fops GROUP BY sid, file) ORDER BY open_timestamp, file\"", // NOI18N\n            Arrays.asList(dtraceFopsMetadata));\n    AdvancedTableViewVisualizerConfiguration tableConfiguration =\n            new AdvancedTableViewVisualizerConfiguration(detailsMetadata, fileColumn.getColumnName(), fileColumn.getColumnName());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae73a0>"": ""{\n    final String toolName = getMessage(\""Tool.Name\""); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c73a0>"": ""{\n    Column statusColumn = new Column(\""status\"", String.class, getMessage(\""Column.Status\""), null); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7fd0>"": ""{\n    final String toolName = getMessage(\""Tool.Name\""); // NOI18N\n    final DLightToolConfiguration toolConfiguration =\n            new DLightToolConfiguration(ID, toolName);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/dlight.fops/src/org/netbeans/modules/dlight/fops/FopsToolConfigurationProvider.java,create,84,1.0,47.0,exception_happened
4,4,2,False,[],[],"[[(56, 56), (52, 52), (33, 33), (37, 37), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (17, 17), (45, 45), (13, 13), (18, 18), (64, 64), (41, 41), (51, 51), (4, 4), (5, 5), (14, 14), (0, 0), (46, 46), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)], [(56, 56), (52, 52), (33, 33), (37, 37), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (17, 17), (45, 45), (13, 13), (18, 18), (64, 64), (41, 41), (51, 51), (4, 4), (5, 5), (14, 14), (0, 0), (46, 46), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)], [(67, 67), (3, 3), (0, 0)], [(6, 6), (67, 67), (0, 0)], [(57, 57), (46, 46), (43, 43), (52, 52), (45, 45), (50, 50), (54, 54), (44, 44), (39, 39), (55, 55), (48, 48), (41, 41), (47, 47), (49, 49), (42, 42)], [(56, 56), (52, 52), (33, 33), (37, 37), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (17, 17), (45, 45), (13, 13), (18, 18), (64, 64), (41, 41), (51, 51), (4, 4), (5, 5), (14, 14), (0, 0), (46, 46), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)], [(67, 67), (5, 5), (0, 0)], [(56, 56), (43, 43), (52, 52), (61, 61), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (49, 49), (17, 17), (45, 45), (54, 54), (13, 13), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (51, 51), (4, 4), (5, 5), (14, 14), (0, 0), (46, 46), (1, 1), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)], [(4, 4), (67, 67), (0, 0)], [(56, 56), (52, 52), (33, 33), (37, 37), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (17, 17), (45, 45), (13, 13), (18, 18), (64, 64), (41, 41), (51, 51), (4, 4), (5, 5), (14, 14), (0, 0), (46, 46), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad7493640>"": ""{\n   int firstI, secondI;\n   int firstNumValues = first.numValues();\n   int secondNumValues = second.numValues();\n   int numAttributes = m_Data.numAttributes();\n   int classIndex = m_Data.classIndex();\n   for (int p1 = 0, p2 = 0; p1 < firstNumValues || p2 < secondNumValues; ) {\n     if (p1 >= firstNumValues)\nfirstI = numAttributes;\n     else\nfirstI = first.index(p1);\n     if (p2 >= secondNumValues)\nsecondI = numAttributes;\n     else\nsecondI = second.index(p2);\n     if (firstI == classIndex) {\np1++;\n     }\n     if ((firstI < numAttributes) && !m_ActiveIndices[firstI]) {\np1++;\n     }\n     if (secondI == classIndex) {\np2++;\n     }\n     if ((secondI < numAttributes) && !m_ActiveIndices[secondI]) {\np2++;\n     }\n     if (firstI == secondI) {\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\np2++;\n     }\np1++;\n     }\n   }\n }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493a90>"": ""{\n   int firstI, secondI;\n   int firstNumValues = first.numValues();\n   int secondNumValues = second.numValues();\n   int numAttributes = m_Data.numAttributes();\n   int classIndex = m_Data.classIndex();\n   for (int p1 = 0, p2 = 0; p1 < firstNumValues || p2 < secondNumValues; ) {\n     if (p1 >= firstNumValues)\nfirstI = numAttributes;\n     else\nfirstI = first.index(p1);\n     if (p2 >= secondNumValues)\nsecondI = numAttributes;\n     else\nsecondI = second.index(p2);\n     if (firstI == classIndex) {\np1++;\n     }\n     if ((firstI < numAttributes) && !m_ActiveIndices[firstI]) {\np1++;\n     }\n     if (secondI == classIndex) {\np2++;\n     }\n     if ((secondI < numAttributes) && !m_ActiveIndices[secondI]) {\np2++;\n     }\n     if (firstI == secondI) {\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\np2++;\n     }\np1++;\n     }\n   }\n }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74930d0>"": ""{\n  int firstNumValues = first.numValues();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493ee0>"": ""{\n  int classIndex = m_Data.classIndex();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd9547c0>"": ""double diff;\n     if (firstI == secondI) {\ndiff = difference(firstI,\n    \t\t  first.valueSparse(p1),\n    \t\t  second.valueSparse(p2));\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\ndiff = difference(secondI, \n    \t\t  0, second.valueSparse(p2));\n     }\ndiff = difference(firstI, \n    \t\t  first.valueSparse(p1), 0);\n     }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493550>"": ""{\n   int firstI, secondI;\n   int firstNumValues = first.numValues();\n   int secondNumValues = second.numValues();\n   int numAttributes = m_Data.numAttributes();\n   int classIndex = m_Data.classIndex();\n   for (int p1 = 0, p2 = 0; p1 < firstNumValues || p2 < secondNumValues; ) {\n     if (p1 >= firstNumValues)\nfirstI = numAttributes;\n     else\nfirstI = first.index(p1);\n     if (p2 >= secondNumValues)\nsecondI = numAttributes;\n     else\nsecondI = second.index(p2);\n     if (firstI == classIndex) {\np1++;\n     }\n     if ((firstI < numAttributes) && !m_ActiveIndices[firstI]) {\np1++;\n     }\n     if (secondI == classIndex) {\np2++;\n     }\n     if ((secondI < numAttributes) && !m_ActiveIndices[secondI]) {\np2++;\n     }\n     if (firstI == secondI) {\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\np2++;\n     }\np1++;\n     }\n   }\n }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493160>"": ""{\n  int numAttributes = m_Data.numAttributes();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493190>"": ""{\n   double distance = 0;\n   int firstI, secondI;\n   int firstNumValues = first.numValues();\n   int secondNumValues = second.numValues();\n   int numAttributes = m_Data.numAttributes();\n   int classIndex = m_Data.classIndex();\n   for (int p1 = 0, p2 = 0; p1 < firstNumValues || p2 < secondNumValues; ) {\n     if (p1 >= firstNumValues)\nfirstI = numAttributes;\n     else\nfirstI = first.index(p1);\n     if (p2 >= secondNumValues)\nsecondI = numAttributes;\n     else\nsecondI = second.index(p2);\n     if (firstI == classIndex) {\np1++;\n     }\n     if ((firstI < numAttributes) && !m_ActiveIndices[firstI]) {\np1++;\n     }\n     if (secondI == classIndex) {\np2++;\n     }\n     if ((secondI < numAttributes) && !m_ActiveIndices[secondI]) {\np2++;\n     }\n     double diff;\n     if (firstI == secondI) {\ndiff = difference(firstI,\n    \t\t  first.valueSparse(p1),\n    \t\t  second.valueSparse(p2));\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\ndiff = difference(secondI, \n    \t\t  0, second.valueSparse(p2));\np2++;\n     }\ndiff = difference(firstI, \n    \t\t  first.valueSparse(p1), 0);\np1++;\n     }\n     distance = updateDistance(distance, diff);\n   }\n }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74931c0>"": ""{\n  int secondNumValues = second.numValues();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74935e0>"": ""{\n   int firstI, secondI;\n   int firstNumValues = first.numValues();\n   int secondNumValues = second.numValues();\n   int numAttributes = m_Data.numAttributes();\n   int classIndex = m_Data.classIndex();\n   for (int p1 = 0, p2 = 0; p1 < firstNumValues || p2 < secondNumValues; ) {\n     if (p1 >= firstNumValues)\nfirstI = numAttributes;\n     else\nfirstI = first.index(p1);\n     if (p2 >= secondNumValues)\nsecondI = numAttributes;\n     else\nsecondI = second.index(p2);\n     if (firstI == classIndex) {\np1++;\n     }\n     if ((firstI < numAttributes) && !m_ActiveIndices[firstI]) {\np1++;\n     }\n     if (secondI == classIndex) {\np2++;\n     }\n     if ((secondI < numAttributes) && !m_ActiveIndices[secondI]) {\np2++;\n     }\n     if (firstI == secondI) {\np1++;\np2++;\n     }\n     else if (firstI > secondI) {\np2++;\n     }\np1++;\n     }\n   }\n }""}",2,0,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/weka/weka-3.7.9/src/src/main/java/weka/core/NormalizableDistance.java,distance,396,15.0,47.0,exception_happened
5,5,2,False,"[(14, 24), (25, 35), (36, 48)]",[],[],{},0,0,0,13,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.antlr/src/org/netbeans/modules/cnd/antlr/AlternativeBlock.java,setOption,148,14.0,41.0,exception_happened
6,6,2,False,"[(9, 17)]","[(22, 22), (48, 48)]","[[(17, 17), (14, 14), (16, 16), (9, 9), (13, 13), (10, 10), (11, 11), (15, 15)], [(4, 4), (0, 0), (1, 1), (63, 63), (3, 3), (2, 2)], [(37, 37), (36, 36), (38, 38), (35, 35)], [(54, 54), (58, 58), (55, 55)], [(49, 49), (48, 48)], [(30, 30), (27, 27), (43, 43), (36, 36), (45, 45), (38, 38), (26, 26), (35, 35), (42, 42), (37, 37), (31, 31), (53, 53), (33, 33)], [(43, 43), (52, 52), (38, 38), (42, 42), (11, 11), (53, 53), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (31, 31), (22, 22), (17, 17), (27, 27), (36, 36), (45, 45), (13, 13), (15, 15), (14, 14), (9, 9), (10, 10), (37, 37), (33, 33)], [(17, 17), (14, 14), (16, 16), (9, 9), (13, 13), (10, 10), (11, 11), (15, 15)], [(52, 52), (25, 25), (26, 26)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5e20>"": ""int startPlugin = scan(buffer, 0, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\nint startComment = scan(buffer, 0, COMMENT_START_TAG);\nint endComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\nwhile (startComment != -1 && startPlugin > startComment && startPlugin < endComment) {\n\tstartPlugin = scan(buffer, endComment, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\n\tstartComment = scan(buffer, endComment, COMMENT_START_TAG);\n\tendComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5c40>"": ""{\nStringBuffer buffer = null;\ntry {\n\tbuffer = readFile(new File(pluginFilePath));\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3e50>"": ""int endPlugin = scan(buffer, startPlugin + 1, \"">\""); //$NON-NLS-1$"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9ad2970>"": ""int startVersionId = scan(buffer, versionAttr + 1, BACKSLASH);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3dc0>"": ""int endVersionWord = versionAttr + VERSION.length();\nwhile (Character.isWhitespace(buffer.charAt(endVersionWord)) && endVersionWord < endPlugin) {\n\tendVersionWord++;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aef14e6d0>"": ""{\nOutputStreamWriter w = new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(pluginFilePath)), \""UTF-8\""); //$NON-NLS-1$\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9ad28e0>"": ""int startVersionId = scan(buffer, versionAttr + 1, BACKSLASH);\nint endVersionId = scan(buffer, startVersionId + 1, BACKSLASH);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3190>"": ""{\nint versionAttr = scan(buffer, startPlugin, VERSION);\nif (!Character.isWhitespace(buffer.charAt(versionAttr - 1))) {\n\tstartPlugin = versionAttr + VERSION.length();\n}\nint endVersionWord = versionAttr + VERSION.length();\nwhile (Character.isWhitespace(buffer.charAt(endVersionWord)) && endVersionWord < endPlugin) {\n\tendVersionWord++;\n}\nif (buffer.charAt(endVersionWord) != '=') {\n\tstartPlugin = endVersionWord;\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5bb0>"": ""int startPlugin = scan(buffer, 0, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\nint startComment = scan(buffer, 0, COMMENT_START_TAG);\nint endComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\nwhile (startComment != -1 && startPlugin > startComment && startPlugin < endComment) {\n\tstartPlugin = scan(buffer, endComment, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\n\tstartComment = scan(buffer, endComment, COMMENT_START_TAG);\n\tendComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\n}\nint endPlugin = scan(buffer, startPlugin + 1, \"">\""); //$NON-NLS-1$\nboolean versionFound = false;\nwhile (!versionFound) {\n\tint versionAttr = scan(buffer, startPlugin, VERSION);\n\tif (!Character.isWhitespace(buffer.charAt(versionAttr - 1))) {\n\t\tstartPlugin = versionAttr + VERSION.length();\n\t}\n\tint endVersionWord = versionAttr + VERSION.length();\n\twhile (Character.isWhitespace(buffer.charAt(endVersionWord)) && endVersionWord < endPlugin) {\n\t\tendVersionWord++;\n\t}\n\tif (buffer.charAt(endVersionWord) != '=') {\n\t\tstartPlugin = endVersionWord;\n\t}\n\tversionFound = true;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5dc0>"": ""int startPlugin = scan(buffer, 0, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\nint startComment = scan(buffer, 0, COMMENT_START_TAG);\nint endComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\nwhile (startComment != -1 && startPlugin > startComment && startPlugin < endComment) {\n\tstartPlugin = scan(buffer, endComment, plugin ? PLUGIN_START_TAG : FRAGMENT_START_TAG);\n\tstartComment = scan(buffer, endComment, COMMENT_START_TAG);\n\tendComment = startComment > -1 ? scan(buffer, startComment, COMMENT_END_TAG) : -1;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3df0>"": ""boolean versionFound = false;\nwhile (!versionFound) {\n\tversionFound = true;""}",0,3,2,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/lib/pdebuild-antsrc/org/eclipse/pde/internal/build/tasks/PluginVersionReplaceTask.java,execute,60,22.0,41.0,exception_happened
7,7,2,False,[],[],[],{},0,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/findbugs/findbugs-1.3.9/src/findbugs-1.3.9/src/java/edu/umd/cs/findbugs/detect/FindNonShortCircuit.java,scanForBooleanValue,188,24.0,49.0,exception_happened
8,8,1,False,"[(35, 42), (46, 55), (57, 64), (28, 33), (35, 55), (35, 64), (10, 26)]",[],"[[(4, 4), (0, 0), (52, 52), (1, 1), (26, 26), (75, 75), (41, 41)], [(1, 1), (75, 75), (0, 0)], [(7, 7), (0, 0), (1, 1), (75, 75), (24, 24)], [(23, 23), (62, 62), (0, 0), (1, 1), (75, 75), (6, 6), (51, 51), (40, 40)], [(0, 0), (1, 1), (25, 25), (3, 3), (75, 75), (53, 53), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98400>"": ""{\n    EntityManager em = getEntityManager();\n    StrTestEntity ed2 = new StrTestEntity(\""data_ed_2\"");\n    ed2 = em.find(StrTestEntity.class, ed2.getId());\n    ed2 = em.find(StrTestEntity.class, ed2.getId());\n    ed2 = em.find(StrTestEntity.class, ed2.getId());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b24280>"": ""{\n    EntityManager em = getEntityManager();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98310>"": ""{\nEntityManager em = getEntityManager();\nListUniEntity ing2 = new ListUniEntity(4, \""data_ing_2\"");\ning2 = em.find(ListUniEntity.class, ing2.getId());\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d989d0>"": ""{\n    EntityManager em = getEntityManager();\n    ListUniEntity ing1 = new ListUniEntity(3, \""data_ing_1\"");\n    ing1 = em.find(ListUniEntity.class, ing1.getId());\n    ing1 = em.find(ListUniEntity.class, ing1.getId());\n    ing1 = em.find(ListUniEntity.class, ing1.getId());\n    ing1 = em.find(ListUniEntity.class, ing1.getId());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b24df0>"": ""{\n    EntityManager em = getEntityManager();\n    StrTestEntity ed1 = new StrTestEntity(\""data_ed_1\"");\n    ed1 = em.find(StrTestEntity.class, ed1.getId());\n    ed1 = em.find(StrTestEntity.class, ed1.getId());\n    ed1 = em.find(StrTestEntity.class, ed1.getId());\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hibernate/hibernate-4.2.2/src/hibernate-release-4.2.2.Final/project/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/manytomany/unidirectional/BasicUniList.java,initData,57,1.0,43.0,exception_happened
9,9,2,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/team/internal/ui/Utils.java,updateLabels,353,15.0,44.0,exception_happened
10,10,2,False,"[(24, 29), (44, 49)]",[],"[[(25, 25), (29, 29), (24, 24)], [(1, 1), (73, 73), (0, 0)], [(14, 14), (9, 9), (72, 72), (13, 13), (10, 10), (11, 11)], [(8, 8), (73, 73), (0, 0)], [(8, 8), (9, 9), (73, 73), (0, 0)], [(14, 14), (9, 9), (72, 72), (13, 13), (10, 10), (11, 11)], [(45, 45), (49, 49), (44, 44)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7c10>"": ""{ //$NON-NLS-1$\r\n  URI uri = URIUtils.createURI(child.getText());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b14a30>"": ""{\r\n  INews news = Owl.getModelFactory().createNews(null, feed, new Date(System.currentTimeMillis() - (fNewsCounter++ * 1)));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae53be670>"": ""for (Iterator< ? > iter = newsChilds.iterator(); iter.hasNext();) {\r\n  Element child = (Element) iter.next();\n  String name = child.getName().toLowerCase();\n  /* Check wether this Element is to be processed by a Contribution */\n  if (processElementExtern(child, news))\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae53becd0>"": ""{\r\n  List< ? > newsChilds = element.getChildren();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae53be8e0>"": ""{\r\n  List< ? > newsChilds = element.getChildren();\n  for (Iterator< ? > iter = newsChilds.iterator();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae53be550>"": ""for (Iterator< ? > iter = newsChilds.iterator(); iter.hasNext();) {\r\n  Element child = (Element) iter.next();\n  String name = child.getName().toLowerCase();\n  /* Check wether this Element is to be processed by a Contribution */\n  if (processElementExtern(child, news))\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11370>"": ""{ //$NON-NLS-1$\r\n  IPerson person = Owl.getModelFactory().createPerson(null, news);\n}""}",2,0,0,12,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/rssowl/rssowl-2.0.5/src/org.rssowl.core/src/org/rssowl/core/internal/interpreter/RSSInterpreter.java,processItems,391,14.0,49.0,exception_happened
11,11,2,False,[],"[(9, 9)]","[[(19, 19), (32, 32), (16, 16)], [(18, 18), (17, 17), (32, 32), (16, 16)], [(17, 17), (32, 32), (16, 16)], [(17, 17), (16, 16), (20, 20), (19, 19), (32, 32), (18, 18)], [(17, 17), (16, 16), (20, 20), (19, 19), (32, 32), (21, 21), (18, 18), (22, 22)], [(43, 43), (38, 38), (39, 39), (41, 41), (40, 40), (42, 42)], [(39, 39), (41, 41), (40, 40), (43, 43)], [(17, 17), (16, 16), (20, 20), (19, 19), (32, 32), (21, 21), (18, 18)], [(17, 17), (30, 30), (23, 23), (16, 16), (24, 24), (25, 25), (20, 20), (29, 29), (26, 26), (33, 33), (19, 19), (32, 32), (21, 21), (36, 36), (18, 18), (22, 22), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc610>"": ""{\n    RADVisualContainer metacont = (RADVisualContainer)metacomp;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7820>"": ""{\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n    int index = tabbedPane.getSelectedIndex();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7850>"": ""{\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7460>"": ""{\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n    int index = tabbedPane.getSelectedIndex();\n    RADVisualContainer metacont = (RADVisualContainer)metacomp;\n    RADVisualComponent tabComp = metacont.getSubComponent(index);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7880>"": ""{\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n    int index = tabbedPane.getSelectedIndex();\n    RADVisualContainer metacont = (RADVisualContainer)metacomp;\n    RADVisualComponent tabComp = metacont.getSubComponent(index);\n    Node.Property[] props = tabComp.getConstraintsProperties();\n    for (int i=0; i<props.length; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17ef70>"": ""String editText = null;\ntry {\n    Object text = property.getRealValue();\n    if (!(text instanceof String)) text = \""\"";\n    editText = (String) text;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17eeb0>"": ""{\n    Object text = property.getRealValue();\n    if (!(text instanceof String)) text = \""\"";\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc130>"": ""Component comp = (Component) getComponent(metacomp);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7970>"": ""{\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n    int index = tabbedPane.getSelectedIndex();\n    RADVisualContainer metacont = (RADVisualContainer)metacomp;\n    RADVisualComponent tabComp = metacont.getSubComponent(index);\n    Node.Property[] props = tabComp.getConstraintsProperties();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7dc0>"": ""FormProperty property = null;\nif (JTabbedPane.class.isAssignableFrom(metacomp.getBeanClass())) {\n    JTabbedPane tabbedPane = (JTabbedPane)comp;\n    int index = tabbedPane.getSelectedIndex();\n    RADVisualContainer metacont = (RADVisualContainer)metacomp;\n    RADVisualComponent tabComp = metacont.getSubComponent(index);\n    Node.Property[] props = tabComp.getConstraintsProperties();\n    for (int i=0; i<props.length; i++) {\n        if (props[i].getName().equals(\""TabConstraints.tabTitle\"")) { // NOI18N\n            if (props[i] instanceof FormProperty) {\n                property = (FormProperty)props[i];\n            }\n        }\n    }\n} else {\n    property = metacomp.getBeanProperty(\""text\""); // NOI18N\n}""}",2,0,2,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/form/src/org/netbeans/modules/form/FormDesigner.java,startInPlaceEditing,1549,15.0,47.0,exception_happened
12,12,2,False,"[(54, 79), (55, 79), (18, 29), (66, 79)]","[(28, 28), (32, 32)]","[[(80, 80), (2, 2), (0, 0)], [(4, 4), (30, 30), (5, 5), (7, 7), (31, 31)], [(4, 4), (8, 8), (17, 17), (5, 5), (14, 14), (7, 7), (16, 16), (0, 0), (30, 30), (1, 1), (13, 13), (12, 12), (80, 80), (2, 2), (31, 31)], [(4, 4), (30, 30), (5, 5), (7, 7), (0, 0), (20, 20), (29, 29), (19, 19), (3, 3), (21, 21), (18, 18), (80, 80), (2, 2), (31, 31)], [(4, 4), (30, 30), (5, 5), (23, 23), (7, 7), (31, 31), (0, 0), (25, 25), (20, 20), (29, 29), (19, 19), (3, 3), (80, 80), (18, 18), (2, 2), (22, 22), (24, 24)], [(4, 4), (30, 30), (5, 5), (7, 7), (0, 0), (20, 20), (29, 29), (19, 19), (3, 3), (80, 80), (18, 18), (2, 2), (31, 31)], [(23, 23), (25, 25), (29, 29), (18, 18), (22, 22)], [(4, 4), (8, 8), (30, 30), (5, 5), (7, 7), (31, 31)], [(19, 19), (18, 18), (29, 29)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abef460a0>"": ""{\t\n\tString primaryTypeName = referenceTypeName.replace('$', '.');\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17e970>"": ""catch (CoreException ce) {}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46a00>"": ""{\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46a60>"": ""{\t\nString resource = referenceTypeName;\nString primaryTypeName = referenceTypeName.replace('$', '.');\nif (fJavaProject != null) {\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t\tIResource res = Util.getResource(fJavaProject.getProject(), type);\n\t\tif(!Util.isManifest(res.getProjectRelativePath())) {\n\t\t\tresource = res.getProjectRelativePath().toString();\n\t\t}\n\t\t\tresource = \"".\""; //$NON-NLS-1$\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46370>"": ""{\t\nString primaryTypeName = referenceTypeName.replace('$', '.');\nint charStart = -1, charEnd = -1, lineNumber = -1;\nif (fJavaProject != null) {\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t\tif (type != null) {\n\t\t\tISourceRange range = type.getNameRange();\n\t\t\tcharStart = range.getOffset();\n\t\t\tcharEnd = charStart + range.getLength();\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46d00>"": ""{\t\nString primaryTypeName = referenceTypeName.replace('$', '.');\nint charStart = -1, charEnd = -1, lineNumber = -1;\nif (fJavaProject != null) {\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t\tif (type != null) {\n\t\t\tISourceRange range = type.getNameRange();\n\t\t\tcharStart = range.getOffset();\n\t\t\ttry {\n\t\t\t\tIDocument document = Util.getDocument(type.getCompilationUnit());\n\t\t\t\tlineNumber = document.getLineOfOffset(charStart);\n\t\t\t}\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46d60>"": ""{\t\nString primaryTypeName = referenceTypeName.replace('$', '.');\nint charStart = -1, charEnd = -1, lineNumber = -1;\nif (fJavaProject != null) {\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t\tif (type != null) {\n\t\t\tISourceRange range = type.getNameRange();\n\t\t\tcharStart = range.getOffset();\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17e6d0>"": ""{\n\ttry {\n\t\tIDocument document = Util.getDocument(type.getCompilationUnit());\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2f10>"": ""{\n\ttry {\n\t\tIType type = fJavaProject.findType(primaryTypeName);\n\t\tIResource res = Util.getResource(fJavaProject.getProject(), type);\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b14f10>"": ""String[] msgArgs = new String[] {referenceTypeName, referencedMember.getName(), dependency.getComponent().getId()};"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f730>"": ""{\nISourceRange range = type.getNameRange();\n""}",0,0,2,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/pde/api/tools/internal/builder/BaseApiAnalyzer.java,createExternalDependenciesProblem,502,14.0,52.0,exception_happened
13,13,2,False,"[(2, 24)]","[(11, 11)]","[[(5, 5), (0, 0), (25, 25), (10, 10), (2, 2), (6, 6)], [(5, 5), (7, 7), (0, 0), (25, 25), (10, 10), (3, 3), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad9ad2760>"": ""{\n   InputStream in = null;\n   try {\nin = url.openStream();\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9ad29a0>"": ""{\n   InputStream in = null;\n   InputStreamReader urlIn = null;\n   try {\nin = url.openStream();\nurlIn = new InputStreamReader(in);\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9ad27c0>"": ""Throwable t""}",0,0,3,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/web.monitor/serversrc/org/netbeans/modules/web/monitor/server/NotifyUtil.java,run,253,17.0,49.0,exception_happened
14,14,2,False,"[(66, 86), (8, 15), (9, 15)]","[(73, 73), (71, 71)]","[[(5, 5), (87, 87), (0, 0)], [(4, 4), (87, 87), (0, 0)], [(10, 10), (11, 11), (15, 15)], [(85, 85), (84, 84), (81, 81), (83, 83), (80, 80), (82, 82), (86, 86)], [(8, 8), (87, 87), (0, 0)], [(52, 52), (57, 57), (50, 50), (47, 47), (51, 51), (53, 53)], [(8, 8), (56, 56), (87, 87), (0, 0), (1, 1), (32, 32), (64, 64), (57, 57), (47, 47), (42, 42)], [(37, 37), (34, 34), (35, 35)], [(76, 76), (71, 71), (74, 74), (73, 73), (75, 75)], [(20, 20), (26, 26), (21, 21), (18, 18), (22, 22)], [(87, 87), (2, 2), (0, 0)], [(3, 3), (87, 87), (0, 0)], [(9, 9), (87, 87), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3e20>"": ""{\r\nfinal int current = methodGen.getLocalIndex(\""current\"");\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5c40>"": ""{\r\nfinal InstructionList il = methodGen.getInstructionList();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3850>"": ""{\r\n    final Object child = children.nextElement();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed250>"": ""if (stylesheet.hasLocalParams() || hasContents()) {\r\n    il.append(classGen.loadTranslet());\n    final int popFrame = cpg.addMethodref(TRANSLET_CLASS,\r\n\t\t\t\t\t  POP_PARAM_FRAME,\r\n\t\t\t\t\t  POP_PARAM_FRAME_SIG);\n    il.append(new INVOKEVIRTUAL(popFrame));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3490>"": ""{\r\nfinal Vector sortObjects = new Vector();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4aef14e490>"": ""{\r\nint setStartNode = cpg.addInterfaceMethodref(NODE_ITERATOR,\r\n\t\t\t\t\t     SET_START_NODE,\r\n\t\t\t\t\t     \""(I)\""+\r\n\t\t\t\t\t     NODE_ITERATOR_SIG);\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac00d2490>"": ""final String className = classGen.getStylesheet().getClassName();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5ac0>"": ""{\r\nboolean setStartNodeCalled = false;\nfinal Vector sortObjects = new Vector();\nif ((_type != null) && (_type instanceof ResultTreeType)) {\r\n}\r\n    if (sortObjects.size() > 0) {\r\n\tsetStartNodeCalled = true;\n    }\n}\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8d75cd0>"": ""{\r\nErrorMsg err = new ErrorMsg(ErrorMsg.RESULT_TREE_SORT_ERR,this);\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbeda90>"": ""final String applyTemplatesSig = classGen.getApplyTemplatesSig();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed700>"": ""final String className = classGen.getStylesheet().getClassName();\nfinal String applyTemplatesSig = classGen.getApplyTemplatesSig();\nfinal int applyTemplates = cpg.addMethodref(className,\r\n\t\t\t\t\t    _functionName,\r\n\t\t\t\t\t    applyTemplatesSig);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3730>"": ""{\r\n    final int pushFrame = cpg.addMethodref(TRANSLET_CLASS,\r\n\t\t\t\t\t   PUSH_PARAM_FRAME,\r\n\t\t\t\t\t   PUSH_PARAM_FRAME_SIG);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5f70>"": ""{\r\nfinal Stylesheet stylesheet = classGen.getStylesheet();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5b80>"": ""{\r\nfinal ConstantPoolGen cpg = classGen.getConstantPool();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a39d0>"": ""{\r\nfinal Enumeration children = elements();\n   }""}",0,1,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/xalan/xalan-2.7.1/src/xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/ApplyTemplates.java,translate,114,14.0,48.0,exception_happened
15,15,2,False,[],"[(9, 9)]","[[(60, 60), (2, 2), (0, 0)], [(60, 60), (7, 7), (0, 0)], [(10, 10), (18, 18), (9, 9)], [(14, 14), (9, 9), (13, 13), (10, 10), (12, 12), (18, 18), (11, 11)], [(8, 8), (60, 60), (0, 0)], [(6, 6), (60, 60), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbeb0>"": ""{\n    Color oldColor = g.getColor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb8e0>"": ""Direction direction : Direction.values()"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbaf0>"": ""{\n    List<Point2D.Float> points = new ArrayList<Point2D.Float>(8);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe4f0>"": ""{\n    Tile borderingTile = tile.getAdjacentTile(direction);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abef10>"": ""{\n    Tile borderingTile = tile.getAdjacentTile(direction);\n    TileImprovement r;\n    if (borderingTile != null\n        && (r = borderingTile.getRoad()) != null\n        && r.isComplete())\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb130>"": ""{\n    List<Direction> directions = new ArrayList<Direction>(8);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbf70>"": ""{\n    GeneralPath path = new GeneralPath();\n}""}",3,0,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/freecol/freecol-0.10.7/src/freecol/src/net/sf/freecol/client/gui/MapViewer.java,drawRoad,2537,13.0,52.0,exception_happened
16,16,2,False,"[(59, 75), (68, 75), (52, 57)]","[(4, 4), (41, 41), (59, 59), (51, 51), (40, 40), (42, 42)]","[[(46, 46), (43, 43), (45, 45), (50, 50), (47, 47), (49, 49)], [(52, 52), (54, 54), (53, 53)], [(19, 19), (27, 27), (20, 20)], [(10, 10), (16, 16), (9, 9)], [(52, 52), (54, 54), (55, 55), (56, 56), (53, 53)], [(46, 46), (45, 45), (44, 44), (48, 48), (50, 50), (49, 49)], [(30, 30), (29, 29), (39, 39), (32, 32), (34, 34), (33, 33)], [(69, 69), (71, 71), (68, 68)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe659c10>"": ""ISourceLocation sLoc = message.getSourceLocation();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8220>"": ""StringBuffer details = new StringBuffer();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663c40>"": ""char[] filename = problemSource.fileName;\nif (problemSource.isFromBinarySource()) {\r\n\tif (sLoc != null) {\r\n\t\tfilename = sLoc.getSourceFile().getPath().toCharArray();\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663070>"": ""int startPos = getStartPos(sLoc, problemSource);"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663880>"": ""int endPos = getEndPos(sLoc, problemSource);"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663280>"": ""int severity = message.isError() ? ProblemSeverities.Error : ProblemSeverities.Warning;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc880>"": ""CategorizedProblem problem = compiler.problemReporter.createProblem(filename, IProblem.Unclassified, new String[0],\r\n\t\tnew String[] { message.getMessage() }, severity, startPos, endPos, sLoc != null ? sLoc.getLine() : 0,\r\n\t\tsLoc != null ? sLoc.getColumn() : 0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c70d0>"": ""{\r\nSourceLocation sl = (SourceLocation) sLoc;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea310>"": ""{\r\n\tEclipseSourceLocation esLoc = (EclipseSourceLocation) sLoc;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc910>"": ""CategorizedProblem problem = compiler.problemReporter.createProblem(filename, IProblem.Unclassified, new String[0],\r\n\t\tnew String[] { message.getMessage() }, severity, startPos, endPos, sLoc != null ? sLoc.getLine() : 0,\r\n\t\tsLoc != null ? sLoc.getColumn() : 0);\nIProblem[] seeAlso = buildSeeAlsoProblems(problem, message.getExtraSourceLocations(), problemSource,\r\n\t\tusedBinarySourceFileName);"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663130>"": ""boolean usedBinarySourceFileName = false;\nif (problemSource.isFromBinarySource()) {\r\n\tif (sLoc != null) {\r\n\t\tusedBinarySourceFileName = true;\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1cbb0>"": ""CompilationResult problemSource = currentlyWeaving;\nif (problemSource == null) {\r\n\tif (sLoc instanceof EclipseSourceLocation) {\r\n\t\tproblemSource = ((EclipseSourceLocation) sLoc).getCompilationResult();\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff81c0>"": ""{\r\nString lintMessageName = ((LintMessage) message).getLintKind();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc3d0>"": ""ReferenceContext referenceContext = findReferenceContextFor(problemSource);""}",0,0,0,16,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java,handleMessage,57,23.0,45.0,exception_happened
17,17,1,False,[],"[(17, 17), (70, 70), (29, 29), (33, 33), (56, 56), (31, 31), (15, 15)]","[[(20, 20), (18, 18), (22, 22)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (39, 39), (42, 42), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (15, 15), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (14, 14), (23, 23), (9, 9), (0, 0), (46, 46), (65, 65), (10, 10), (19, 19), (28, 28), (74, 74), (37, 37), (47, 47), (24, 24)], [(74, 74), (3, 3), (0, 0)], [(6, 6), (74, 74), (0, 0)], [(43, 43), (38, 38), (35, 35), (39, 39), (48, 48), (32, 32), (42, 42), (40, 40), (34, 34), (31, 31), (33, 33)], [(8, 8), (9, 9), (65, 65), (10, 10), (56, 56)], [(56, 56), (62, 62), (57, 57)], [(20, 20), (18, 18), (22, 22)], [(43, 43), (38, 38), (35, 35), (39, 39), (48, 48), (32, 32), (42, 42), (40, 40), (34, 34), (31, 31), (33, 33)], [(8, 8), (9, 9), (65, 65), (10, 10), (56, 56)], [(56, 56), (62, 62), (57, 57)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc610>"": ""Node parentNode = getNode().getParentNode();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8220>"": ""{\n    RepositoryPathNode node = (RepositoryPathNode) getNode();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663c40>"": ""{\n    SvnProgressSupport support = new SvnProgressSupport() {\n        public void perform() {\n            try {\n                Collection<RepositoryPathEntry> listedEntries = client.listRepositoryPath(pathEntry, this);\n                if(isCanceled()) {\n                    return;\n                }\n\n                Collection<RepositoryPathEntry> previousEntries = getPreviousNodeEntries();\n                // entries to add\n                Collection<RepositoryPathEntry> accepptedNewEntries = new ArrayList<RepositoryPathEntry>();\n                if(listedEntries == null) {\n                    // is not a folder in the repository\n                    RepositoryPathNode node = (RepositoryPathNode) getNode();\n                    node.setRepositoryFolder(false);\n                } else {\n                    if(!isCreativeBrowser(client)) {\n                        // remove all preselected which are not contained in listedEntries\n                        removePreselectedFolders(listedEntries, false);\n                    }\n\n                    // collection of nodes which are to be deleted, e.g. shown as folders but in fact they are files\n                    Collection<RepositoryPathEntry> deletedEntries = new ArrayList<RepositoryPathEntry>();\n                    // keep nodes which were created in the browser\n                    for(RepositoryPathEntry listedEntry : listedEntries) {\n                        boolean found = false;\n                        for(RepositoryPathEntry previousEntry : previousEntries) {\n                            if(previousEntry.getRepositoryFile().getName().equals(listedEntry.getRepositoryFile().getName())) {\n                                if (!listedEntry.getSvnNodeKind().equals(previousEntry.getSvnNodeKind())) {\n                                    // remove this false entry and add it as new (it is FILE, not a DIR)\n                                    deletedEntries.add(listedEntry);\n                                } else {\n                                    found = true;\n                                }\n                                break;\n                            }\n                        }\n                        if(!found) {\n                            // add only entries which are not yet added as a childnodes\n                            accepptedNewEntries.add(listedEntry);\n                        }\n                    }\n                    // remove entries contained in deletedEntries\n                    removePreselectedFolders(deletedEntries, true);\n                }\n                // MUST BE SET TO NULL, otherwise deleted nodes might be reused in createNodes\n                previousNodes = null;\n                setKeys(accepptedNewEntries);\n\n            } catch (SVNClientException ex) {\n                Collection entries = getPreviousNodeEntries();\n                if(entries.size() == 0) {\n                    setKeys(Collections.singleton(errorNode(ex)));\n                }\n                return;\n            } finally {\n                previousNodes = null;\n            }\n        }\n    };\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc850>"": ""Collection<RepositoryPathEntry> accepptedNewEntries = new ArrayList<RepositoryPathEntry>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663880>"": ""{\n    AbstractNode waitNode = new WaitNode(org.openide.util.NbBundle.getMessage(RepositoryPathNode.class, \""BK2001\"")); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf663280>"": ""{\n    RequestProcessor rp = Subversion.getInstance().getRequestProcessor(pathEntry.getRepositoryFile().getRepositoryUrl());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8a90>"": ""RepositoryPathEntry previousEntry : previousEntries"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff88b0>"": ""RepositoryPathEntry listedEntry : listedEntries"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff84f0>"": ""{\n    boolean found = false;\n    for(RepositoryPathEntry previousEntry : previousEntries) {\n        if(previousEntry.getRepositoryFile().getName().equals(listedEntry.getRepositoryFile().getName())) {\n            if (!listedEntry.getSvnNodeKind().equals(previousEntry.getSvnNodeKind())) {\n            } else {\n                found = true;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc910>"": ""Collection<RepositoryPathEntry> previousEntries = getPreviousNodeEntries();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc730>"": ""{\n    try {\n        Collection<RepositoryPathEntry> listedEntries = client.listRepositoryPath(pathEntry, this);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8f40>"": ""Collection<RepositoryPathEntry> deletedEntries = new ArrayList<RepositoryPathEntry>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c3d0>"": ""SVNClientException ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4c1c5e0>"": ""{\n    Collection entries = getPreviousNodeEntries();\n}""}",2,0,1,8,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/subversion/src/org/netbeans/modules/subversion/ui/browser/RepositoryPathNode.java,listRepositoryPath,295,2.0,46.0,exception_happened
18,18,2,False,"[(38, 45), (47, 52), (31, 37)]","[(17, 17), (5, 5), (71, 71), (72, 72), (65, 65), (38, 38), (26, 26), (31, 31)]","[[(27, 27), (26, 26)], [(72, 72), (71, 71), (73, 73)], [(30, 30), (27, 27), (43, 43), (52, 52), (36, 36), (45, 45), (38, 38), (26, 26), (35, 35), (39, 39), (44, 44), (42, 42), (40, 40), (37, 37), (50, 50), (51, 51), (31, 31), (33, 33)], [(5, 5), (62, 62), (61, 61), (54, 54), (58, 58), (55, 55), (57, 57), (6, 6), (59, 59), (56, 56), (60, 60)], [(39, 39), (45, 45), (38, 38)], [(27, 27), (45, 45), (49, 49), (29, 29), (38, 38), (26, 26), (35, 35), (39, 39), (32, 32), (42, 42), (47, 47), (48, 48), (40, 40), (41, 41), (34, 34), (31, 31), (33, 33)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa220>"": ""AST ast= infixExpression.getAST();\nASTRewrite rewrite= ASTRewrite.create(ast);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaac40>"": ""InfixExpression currentExpression= infixExpression;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc670>"": ""String label= CorrectionMessages.AdvancedQuickAssistProcessor_exchangeOperands_description;\nImage image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);\nASTRewriteCorrectionProposal proposal= new ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite, IProposalRelevance.EXCHANGE_OPERANDS, image);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc6a0>"": ""String label= CorrectionMessages.AdvancedQuickAssistProcessor_exchangeOperands_description;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3cd0>"": ""InfixExpression infixExpression= (InfixExpression)node;"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa2e0>"": ""AST ast= infixExpression.getAST();\nASTRewrite rewrite= ASTRewrite.create(ast);\nExpression rightExpression= null;\nInfixExpression currentExpression= infixExpression;\nif (infixExpression.getRightOperand().getStartPosition() <= context.getSelectionOffset()) {\n} else {\n\trightExpression= combineOperands(rewrite, rightExpression, infixExpression.getRightOperand(), false, operator);\n}\nfor (Iterator<Expression> iter= currentExpression.extendedOperands().iterator(); iter.hasNext();) {\n\tExpression extendedOperand= iter.next();\n\tif (extendedOperand.getStartPosition() <= context.getSelectionOffset()) {\n\t} else {\n\t\trightExpression= combineOperands(rewrite, rightExpression, extendedOperand, false, operator);\n\t}\n}\nif (NecessaryParenthesesChecker.needsParentheses(rightExpression, infixExpression, InfixExpression.LEFT_OPERAND_PROPERTY)) {\n\trightExpression= getParenthesizedExpression(ast, rightExpression);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44ccee0>"": ""Image image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac77f8760>"": ""int offset= isOperatorSelected(infixExpression, context.getSelectionOffset(), context.getSelectionLength());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3f70>"": ""InfixExpression infixExpression= (InfixExpression)node;\nOperator operator= infixExpression.getOperator();\nif (operator == InfixExpression.Operator.LESS) {\n\toperator= InfixExpression.Operator.GREATER;\n} else if (operator == InfixExpression.Operator.LESS_EQUALS) {\n\toperator= InfixExpression.Operator.GREATER_EQUALS;\n} else if (operator == InfixExpression.Operator.GREATER) {\n\toperator= InfixExpression.Operator.LESS;\n} else if (operator == InfixExpression.Operator.GREATER_EQUALS) {\n\toperator= InfixExpression.Operator.LESS_EQUALS;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecd92fa0>"": ""{\n\tExpression extendedOperand= iter.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8ac1bb0>"": ""AST ast= infixExpression.getAST();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa7c0>"": ""AST ast= infixExpression.getAST();\nASTRewrite rewrite= ASTRewrite.create(ast);\nExpression leftExpression= null;\nInfixExpression currentExpression= infixExpression;\nleftExpression= combineOperands(rewrite, leftExpression, infixExpression.getLeftOperand(), false, operator);\nif (infixExpression.getRightOperand().getStartPosition() <= context.getSelectionOffset()) {\n\tleftExpression= combineOperands(rewrite, leftExpression, infixExpression.getRightOperand(), false, operator);\n}\nfor (Iterator<Expression> iter= currentExpression.extendedOperands().iterator(); iter.hasNext();) {\n\tExpression extendedOperand= iter.next();\n\tif (extendedOperand.getStartPosition() <= context.getSelectionOffset()) {\n\t\tleftExpression= combineOperands(rewrite, leftExpression, extendedOperand, false, operator);\n\t}\n}\nif (NecessaryParenthesesChecker.needsParentheses(leftExpression, infixExpression, InfixExpression.RIGHT_OPERAND_PROPERTY)) {\n\tleftExpression= getParenthesizedExpression(ast, leftExpression);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecd921c0>"": ""Iterator<Expression> iter= currentExpression.extendedOperands().iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dcf70>"": ""InfixExpression newInfix= ast.newInfixExpression();""}",2,0,0,12,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/text/correction/AdvancedQuickAssistProcessor.java,getExchangeOperandsProposals,1337,26.0,53.0,exception_happened
19,19,2,False,"[(43, 57), (64, 71)]","[(80, 80)]","[[(47, 47), (49, 49), (53, 53), (48, 48)], [(20, 20), (11, 11), (76, 76), (7, 7), (16, 16), (58, 58), (35, 35), (90, 90), (12, 12), (8, 8), (36, 36), (18, 18), (41, 41), (5, 5), (14, 14), (0, 0), (1, 1), (19, 19), (15, 15)], [(76, 76), (36, 36), (58, 58), (38, 38), (35, 35)], [(76, 76), (46, 46), (43, 43), (52, 52), (36, 36), (58, 58), (44, 44), (35, 35), (57, 57), (41, 41), (47, 47), (53, 53)], [(20, 20), (11, 11), (76, 76), (7, 7), (16, 16), (58, 58), (35, 35), (90, 90), (12, 12), (8, 8), (36, 36), (18, 18), (15, 15), (5, 5), (14, 14), (0, 0), (1, 1), (19, 19), (6, 6), (42, 42)], [(85, 85), (87, 87), (84, 84), (83, 83), (80, 80), (89, 89), (82, 82), (86, 86), (88, 88)], [(20, 20), (11, 11), (76, 76), (7, 7), (16, 16), (58, 58), (35, 35), (90, 90), (12, 12), (8, 8), (36, 36), (18, 18), (41, 41), (5, 5), (14, 14), (0, 0), (46, 46), (1, 1), (19, 19), (15, 15)], [(1, 1), (90, 90), (0, 0)], [(43, 43), (52, 52), (20, 20), (57, 57), (11, 11), (53, 53), (76, 76), (7, 7), (16, 16), (58, 58), (35, 35), (44, 44), (90, 90), (12, 12), (8, 8), (36, 36), (18, 18), (41, 41), (5, 5), (14, 14), (0, 0), (46, 46), (1, 1), (19, 19), (47, 47), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac2faba00>"": ""{\n    StringBuffer buf = new StringBuffer(line);\n    buf = buf.replace(index, line.length(), IMPORT_AM_DEPLOY_XML);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9c10>"": ""{\n    String buildScript = FileUtil.toFile(getProjectDirectory()).getPath() + BUILD_SCRIPT;\n    BufferedReader reader = null;\n    String line = null;\n    boolean added = false;\n    try {\n        reader = new BufferedReader(new FileReader(buildScript));\n        while ((line = reader.readLine()) != null) {\n            if (line.indexOf(IMPORT_AM_DEPLOY_XML) != -1) {\n                added = true;\n            }\n        }\n    }\n    if (!added) {\n        try {\n            reader = new BufferedReader(new FileReader(buildScript + BACKUP_EXT));\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bfa30>"": ""{\n    try {\n        File backupBuildScript = new File(buildScript);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fabe50>"": ""{\n    try {\n        reader = new BufferedReader(new FileReader(buildScript + BACKUP_EXT));\n        added = false;\n        int index = 0;\n        while ((line = reader.readLine()) != null) {\n            if (!added && (index = line.indexOf(IMPORT_TAG)) != -1) {\n                added = true;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9460>"": ""{\n    String buildScript = FileUtil.toFile(getProjectDirectory()).getPath() + BUILD_SCRIPT;\n    BufferedReader reader = null;\n    BufferedWriter writer = null;\n    String line = null;\n    boolean added = false;\n    try {\n        reader = new BufferedReader(new FileReader(buildScript));\n        while ((line = reader.readLine()) != null) {\n            if (line.indexOf(IMPORT_AM_DEPLOY_XML) != -1) {\n                added = true;\n            }\n        }\n    }\n    if (!added) {\n        try {\n            writer = new BufferedWriter(new FileWriter(buildScript));\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3250>"": ""GeneratedFilesHelper genFilesHelper = new GeneratedFilesHelper(getProjectDirectory());\ntry {\n    genFilesHelper.refreshBuildScript(\n            AM_DEPLOY_XML_PATH,\n            J2eeProjectHelper.class.getResource(AM_DEPLOY_XSL),\n            false);\n} catch (IOException e) {\n    ErrorManager.getDefault().notify(e);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b92a90>"": ""{\n    String buildScript = FileUtil.toFile(getProjectDirectory()).getPath() + BUILD_SCRIPT;\n    BufferedReader reader = null;\n    String line = null;\n    boolean added = false;\n    try {\n        reader = new BufferedReader(new FileReader(buildScript));\n        while ((line = reader.readLine()) != null) {\n            if (line.indexOf(IMPORT_AM_DEPLOY_XML) != -1) {\n                added = true;\n            }\n        }\n    }\n    if (!added) {\n        try {\n            reader = new BufferedReader(new FileReader(buildScript + BACKUP_EXT));\n            while ((line = reader.readLine()) != null)\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364cac0>"": ""GeneratedFilesHelper genFilesHelper = new GeneratedFilesHelper(getProjectDirectory());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9550>"": ""{\n    String buildScript = FileUtil.toFile(getProjectDirectory()).getPath() + BUILD_SCRIPT;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b92fd0>"": ""{\n    String buildScript = FileUtil.toFile(getProjectDirectory()).getPath() + BUILD_SCRIPT;\n    BufferedReader reader = null;\n    String line = null;\n    boolean added = false;\n    try {\n        reader = new BufferedReader(new FileReader(buildScript));\n        while ((line = reader.readLine()) != null) {\n            if (line.indexOf(IMPORT_AM_DEPLOY_XML) != -1) {\n                added = true;\n            }\n        }\n    }\n    if (!added) {\n        try {\n            reader = new BufferedReader(new FileReader(buildScript + BACKUP_EXT));\n            added = false;\n            int index = 0;\n            while ((line = reader.readLine()) != null) {\n                if (!added && (index = line.indexOf(IMPORT_TAG)) != -1) {\n                    added = true;\n                }\n            }\n        }\n    }\n}""}",0,2,5,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/identity.profile.ui/src/org/netbeans/modules/identity/profile/ui/support/J2eeProjectHelper.java,refreshBuildScript,264,17.0,52.0,exception_happened
20,20,1,False,"[(1, 11)]",[],"[[(61, 61), (0, 0)], [(61, 61), (13, 13), (0, 0)], [(61, 61), (9, 9), (0, 0)], [(61, 61), (1, 1), (0, 0)], [(61, 61), (5, 5), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac00cc640>"": ""public void testWithAllSelected() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946e50>"": ""{\n    OptionTransferSelectTag tag = new OptionTransferSelectTag();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946e80>"": ""{\n    TestAction testaction = (TestAction) action;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946b50>"": ""{\n    List left = new ArrayList();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946fd0>"": ""{\n    List right = new ArrayList();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/struts/struts-2.2.1/src/struts-2.2.1/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java,testWithAllSelected,35,1.0,47.0,exception_happened
21,21,2,False,"[(29, 42), (43, 49)]",[],"[[(43, 43), (20, 20), (29, 29), (42, 42), (34, 34), (11, 11), (30, 30), (76, 76), (7, 7), (16, 16), (35, 35), (44, 44), (21, 21), (77, 77), (22, 22), (31, 31), (17, 17), (27, 27), (36, 36), (18, 18), (41, 41), (50, 50), (4, 4), (5, 5), (0, 0), (9, 9), (46, 46), (1, 1), (10, 10), (28, 28), (6, 6), (33, 33)], [(43, 43), (20, 20), (29, 29), (33, 33), (37, 37), (39, 39), (42, 42), (34, 34), (11, 11), (30, 30), (76, 76), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (77, 77), (22, 22), (31, 31), (40, 40), (17, 17), (27, 27), (36, 36), (18, 18), (41, 41), (50, 50), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (10, 10), (28, 28), (6, 6), (47, 47), (15, 15)], [(43, 43), (20, 20), (29, 29), (33, 33), (37, 37), (39, 39), (42, 42), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (77, 77), (22, 22), (31, 31), (40, 40), (17, 17), (27, 27), (36, 36), (18, 18), (41, 41), (50, 50), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (10, 10), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (61, 61), (20, 20), (29, 29), (33, 33), (37, 37), (39, 39), (42, 42), (66, 66), (75, 75), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (77, 77), (22, 22), (31, 31), (40, 40), (49, 49), (17, 17), (27, 27), (36, 36), (54, 54), (63, 63), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (10, 10), (28, 28), (6, 6), (47, 47), (15, 15)], [(43, 43), (50, 50), (44, 44)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac28bfe50>"": ""{\n    TreePath path = info.getTreeUtilities().pathFor(offset);\n    if (path != null) {\n        Tree scope = path.getLeaf();\n        TypeMirror expected = null;\n        TypeMirror resolved = null;\n        // Check if this is an assignment. \n        if (scope.getKind() == Kind.ASSIGNMENT) {\n        \tpath = path.getParentPath();\n        } else if (scope.getKind() == Kind.MEMBER_SELECT) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                }\n            }\n        } else if (scope.getKind() == Kind.IDENTIFIER) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.MEMBER_SELECT ||\n                        scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                }\n            }\n        } else if (scope.getKind() == Kind.ENHANCED_FOR_LOOP) {\n            EnhancedForLoopTree efl = (EnhancedForLoopTree) scope;\n            path = new TreePath(path, efl.getVariable());\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf0a0>"": ""{\n    TreePath path = info.getTreeUtilities().pathFor(offset);\n    if (path != null) {\n        Tree scope = path.getLeaf();\n        TypeMirror expected = null;\n        TypeMirror resolved = null;\n        // Check if this is an assignment. \n        if (scope.getKind() == Kind.ASSIGNMENT) {\n        \tpath = path.getParentPath();\n        \tif (path != null) {\n        \t\tscope = path.getLeaf();\n        \t}\n        } else if (scope.getKind() == Kind.MEMBER_SELECT) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.IDENTIFIER) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.MEMBER_SELECT ||\n                        scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.ENHANCED_FOR_LOOP) {\n            EnhancedForLoopTree efl = (EnhancedForLoopTree) scope;\n            scope = efl.getVariable();\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bff10>"": ""{\n    TreePath path = info.getTreeUtilities().pathFor(offset);\n    if (path != null) {\n        Tree scope = path.getLeaf();\n        TypeMirror expected = null;\n        TypeMirror resolved = null;\n        // Check if this is an assignment. \n        if (scope.getKind() == Kind.ASSIGNMENT) {\n        \tpath = path.getParentPath();\n        \tif (path != null) {\n        \t\tscope = path.getLeaf();\n        \t}\n        } else if (scope.getKind() == Kind.MEMBER_SELECT) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.IDENTIFIER) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.MEMBER_SELECT ||\n                        scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.ENHANCED_FOR_LOOP) {\n            EnhancedForLoopTree efl = (EnhancedForLoopTree) scope;\n            path = new TreePath(path, efl.getVariable());\n            scope = efl.getVariable();\n        }\n        if (scope.getKind() == Kind.VARIABLE) {\n            expected = info.getTrees().getTypeMirror(path);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf9d0>"": ""{\n    TreePath path = info.getTreeUtilities().pathFor(offset);\n    if (path != null) {\n        Tree scope = path.getLeaf();\n        TypeMirror expected = null;\n        TypeMirror resolved = null;\n        // Check if this is an assignment. \n        if (scope.getKind() == Kind.ASSIGNMENT) {\n        \tpath = path.getParentPath();\n        \tif (path != null) {\n        \t\tscope = path.getLeaf();\n        \t}\n        } else if (scope.getKind() == Kind.MEMBER_SELECT) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.IDENTIFIER) {\n            path = path.getParentPath();\n            if (path != null) {\n                scope = path.getLeaf();\n                if (scope.getKind() == Kind.MEMBER_SELECT ||\n                        scope.getKind() == Kind.METHOD_INVOCATION) {\n                    path = path.getParentPath();\n                    if (path != null) {\n                        scope = path.getLeaf();\n                    }\n                }\n            }\n        } else if (scope.getKind() == Kind.ENHANCED_FOR_LOOP) {\n            EnhancedForLoopTree efl = (EnhancedForLoopTree) scope;\n            path = new TreePath(path, efl.getVariable());\n            scope = efl.getVariable();\n            resolved = org.netbeans.modules.java.hints.errors.Utilities.getIterableGenericType(info, new TreePath(path, efl.getExpression()));\n        }\n        if (scope.getKind() == Kind.VARIABLE) {\n            if (((VariableTree) scope).getInitializer() != null) {\n                resolved = info.getTrees().getTypeMirror(new TreePath(path, ((VariableTree) scope).getInitializer()));\n            }\n            expected = info.getTrees().getTypeMirror(path);\n        }\n        if (expected != null && resolved != null) {\n            if (resolved.getKind() == TypeKind.ERROR) {\n                resolved = info.getTrees().getOriginalType((ErrorType) resolved);\n            }\n            resolved = org.netbeans.modules.java.hints.errors.Utilities.resolveCapturedType(info, resolved);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e37f0>"": ""{\n    EnhancedForLoopTree efl = (EnhancedForLoopTree) scope;\n}""}",0,0,0,18,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/java.hints/src/org/netbeans/modules/java/hints/errors/ChangeType.java,computeType,79,25.0,48.0,exception_happened
22,22,2,False,"[(31, 52), (19, 30), (31, 51), (44, 52), (40, 51)]","[(14, 14), (26, 26)]","[[(4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (1, 1), (25, 25), (13, 13), (26, 26), (3, 3), (53, 53), (24, 24)], [(4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (13, 13), (3, 3), (53, 53)], [(46, 46), (45, 45), (35, 35), (39, 39), (44, 44), (32, 32), (47, 47), (34, 34), (31, 31), (33, 33)], [(14, 14), (15, 15)], [(4, 4), (0, 0), (13, 13), (2, 2), (6, 6), (53, 53)], [(4, 4), (0, 0), (45, 45), (35, 35), (39, 39), (32, 32), (47, 47), (53, 53), (33, 33)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaae50>"": ""{\n  PrintWriter mstr;\n  File mFile = outDir;\n  for (int i = 1; i < dirStackSize; i++) {\n    mFile = new File(mFile, dirStack[i][dirStackIndex[i]]);\n  }\n  String origFileName = dirStack[dirStackSize][dirStackIndex[dirStackSize]-1];\n  mFile = new File(mFile, origFileName);\n  try {\n    mstr = new PrintWriter(new FileWriter(mFile));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa490>"": ""{\n  File mFile = outDir;\n  for (int i = 1; i < dirStackSize; i++) {\n    mFile = new File(mFile, dirStack[i][dirStackIndex[i]]);\n  }\n  String origFileName = dirStack[dirStackSize][dirStackIndex[dirStackSize]-1];\n  mFile = new File(mFile, origFileName);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc0a0>"": ""String pname = \""\"";\nif (dirStackSize > 1) {\n  for (int i = 1; i < dirStackSize; i++) {\n    pname += \"".\"" + dirStack[i][dirStackIndex[i]];\n  }\n}\npname = \""\"";\nfor (int i = 1; i < dirStackSize; i++) {\n  pname += map(dirStack[i][dirStackIndex[i]]) + \"".\"";\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17e4c0>"": ""IOException e"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f2e0>"": ""String origFileName = dirStack[dirStackSize][dirStackIndex[dirStackSize]-1];\nString newFileName = map(origFileName.substring(0, origFileName.length() - 5)) + \"".java\"";"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b92d00>"": ""String origFileName = dirStack[dirStackSize][dirStackIndex[dirStackSize]-1];"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaad30>"": ""{\nboolean mustCreate = false;\nfor (int i = 1; i < dirStackSize; i++) {\n  mustCreate = mustCreate || !map(dirStack[i][dirStackIndex[i]]).equals(dirStack[i][dirStackIndex[i]]);\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa9d0>"": ""{\n  for (int i = 1; i < dirStackSize; i++) {\n  if (dirStackSize > 1) {\n    for (int i = 1; i < dirStackSize; i++) {\n    }\n  }\n  for (int i = 1; i < dirStackSize; i++) {\n  }\n}""}",6,0,1,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/javacc/javacc-5.0/src/javacc/examples/Obfuscator/Obfuscator.java,createMainClass,213,15.0,43.0,exception_happened
23,23,2,False,"[(86, 93), (58, 65), (47, 54)]","[(17, 17), (29, 29)]","[[(17, 17), (20, 20)], [(17, 17), (20, 20), (22, 22)], [(39, 39), (31, 31), (33, 33)], [(94, 94), (86, 86), (84, 84)], [(78, 78), (71, 71), (72, 72), (73, 73), (75, 75)], [(45, 45), (49, 49), (38, 38), (44, 44), (39, 39), (28, 28), (50, 50), (47, 47), (31, 31), (42, 42)], [(59, 59), (58, 58), (61, 61)], [(104, 104), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac051cc40>"": ""long timeoutMillis = timeout * timeoutUnitMultiplier;\nParallel applicationRun = newParallel(timeoutMillis);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051ce50>"": ""long timeoutMillis = timeout * timeoutUnitMultiplier;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c850>"": ""long timeoutMillis = timeout * timeoutUnitMultiplier;\nParallel applicationRun = newParallel(timeoutMillis);\nWorkerAnt worker = new WorkerAnt(applicationRun, null);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051ce80>"": ""Sequential testRun = new Sequential();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c490>"": ""{\n    TaskAdapter ta = new TaskAdapter(block);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf8738b0>"": ""{\n    long shutdownTimeMillis = shutdownTime * shutdownUnitMultiplier;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873370>"": ""{\n    try {\n        Parallel teardownRun = newParallel(timeoutMillis, teardown);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c370>"": ""long testRunTimeout = 0;\nif (block != null) {\n    testRunTimeout = block.calculateMaxWaitMillis();\n}\nif (tests != null) {\n    testRunTimeout += timeoutMillis;\n}\nif (reporting != null) {\n    testRunTimeout += timeoutMillis;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873b80>"": ""{\n    Parallel setupRun = newParallel(timeoutMillis, setup);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abfedf3d0>"": ""public void execute() throws BuildException {\n}""}",0,0,3,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/ant/ant-1.8.4/src/apache-ant-1.8.4/src/main/org/apache/tools/ant/taskdefs/optional/testing/Funtest.java,execute,395,13.0,53.0,exception_happened
24,24,2,False,"[(28, 60), (17, 27), (28, 38), (1, 16), (9, 16), (1, 8), (53, 60)]","[(9, 9)]","[[(17, 17), (28, 28)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab708b580>"": ""String nextIndent = indent + \""\t\"";"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e91c0>"": ""java.util.Iterator it = _DefaultValue.iterator();\njava.util.Iterator it = _KnownValue.iterator();""}",4,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/schema2beans/src/org/netbeans/modules/schema2beansdev/metadd/MetaProperty.java,writeNode,254,12.0,48.0,exception_happened
25,25,2,False,"[(52, 62), (69, 103), (73, 99)]",[],"[[(85, 85), (84, 84), (96, 96), (89, 89), (86, 86)], [(85, 85), (96, 96), (86, 86), (84, 84)], [(85, 85), (96, 96), (86, 86), (84, 84)], [(23, 23), (22, 22)], [(107, 107), (1, 1), (0, 0)], [(107, 107), (7, 7), (0, 0)], [(23, 23), (22, 22), (26, 26)], [(107, 107), (13, 13), (0, 0)], [(107, 107), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9e80>"": ""{\n        \t    IStructuredSelection s = (IStructuredSelection) event\n\t\t.getSelection();\nObject element = s.getFirstElement();\n        }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9c10>"": ""{\n\t    IStructuredSelection s = (IStructuredSelection) event\nlection();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a280>"": ""FilteredTree filterTree = new FilteredTree(composite, \n\t\tSWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER, filteredTreeFilter, true);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f24a90>"": ""{\n    Composite composite = new Composite(parent, SWT.NONE);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd9546a0>"": ""{\n    GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440aee0>"": ""FilteredTree filterTree = new FilteredTree(composite, \n  \t\t\tSWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER, filteredTreeFilter, true);\nfinal TreeViewer treeViewer = filterTree.getViewer();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd954520>"": ""{\n    boolean needsHint = DialogUtil.inRegularFontMode(parent);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f24fd0>"": ""{\n    GridLayout layout = new GridLayout();\n}""}",4,0,0,9,2,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/ui/internal/dialogs/NewWizardNewPage.java,createFilteredTree,275,8.0,47.0,exception_happened
26,26,2,False,"[(30, 56), (10, 29), (30, 42), (44, 56), (18, 25), (30, 36), (45, 50)]",[],"[[(6, 6), (59, 59), (39, 39), (0, 0)], [(4, 4), (0, 0), (1, 1), (13, 13), (19, 19), (59, 59), (31, 31)], [(8, 8), (7, 7), (0, 0), (52, 52), (44, 44), (59, 59)], [(0, 0), (1, 1), (13, 13), (39, 39), (2, 2), (6, 6), (59, 59), (42, 42)], [(59, 59), (1, 1), (13, 13), (0, 0)], [(4, 4), (5, 5), (31, 31), (0, 0), (1, 1), (36, 36), (45, 45), (13, 13), (35, 35), (19, 19), (32, 32), (3, 3), (18, 18), (40, 40), (59, 59), (22, 22), (33, 33)], [(59, 59), (44, 44), (7, 7), (0, 0)], [(59, 59), (3, 3), (18, 18), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9a00>"": ""{\n  FastVector\tvalues;\n  values = new FastVector();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9c10>"": ""{\n  Attribute \tatt;\n  Enumeration enm;\n  att = instanceInfo.attribute(m_AttIndex.getIndex());\n  enm = att.enumerateValues();\n  enm             = att.enumerateValues();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873460>"": ""{\n  FastVector\tatts;\n  Instances\tinstNew;\n  atts = new FastVector();\n  instNew = new Instances(instanceInfo.relationName(), atts, 0);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9a90>"": ""{\n  Attribute \tatt;\n  Attribute \tattNew;\n  FastVector\tvalues;\n  att = instanceInfo.attribute(m_AttIndex.getIndex());\n  values = new FastVector();\n  attNew = new Attribute(att.name(), values);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9cd0>"": ""{\n  Attribute \tatt;\n  att = instanceInfo.attribute(m_AttIndex.getIndex());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9700>"": ""{\n  Attribute \tatt;\n  Vector \tallLabels;\n  Enumeration enm;\n  int \ti;\n  att = instanceInfo.attribute(m_AttIndex.getIndex());\n  allLabels = new Vector();\n  enm = att.enumerateValues();\n  for (i = 0; i < m_Labels.size(); i++) {\n  enm             = att.enumerateValues();\n  i               = 0;\n  while (enm.hasMoreElements()) {\n    i++;\n  }\n  for (i = 0; i < allLabels.size(); i++)\n  for (i = 0; i < instanceInfo.numAttributes(); i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873550>"": ""{\n  FastVector\tatts;\n  atts = new FastVector();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9790>"": ""{\n  Vector \tallLabels;\n  allLabels = new Vector();\n}""}",6,2,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/weka/weka-3.7.9/src/src/main/java/weka/filters/unsupervised/attribute/AddValues.java,setInputFormat,231,11.0,46.0,exception_happened
27,27,2,False,"[(45, 50), (17, 22), (36, 41)]","[(45, 45), (54, 54), (26, 26)]","[[(4, 4), (3, 3), (2, 2), (59, 59), (60, 60)], [(4, 4), (0, 0), (61, 61), (1, 1), (3, 3), (2, 2), (59, 59), (60, 60)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7400>"": ""NumericEntry n1 = readNumericEntry(meta);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5878ac0>"": ""NumericEntry n = readNumericEntry(meta);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8310>"": ""while (fieldNumber != -1) {\n  byte type = meta.readByte();\n  if (type == DiskDocValuesFormat.NUMERIC) {\n  fieldNumber = meta.readVInt();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8fa0>"": ""{\n  int fieldNumber = meta.readVInt();\n  while (fieldNumber != -1) {\n    byte type = meta.readByte();\n    if (type == DiskDocValuesFormat.NUMERIC) {\n    fieldNumber = meta.readVInt();\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f75b0>"": ""NumericEntry n2 = readNumericEntry(meta);""}",0,1,0,14,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.java,readFields,83,27.0,47.0,exception_happened
28,28,2,False,"[(10, 15), (18, 24), (27, 33), (36, 43)]",[],"[[(1, 1), (53, 53), (0, 0)], [(2, 2), (53, 53), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5c10>"": ""{\n\tint index = periodBox.getSelectedIndex();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5220>"": ""{\n\tCalendar cal = Calendar.getInstance();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jmoney/jmoney-0.4.4/src/source/net/sf/jmoney/gui/IncomeExpenseReportPanel.java,updateFromAndTo,225,6.0,46.0,
29,29,2,False,"[(43, 66), (7, 18), (58, 65), (78, 85)]","[(43, 43), (58, 58), (35, 35), (74, 74), (77, 77), (11, 11)]","[[(62, 62), (46, 46), (61, 61), (45, 45), (58, 58), (63, 63), (44, 44), (64, 64), (48, 48), (66, 66), (59, 59), (47, 47), (60, 60), (49, 49)], [(12, 12), (11, 11)], [(92, 92), (0, 0)], [(78, 78), (87, 87), (81, 81), (80, 80), (82, 82), (77, 77), (79, 79)], [(46, 46), (45, 45), (44, 44), (48, 48), (66, 66), (47, 47), (49, 49)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab5878250>"": ""String s = fjsp.getAbsolutePath();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8e50>"": ""IOException ioe"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5880>"": ""{\n    String nextjsp = iter.next().toString();\n    File fjsp = new File(nextjsp);\n    if (!fjsp.isAbsolute()) {\n        fjsp = new File(uriRootF, nextjsp);\n    }\n    String s = fjsp.getAbsolutePath();\n    if (s.startsWith(uriRoot)) {\n        nextjsp = s.substring(uriRoot.length());\n    }\n    if (nextjsp.startsWith(\"".\"" + File.separatorChar)) {\n        nextjsp = nextjsp.substring(2);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d08b0>"": ""String firstJsp = pages.get( 0 );\nFile firstJspF = new File( firstJsp );"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc54c0>"": ""Iterator<String> iter = pages.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8370>"": ""JasperException je"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab70bdf70>"": ""public void execute() throws JasperException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab61f8fa0>"": ""{\n    Throwable rootCause = je;\n    while (rootCause instanceof JasperException\n            && ((JasperException) rootCause).getRootCause() != null) {\n        rootCause = ((JasperException) rootCause).getRootCause();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0bb0>"": ""String firstJsp = pages.get( 0 );"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a701c0>"": ""File uriRootF = new File(uriRoot);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5be0>"": ""{\n    String nextjsp = iter.next().toString();\n    File fjsp = new File(nextjsp);\n    if (!fjsp.isAbsolute()) {\n        fjsp = new File(uriRootF, nextjsp);\n    }\n}""}",0,2,1,16,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/tomcat/tomcat-7.0.2/src/apache-tomcat-7.0.2-src/java/org/apache/jasper/JspC.java,execute,1242,29.0,52.0,exception_happened
30,30,2,True,"[(30, 51), (21, 29), (52, 57), (30, 49)]",,,,0,0,1,8,2,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jrefactory/jrefactory-2.9.19/src/src/org/acm/seguin/pmd/cpd/GUI.java,go,204,13.0,50.0,exception_happened
31,31,1,False,[],[],"[[(61, 61), (70, 70), (29, 29), (57, 57), (66, 66), (2, 2), (53, 53), (94, 94), (25, 25), (90, 90), (21, 21), (86, 86), (49, 49), (17, 17), (45, 45), (13, 13), (82, 82), (41, 41), (5, 5), (78, 78), (87, 87), (9, 9), (0, 0), (65, 65), (74, 74), (37, 37), (33, 33)], [(94, 94), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad5172340>"": ""{\r\n    String desc;\n    desc = \""Sets the filename for the schema used as input.\"";\n    desc = \""Sets the input source for the schema used as input.\"";\n    desc = \""Sets the package name for generated code.\"";\n    desc = \""Sets the destination output directory.\"";\n    desc = \""Sets the destination output directory for resources.\"";\n    desc = \""Sets the line separator style for the desired platform.\"";\n    desc = \""Suppresses non fatal warnings, such as overwriting files.\"";\n    desc = \""Displays this help screen.\"";\n    desc = \""Prints out additional messages when creating source.\"";\n    desc = \""Causes source generation to fail on the first error encountered.\"";\n    desc = \""Disables the generation of the Class descriptors.\"";\n    desc = \""Indicates that a mapping file should be generated.\"";\n    desc = \""Sets the source generator types name (SGTypeFactory).\"";\n    desc = \""\"";\n    desc = \""Disables the generation of the methods specific to the XML marshaling framework.\"";\n    desc = \""Implements some specific methods to allow the generated classes\""\r\n            + \"" to be used with Castor Testing Framework.\"";\n    desc = \""Uses SAX 1 in the generated code.\"";\n    desc = \""Sets the Source Generator Binding File name.\"";\n    desc = \""Generates sources for imported XML schemas.\"";\n    desc = \""Sets enumerated types to use a case insensitive lookup.\"";\n    desc = \""Sets name conflict strategy to use (possible values are \"" \r\n        + \""'informViaLog', 'warnViaConsoleDialog').\"";\n    desc = \""Selects the JClass printer type (default 'standard')\"";\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172670>"": ""{\r\n    CommandLineOptions allOptions = new CommandLineOptions();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/castor/castor-1.3.1/src/castor-1.3.1/codegen/src/main/java/org/exolab/castor/builder/SourceGeneratorMain.java,setupCommandLineOptions,429,1.0,48.0,exception_happened
32,32,2,False,"[(30, 37), (44, 51), (16, 23)]",[],"[[(43, 43), (54, 54), (29, 29), (10, 10), (15, 15)], [(43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (48, 48), (34, 34), (7, 7), (54, 54), (32, 32), (18, 18), (55, 55), (15, 15), (59, 59), (5, 5), (0, 0), (46, 46), (1, 1), (10, 10), (19, 19), (6, 6), (47, 47), (24, 24)], [(0, 0), (1, 1), (55, 55), (2, 2), (59, 59)], [(1, 1), (58, 58), (55, 55), (57, 57), (56, 56)], [(43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (2, 2), (48, 48), (34, 34), (30, 30), (7, 7), (16, 16), (44, 44), (3, 3), (8, 8), (54, 54), (32, 32), (18, 18), (55, 55), (15, 15), (59, 59), (5, 5), (0, 0), (46, 46), (1, 1), (10, 10), (19, 19), (6, 6), (47, 47), (24, 24)], [(0, 0), (1, 1), (3, 3), (55, 55), (2, 2), (59, 59)], [(43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (48, 48), (34, 34), (7, 7), (54, 54), (32, 32), (18, 18), (55, 55), (15, 15), (59, 59), (5, 5), (0, 0), (46, 46), (1, 1), (10, 10), (19, 19), (6, 6), (47, 47), (24, 24)], [(14, 14), (54, 54), (10, 10), (28, 28), (11, 11), (42, 42)], [(43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (48, 48), (34, 34), (7, 7), (54, 54), (32, 32), (18, 18), (55, 55), (15, 15), (59, 59), (5, 5), (0, 0), (46, 46), (1, 1), (10, 10), (19, 19), (6, 6), (47, 47), (24, 24)], [(0, 0), (1, 1), (10, 10), (55, 55), (59, 59)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aced9fe50>"": ""{\n    for (int j = 0; j < 50000000; j++) {\n    for (int j = 0; j < 50000000; j++) {\n    for (int j = 0; j < 50000000; j++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98460>"": ""{\n    try {\n        String prop1 = \""java.class.path\"";\n        String prop2 = \""\"";\n        String tmp;\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98070>"": ""{\n    try {\n        Method method = HandleFactory.class.getMethod(\""dummy\"", new Class[] {String.class});\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2e80>"": ""try {\n} catch (Exception e) {\n    e.printStackTrace();\n    System.exit(1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d988b0>"": ""{\n    try {\n        Method method = HandleFactory.class.getMethod(\""dummy\"", new Class[] {String.class});\n        Handle handle = createHandle(null, method);\n        String prop1 = \""java.class.path\"";\n        String prop2 = \""\"";\n        String tmp;\n        Object result;\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < 50000000; j++) {\n                result = method.invoke(null, prop1);\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                result = dummy(prop1);\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                result = handle.invoke(null, prop1);\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98d00>"": ""{\n    try {\n        Method method = HandleFactory.class.getMethod(\""dummy\"", new Class[] {String.class});\n        Handle handle = createHandle(null, method);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98d30>"": ""{\n    try {\n        String prop1 = \""java.class.path\"";\n        String prop2 = \""\"";\n        String tmp;\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9ff70>"": ""{\n    long time;\n    time = System.currentTimeMillis();\n    time = System.currentTimeMillis();\n    time = System.currentTimeMillis();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98370>"": ""{\n    try {\n        String prop1 = \""java.class.path\"";\n        String prop2 = \""\"";\n        String tmp;\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n            for (int j = 0; j < 50000000; j++) {\n                tmp = prop1;\n                prop1 = prop2;\n                prop2 = tmp;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d989a0>"": ""{\n    try {\n        for (int i = 0; i < 10; i++) {\n    }\n}""}",8,0,1,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jruby/jruby-1.5.2/src/jruby-1.5.2/src/org/jruby/compiler/util/HandleFactory.java,main,273,9.0,45.0,exception_happened
33,33,2,False,"[(36, 57), (1, 32), (1, 29)]",[],"[[(56, 56), (43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (25, 25), (58, 58), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (32, 32), (18, 18), (55, 55), (41, 41), (50, 50), (51, 51), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(30, 30), (0, 0), (54, 54), (58, 58), (32, 32), (48, 48), (50, 50), (56, 56), (51, 51), (53, 53)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe659f70>"": ""{\n    int hash = 17;\n    hash = 37 * hash + (centeredHorizontallySeparated ? 0 : 1);\n    hash = 37 * hash + (centeredVerticallySeparated ? 0 : 1);\n    hash = 37 * hash + xSeparated;\n    hash = 37 * hash + ySeparated;\n    hash = 37 * hash + widthSeparated;\n    hash = 37 * hash + heightSeparated;\n    hash = 37 * hash + Float.floatToIntBits(relativeXSeparated);\n    hash = 37 * hash + Float.floatToIntBits(relativeYSeparated);\n    hash = 37 * hash + Float.floatToIntBits(relativeWidthSeparated);\n    hash = 37 * hash + Float.floatToIntBits(relativeHeightSeparated);\n    hash = 37 * hash + (centeredHorizontallyJoined ? 0 : 1);\n    hash = 37 * hash + (centeredVerticallyJoined ? 0 : 1);\n    hash = 37 * hash + xJoined;\n    hash = 37 * hash + yJoined;\n    hash = 37 * hash + widthJoined;\n    hash = 37 * hash + heightJoined;\n    hash = 37 * hash + Float.floatToIntBits(relativeXJoined);\n    hash = 37 * hash + Float.floatToIntBits(relativeYJoined);\n    hash = 37 * hash + Float.floatToIntBits(relativeWidthJoined);\n    hash = 37 * hash + Float.floatToIntBits(relativeHeightJoined);\n    hash = 37 * hash + maximizeIfWidthBelowJoined;\n    hash = 37 * hash + maximizeIfHeightBelowJoined;\n    hash = 37 * hash + mainWindowFrameStateJoined;\n    hash = 37 * hash + mainWindowFrameStateSeparated;\n    hash = 37 * hash + editorAreaState;\n    for (int i = 0; i < editorAreaConstraints.length; i++) {\n        hash = 37 * hash + editorAreaConstraints[i].hashCode();\n    }\n    if (editorAreaBounds != null) {\n        hash = 37 * hash + editorAreaBounds.hashCode();\n    }\n    if (editorAreaRelativeBounds != null) {\n        hash = 37 * hash + editorAreaRelativeBounds.hashCode();\n    }\n    hash = 37 * hash + editorAreaFrameState;\n    if (screenSize != null) {\n        hash = 37 * hash + screenSize.hashCode();\n    }\n    hash = 37 * hash + activeModeName.hashCode();\n    hash = 37 * hash + editorMaximizedModeName.hashCode();\n    hash = 37 * hash + viewMaximizedModeName.hashCode();\n    hash = 37 * hash + toolbarConfiguration.hashCode();\n    hash = 37 * hash + preferredToolbarIconSize;\n    for (int i = 0; i < modes.length; i++) {\n        hash = 37 * hash + modes[i].hashCode();\n    }\n    for (int i = 0; i < groups.length; i++) {\n        hash = 37 * hash + groups[i].hashCode();\n    }\n    for (int i = 0; i < tcIdViewList.length; i++) {\n        hash = 37 * hash + tcIdViewList[i].hashCode();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeceee370>"": ""{\n    for (int i = 0; i < editorAreaConstraints.length; i++) {\n    }\n    for (int i = 0; i < modes.length; i++) {\n    }\n    for (int i = 0; i < groups.length; i++) {\n    }\n    for (int i = 0; i < tcIdViewList.length; i++) {\n    }\n}""}",8,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/core.windows/src/org/netbeans/core/windows/persistence/WindowManagerConfig.java,hashCode,378,12.0,48.0,exception_happened
34,34,1,False,"[(54, 84), (68, 84), (40, 52), (58, 67), (43, 53), (75, 84)]","[(21, 21), (29, 29), (33, 33)]","[[(19, 19), (20, 20), (30, 30), (18, 18)], [(90, 90), (7, 7), (0, 0)], [(6, 6), (90, 90), (0, 0)], [(17, 17), (30, 30), (23, 23), (27, 27), (31, 31), (0, 0), (25, 25), (20, 20), (29, 29), (26, 26), (90, 90), (19, 19), (28, 28), (21, 21), (18, 18), (6, 6), (22, 22), (24, 24)], [(19, 19), (20, 20), (30, 30), (18, 18)], [(90, 90), (0, 0)], [(2, 2), (90, 90), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2910>"": ""{\n  File f = null;\n  try { f = doc.getFile(); }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2a30>"": ""FileMovedException fme"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecebb040>"": ""catch (IOException ioe) { fail(\""could not get canonical file\""); }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7430>"": ""{\n  final File file = tempFile();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7cd0>"": ""{\n  final OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440aaf0>"": ""{\n  final OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);\n  TestListener listener = new TestListener() {\n    public void fileSaved(OpenDefinitionsDocument doc) {\n      File f = null;\n      try { f = doc.getFile(); }\n      catch (FileMovedException fme) { \n          System.err.println(\""File \"" + f + \"" to be saved DOES NOT EXIST\"");\n        fail(\""file does not exist\""); // We know file should exist\n      }   \n      try {\n        assertEquals(\""saved file\"", file.getCanonicalFile(), f.getCanonicalFile());\n        synchronized(this) { saveCount++; }\n      }\n      catch (IOException ioe) { fail(\""could not get canonical file\""); }\n    }\n  };\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2520>"": ""final File backup = new File(file.getPath() + \""~\"");"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a3a0>"": ""public void testSaveAlreadySaved() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7df0>"": ""{\n  Boolean backupStatus = DrJava.getConfig().getSetting(BACKUP_FILES);\n}""}",0,0,2,0,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/drjava/drjava-stable-20100913-r5387/src/drjava-stable-20100913-r5387/src/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java,testSaveAlreadySaved,639,1.0,46.0,exception_happened
35,35,2,False,"[(33, 39), (27, 32)]","[(11, 11), (9, 9)]","[[(43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (32, 32), (18, 18), (41, 41), (50, 50), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (19, 19), (28, 28), (6, 6), (47, 47), (24, 24)], [(43, 43), (20, 20), (29, 29), (38, 38), (39, 39), (42, 42), (48, 48), (34, 34), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (21, 21), (31, 31), (22, 22), (40, 40), (49, 49), (17, 17), (27, 27), (36, 36), (45, 45), (32, 32), (18, 18), (41, 41), (50, 50), (23, 23), (46, 46), (24, 24), (19, 19), (28, 28), (37, 37), (47, 47), (33, 33)], [(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (9, 9), (52, 52), (1, 1), (2, 2), (6, 6), (53, 53)], [(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (9, 9), (52, 52), (1, 1), (2, 2), (6, 6), (53, 53)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac22c7610>"": ""{\r\n    DXFCodeValuePair cvp = null;\n    DXFGroupCode gc = null;\n    boolean doLoop = true;\n    while (doLoop) {\r\n        cvp = new DXFCodeValuePair();\n        try {\r\n            gc = cvp.read(br);\n        } catch (DXFParseException ex) {\r\n        } catch (EOFException e) {\r\n            doLoop = false;\n        }\n        switch (gc) {\r\n            case TYPE:\r\n                String type = cvp.getStringValue();\r\n                if (type.equals(ENDSEC)) {\r\n                    doLoop = false;\r\n                    break;\r\n                }\r\n                break;\r\n            case NAME:\r\n                String name = cvp.getStringValue();\r\n                if (name.equals(HEADER)) {\r\n                    _header = DXFHeader.read(br);\r\n                    if (_header._EXTMAX == null || _header._EXTMIN == null) {\r\n                        _header = new DXFHeader();\r\n                    }\r\n                    /* construct geometry factory */\r\n                    geometryFactory = new GeometryFactory(precisionModel, _header._SRID);\r\n                } else if (name.equals(TABLES)) {\r\n                    DXFTables at = DXFTables.readTables(br, this);\r\n                    theTables.add(at);\r\n                } else if (name.equals(BLOCKS)) {\r\n                    DXFBlocks ab = DXFBlocks.readBlocks(br, this);\r\n                    theBlocks.addAll(ab.theBlocks);\r\n                } else if (name.equals(ENTITIES)) {\r\n                    DXFEntities dxfes = DXFEntities.readEntities(br, this);\r\n                    theEntities.addAll(dxfes.theEntities);\r\n                // toevoegen aan layer doen we even niet, waarschijnlijk niet nodig\r\n                //if (o != null && o._refLayer != null) {\r\n                //    o._refLayer.theEnt.add(o);\r\n                //}\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3a60>"": ""switch (gc) {\r\n    case TYPE:\r\n        String type = cvp.getStringValue();\r\n        if (type.equals(ENDSEC)) {\r\n            doLoop = false;\r\n            break;\r\n        }\r\n        break;\r\n    case NAME:\r\n        String name = cvp.getStringValue();\r\n        if (name.equals(HEADER)) {\r\n            _header = DXFHeader.read(br);\r\n            if (_header._EXTMAX == null || _header._EXTMIN == null) {\r\n                _header = new DXFHeader();\r\n            }\r\n            /* construct geometry factory */\r\n            geometryFactory = new GeometryFactory(precisionModel, _header._SRID);\r\n        } else if (name.equals(TABLES)) {\r\n            DXFTables at = DXFTables.readTables(br, this);\r\n            theTables.add(at);\r\n        } else if (name.equals(BLOCKS)) {\r\n            DXFBlocks ab = DXFBlocks.readBlocks(br, this);\r\n            theBlocks.addAll(ab.theBlocks);\r\n        } else if (name.equals(ENTITIES)) {\r\n            DXFEntities dxfes = DXFEntities.readEntities(br, this);\r\n            theEntities.addAll(dxfes.theEntities);\r\n        // toevoegen aan layer doen we even niet, waarschijnlijk niet nodig\r\n        //if (o != null && o._refLayer != null) {\r\n        //    o._refLayer.theEnt.add(o);\r\n        //}\r\n        }\r\n        break;\r\n    default:\r\n        break;\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3280>"": ""{\r\n    DXFCodeValuePair cvp = null;\n    DXFGroupCode gc = null;\n    boolean doLoop = true;\n    while (doLoop) {\r\n        cvp = new DXFCodeValuePair();\n        try {\r\n            gc = cvp.read(br);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3340>"": ""{\r\n    DXFCodeValuePair cvp = null;\n    DXFGroupCode gc = null;\n    boolean doLoop = true;\n    while (doLoop) {\r\n        cvp = new DXFCodeValuePair();\n        try {\r\n            gc = cvp.read(br);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaab50>"": ""DXFParseException ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a39d0>"": ""EOFException e""}",0,1,1,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/unsupported/dxf/src/main/java/org/geotools/data/dxf/parser/DXFUnivers.java,readSection,86,14.0,41.0,exception_happened
36,36,2,False,"[(35, 60), (39, 46), (24, 31), (50, 57), (40, 46), (25, 31), (51, 57), (14, 20), (35, 60)]","[(6, 6), (7, 7)]","[[(4, 4), (9, 9), (35, 35), (44, 44), (18, 18), (6, 6), (34, 34), (60, 60)], [(4, 4), (9, 9), (29, 29), (35, 35), (55, 55), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa880>"": ""short c1, c2;\nint[] tempDate = new int[TOTAL_SIZE];\nif ( date1[utc]=='Z' ) {\r\n    c1 = compareOrder(date1, tempDate);\n}\nelse if ( date2[utc]=='Z' ) {\r\n    c1 = compareOrder(tempDate, date2);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab640>"": ""int[] timeZone = new int[2];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa670>"": ""int[] tempDate = new int[TOTAL_SIZE];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa7f0>"": ""short c1, c2;\nint[] tempDate = new int[TOTAL_SIZE];\nif ( date1[utc]=='Z' ) {\r\n    c2 = compareOrder(date1, tempDate);\nelse if ( date2[utc]=='Z' ) {\r\n    c2 = compareOrder(tempDate, date2);""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jena/jena-2.6.3/src/com/hp/hpl/jena/datatypes/xsd/AbstractDateTime.java,compareDates,146,8.0,44.0,exception_happened
37,37,2,False,[],[],"[[(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (8, 8), (17, 17), (27, 27), (36, 36), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe3e9a00>"": ""{\n    int aHandle ;\n    if (object instanceof ProjectKey ) {\n        aHandle = KEY_PROJECT_KEY;\n    } else if (object instanceof NamespaceDeclarationContainerKey) {\n        aHandle = KEY_NS_DECLARATION_CONTAINER_KEY;\n    }  else if (object instanceof NamespaceKey) {\n        aHandle = KEY_NAMESPACE_KEY;\n    } else if (object instanceof FileKey ) {\n        aHandle = KEY_FILE_KEY;\n    } else if (object instanceof MacroKey) {\n        aHandle = KEY_MACRO_KEY;\n    } else if (object instanceof IncludeKey) {\n        aHandle = KEY_INCLUDE_KEY;\n    } else if (object instanceof InheritanceKey) {\n        aHandle = KEY_INHERITANCE_KEY;\n    } else if (object instanceof ParamListKey) {\n        aHandle = KEY_PARAM_LIST_KEY;\n    } else if (object instanceof OffsetableDeclarationKey) {\n        aHandle = KEY_DECLARATION_KEY;\n    } else if (object instanceof ProjectSettingsValidatorKey) {\n        aHandle = KEY_PRJ_VALIDATOR_KEY;\n    } else if (object instanceof DeclarationContainerKey) {\n        aHandle = KEY_DECLARATION_CONTAINER_KEY;\n    } else if (object instanceof FileContainerKey) {\n        aHandle = KEY_FILE_CONTAINER_KEY;\n    } else if (object instanceof GraphContainerKey) {\n        aHandle = KEY_GRAPH_CONTAINER_KEY;\n    } else if (object instanceof ClassifierContainerKey) {\n        aHandle = KEY_CLASSIFIER_CONTAINER_KEY;\n    }\n}""}",0,0,0,14,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.modelimpl/src/org/netbeans/modules/cnd/modelimpl/repository/KeyObjectFactory.java,getHandler,123,16.0,46.0,exception_happened
38,38,1,False,"[(30, 52), (30, 43), (1, 8)]",[],"[[(4, 4), (5, 5), (0, 0), (1, 1), (63, 63), (3, 3), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0be0>"": ""{\nfinal TransactionContext transactionContext = new TransactionContextImpl( new TransactionEnvironmentImpl( serviceRegistry ) ) {\n\t@Override\n\tpublic ConnectionReleaseMode getConnectionReleaseMode() {\n\t\treturn ConnectionReleaseMode.AFTER_TRANSACTION;\n\t}\n};\n""}",0,0,1,0,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hibernate/hibernate-4.2.2/src/hibernate-release-4.2.2.Final/project/hibernate-core/src/test/java/org/hibernate/test/transaction/jdbc/TestExpectedUsage.java,testBasicUsage,71,2.0,41.0,exception_happened
39,39,2,False,"[(5, 19), (32, 37), (7, 12)]","[(27, 27), (45, 45), (54, 54), (26, 26), (21, 21), (18, 18), (50, 50), (42, 42)]","[[(73, 73), (28, 28), (29, 29)], [(8, 8), (76, 76), (5, 5), (7, 7), (0, 0), (9, 9), (13, 13), (6, 6)], [(45, 45), (47, 47)], [(76, 76), (27, 27), (0, 0), (72, 72), (54, 54), (28, 28), (18, 18), (2, 2), (59, 59)], [(50, 50), (52, 52)], [(8, 8), (76, 76), (7, 7), (0, 0), (13, 13), (6, 6)], [(29, 29), (39, 39), (28, 28), (32, 32), (73, 73), (31, 31), (33, 33)], [(29, 29), (39, 39), (28, 28), (32, 32), (73, 73), (31, 31)], [(59, 59), (54, 54)], [(76, 76), (3, 3), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae2869040>"": ""JagParser parser = new JagParser();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a880>"": ""TemplateStructureFactory textBlockTagFactory = new TemplateStructureFactory();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172940>"": ""{\r\n   File document = (File) iterator.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493160>"": ""{\r\n   SkeletDataObj skeletObj = null;\n   try {\r\n      SkeletLoader skeletLoader =\r\n            new XMLSkeletLoader(new File(JApplicationGen.getApplicationFile()));\n      skeletObj = skeletLoader.getSkeletData();\n   }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172220>"": ""Iterator iterator = documents.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96aa30>"": ""TemplateStructureFactory textBlockTagFactory = new TemplateStructureFactory();\nTemplateStructure templateData = textBlockTagFactory.getTemplateStructure();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74932b0>"": ""{\r\n   int totalNumberOfNewFiles = 0;\n   SessionContext sessionContext = new SessionContext();\n   Iterator iterator = documents.iterator();\n   while (iterator.hasNext()) {\r\n      PageContext pageContext = new PageContext(sessionContext);\n      FileCreationResult result = createOutputFiles(outputDir, pageContext.getTextCollection());\n      totalNumberOfNewFiles += result.created;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a2e0>"": ""TemplateHeaderFactory headerFactory = new TemplateHeaderFactory();\nTemplateHeaderCollection headers = headerFactory.getHeaderCollection();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96aaf0>"": ""PageContext pageContext = new PageContext(sessionContext);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae2869b20>"": ""SessionContext sessionContext = new SessionContext();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493b50>"": ""{\r\n   try {\r\n      SkeletLoader skeletLoader =\r\n            new XMLSkeletLoader(new File(JApplicationGen.getApplicationFile()));\n   }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96ad60>"": ""JagBlockCollection lnkJagBlockCollection = parser.getJagBlockCollection();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad51725b0>"": ""{\r\n   File document = (File) iterator.next();\n   try {\r\n      BufferedReader in = new BufferedReader(new FileReader(document));\n      CharBuffer input = new CharBuffer(in);\n   }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172dc0>"": ""{\r\n   File document = (File) iterator.next();\n   try {\r\n      BufferedReader in = new BufferedReader(new FileReader(document));\n   }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d05b0>"": ""PageContext pageContext = new PageContext(sessionContext);\nFileCreationResult result = createOutputFiles(outputDir, pageContext.getTextCollection());"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a640>"": ""TemplateHeaderFactory headerFactory = new TemplateHeaderFactory();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae2869730>"": ""TagEngine tagEngine = new TagEngine();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493fa0>"": ""{\r\n   String templateDir = JagGenerator.getTemplate().getTemplateDir().getAbsolutePath();\n}""}",0,1,2,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jag/jag-6.1/src/jag-6.1/src/com/finalist/jag/util/JAGTemplateEngine.java,process,66,11.0,47.0,exception_happened
40,40,2,False,"[(18, 23)]","[(18, 18)]","[[(20, 20), (21, 21), (18, 18)], [(17, 17), (12, 12), (11, 11), (13, 13)], [(1, 1), (29, 29), (0, 0)], [(17, 17), (12, 12), (11, 11)], [(20, 20), (18, 18), (22, 22)], [(20, 20), (18, 18)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe96ac10>"": ""ClassLoader loader = getClassLoader();\nClass classInternalAntRunner = loader.loadClass(\""org.eclipse.ant.internal.core.ant.InternalAntRunner\""); //$NON-NLS-1$\nObject runner = classInternalAntRunner.newInstance();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96aa30>"": ""ClassLoader loader = getClassLoader();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5bdb670>"": ""{\nString[] args = (String[]) argArray;\nString[] newArgs = new String[args.length + 1];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae2869700>"": ""{\n\tClassLoader originalClassLoader= Thread.currentThread().getContextClassLoader();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172700>"": ""{\n\tString[] args = (String[]) argArray;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a760>"": ""ClassLoader loader = getClassLoader();\nClass classInternalAntRunner = loader.loadClass(\""org.eclipse.ant.internal.core.ant.InternalAntRunner\""); //$NON-NLS-1$\nMethod run = classInternalAntRunner.getMethod(\""run\"", new Class[] { Object.class }); //$NON-NLS-1$"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a9a0>"": ""ClassLoader loader = getClassLoader();\nClass classInternalAntRunner = loader.loadClass(\""org.eclipse.ant.internal.core.ant.InternalAntRunner\""); //$NON-NLS-1$""}",0,0,1,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/ant/core/AntRunner.java,run,313,16.0,51.0,exception_happened
41,41,1,False,"[(9, 14), (16, 25), (15, 25), (27, 36), (26, 36), (38, 44), (37, 44), (15, 44)]",[],"[[(0, 0), (46, 46), (1, 1), (20, 20), (29, 29), (3, 3), (18, 18), (31, 31), (11, 11)], [(46, 46), (0, 0), (1, 1), (13, 13), (11, 11)], [(4, 4), (0, 0), (46, 46), (1, 1), (29, 29), (32, 32), (21, 21), (18, 18), (11, 11)], [(46, 46), (0, 0)], [(30, 30), (0, 0), (46, 46), (1, 1), (29, 29), (19, 19), (12, 12), (18, 18), (2, 2), (41, 41), (40, 40), (11, 11)], [(0, 0), (46, 46), (1, 1), (29, 29), (18, 18), (40, 40), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbeda00>"": ""{\nSession s = openSession();\nC1 c1 = new C1();\ns = openSession();\ns = openSession();\nc1 = (C1) s.createQuery(\""from C1\"").uniqueResult();\ns = openSession();\nc1 = (C1) s.get( A.class, c1.getId() );\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed400>"": ""{\nSession s = openSession();\ns = openSession();\nList list = s.createQuery( \""from B\"" ).list();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed8b0>"": ""{\nSession s = openSession();\nC2 c2 = new C2();\ns = openSession();\ns = openSession();\nc2 = (C2) s.createQuery(\""from C2\"").uniqueResult();\ns = openSession();\nc2 = (C2) s.get( A.class, c2.getId() );\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0730>"": ""public void testSharedColumn() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedbe0>"": ""{\n\tSession s = openSession();\n\tTransaction t = s.beginTransaction();\n\ts = openSession();\n\tt = s.beginTransaction();\n\ts = openSession();\n\tt = s.beginTransaction();\n\ts = openSession();\n\tt = s.beginTransaction();\n\ts = openSession();\n\tt = s.beginTransaction();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbeddf0>"": ""{\n\tSession s = openSession();\n\ts = openSession();\n\ts = openSession();\n\ts = openSession();\n\ts = openSession();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hibernate/hibernate-4.2.2/src/hibernate-release-4.2.2.Final/project/hibernate-core/src/test/java/org/hibernate/test/legacy/ABCProxyTest.java,testSharedColumn,71,1.0,43.0,exception_happened
42,42,2,False,[],[],"[[(0, 0), (1, 1), (58, 58), (81, 81), (3, 3), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8d60>"": ""{\n    int actChar;\n    while (true) {\n        actChar = input.read();\n    }\n}""}",0,1,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/html.editor/src/org/netbeans/modules/html/editor/xhtml/XhtmlElLexer.java,nextToken,93,17.0,49.0,exception_happened
43,43,2,False,"[(34, 55), (44, 55), (44, 53)]","[(5, 5), (9, 9), (45, 45), (25, 25), (29, 29), (44, 44), (40, 40), (37, 37), (31, 31)]","[[(52, 52), (51, 51), (49, 49), (48, 48)], [(45, 45), (53, 53), (46, 46)], [(17, 17), (23, 23), (16, 16), (24, 24), (19, 19), (18, 18), (15, 15)], [(37, 37), (34, 34), (36, 36), (35, 35)], [(19, 19), (18, 18), (24, 24)], [(45, 45), (47, 47), (53, 53), (46, 46)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9400>"": ""AntElementNode container= fAntModel.getNode(fOffset, false);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeceee040>"": ""String occurrencesIdentifier= node.getOccurrencesIdentifier();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeceee370>"": ""List nodes= new ArrayList(1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed040>"": ""List positions= new ArrayList(usages.size());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc9a0>"": ""{\nfor (int i = 0; i < offsets.size(); i++) {\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeceee970>"": ""List usages= new ArrayList();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc0a0>"": ""{\nAntElementNode currentNode= (AntElementNode)each.next();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae73438b0>"": ""AntElementNode node;\nif (container.isFromDeclaration(region)) {\n\tnode= container;\n} else {\n\tObject potentialNode= fEditor.findTarget(region);\n\tnode= (AntElementNode) potentialNode;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed4c0>"": ""String identifier;\ntry {\n\tidentifier= fDocument.get(region.getOffset(), region.getLength());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9cd0>"": ""IRegion region= XMLTextHover.getRegion(fEditor.getViewer(), fOffset);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed2b0>"": ""Iterator each= usages.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed760>"": ""int length= identifier.length();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343970>"": "" else {\n\tObject potentialNode= fEditor.findTarget(region);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedfa0>"": ""BadLocationException e"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc9d0>"": ""{\nAntElementNode currentNode= (AntElementNode)each.next();\nList offsets= currentNode.computeIdentifierOffsets(identifier);\n""}",4,0,1,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/ant/internal/ui/editor/OccurrencesFinder.java,perform,39,14.0,41.0,exception_happened
44,44,2,False,"[(16, 31), (16, 26), (5, 11)]","[(23, 23), (32, 32), (12, 12)]","[[(69, 69), (71, 71), (68, 68), (70, 70), (54, 54), (58, 58), (63, 63), (55, 55), (64, 64), (57, 57), (59, 59), (56, 56)], [(70, 70), (36, 36), (45, 45), (38, 38), (54, 54), (44, 44), (48, 48), (37, 37), (41, 41), (47, 47), (42, 42)], [(37, 37), (36, 36), (38, 38)], [(71, 71), (70, 70), (54, 54), (55, 55), (57, 57)], [(71, 71), (70, 70), (36, 36), (45, 45), (38, 38), (54, 54), (44, 44), (55, 55), (48, 48), (37, 37), (41, 41), (47, 47), (42, 42)], [(74, 74), (77, 77), (75, 75)], [(70, 70), (38, 38), (57, 57), (48, 48), (71, 71), (58, 58), (44, 44), (31, 31), (36, 36), (45, 45), (54, 54), (63, 63), (55, 55), (59, 59), (41, 41), (69, 69), (46, 46), (47, 47), (37, 37), (56, 56), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7a90>"": ""{\ncurrent = fSegments[i];\nint currentMatch;\nint k = current.indexOf(fSingleWildCard);\nif (k < 0) {\n\tcurrentMatch = textPosIn(text, tCurPos, end, current);\n} else {\n\tcurrentMatch = regExpPosIn(text, tCurPos, end, current);\n}\ntCurPos = currentMatch + current.length();\ni++;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440aac0>"": ""int i = 0;\nString current = fSegments[i];\nint segLength = current.length();\nif (!fHasLeadingStar) {\n\tif (!regExpRegionMatches(text, start, current, 0, segLength)) {\n\t} else {\n\t\t++i;\n\t}\n}\nwhile (i < segCount) {\n\ti++;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a4f0>"": ""int i = 0;\nString current = fSegments[i];\nint segLength = current.length();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecebbd00>"": ""int segCount = fSegments.length;"", ""<program_slicing.graph.statement.Statement object at 0x7f4aece50910>"": ""int tlen = text.length();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7520>"": ""{\ncurrent = fSegments[i];\nint k = current.indexOf(fSingleWildCard);\ni++;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440af70>"": ""int i = 0;\nString current = fSegments[i];\nint segLength = current.length();\nif (!fHasLeadingStar) {\n\tif (!regExpRegionMatches(text, start, current, 0, segLength)) {\n\t} else {\n\t\t++i;\n\t}\n}\nwhile (i < segCount) {\n\tcurrent = fSegments[i];\n\ti++;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440abb0>"": ""int bound = end - fBound;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae56ee9d0>"": ""{\nint clen = current.length();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a7f0>"": ""int tCurPos = start;\nint i = 0;\nString current = fSegments[i];\nint segLength = current.length();\nif (!fHasLeadingStar) {\n\tif (!regExpRegionMatches(text, start, current, 0, segLength)) {\n\t} else {\n\t\t++i;\n\t\ttCurPos = tCurPos + segLength;\n\t}\n}\nwhile (i < segCount) {\n\tcurrent = fSegments[i];\n\tint currentMatch;\n\tint k = current.indexOf(fSingleWildCard);\n\tif (k < 0) {\n\t\tcurrentMatch = textPosIn(text, tCurPos, end, current);\n\t}\n\ttCurPos = currentMatch + current.length();\n\ti++;\n}""}",0,1,0,16,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/equinox/internal/p2/ui/dialogs/ComboAutoCompleteField.java,match,265,24.0,52.0,exception_happened
45,45,2,False,"[(17, 40), (51, 58), (17, 29), (44, 49)]",[],"[[(46, 46), (45, 45), (44, 44), (48, 48), (47, 47), (49, 49)], [(20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (34, 34), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (8, 8), (17, 17), (27, 27), (36, 36), (32, 32), (18, 18), (41, 41), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae56eee80>"": ""Object node;\nif (tg == null) {\n    node = ROOT;\n} else {\n    node = debugger.getThreadGroup(tg);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9dc0>"": ""{\n    ThreadGroupReference tg;\n    if (e.getPropertyName() == ThreadsCache.PROP_THREAD_STARTED) {\n        ThreadReference t = (ThreadReference) e.getNewValue();\n        try {\n            tg = ThreadReferenceWrapper.threadGroup(t);\n        } catch (InternalExceptionWrapper ex) {\n            tg = null;\n        } catch (VMDisconnectedExceptionWrapper ex) {\n        } catch (ObjectCollectedExceptionWrapper ex) {\n        } catch (IllegalThreadStateExceptionWrapper ex) {\n            tg = null;\n        }\n    } else if (e.getPropertyName() == ThreadsCache.PROP_THREAD_DIED) {\n        ThreadReference t = (ThreadReference) e.getOldValue();\n        try {\n            tg = ThreadReferenceWrapper.threadGroup(t);\n        } catch (InternalExceptionWrapper ex) {\n            tg = null;\n        } catch (VMDisconnectedExceptionWrapper ex) {\n        } catch (ObjectCollectedExceptionWrapper ex) {\n            tg = null;\n        } catch (IllegalThreadStateExceptionWrapper ex) {\n            tg = null;\n        }\n    } else if (e.getPropertyName() == ThreadsCache.PROP_GROUP_ADDED) {\n        tg = (ThreadGroupReference) e.getNewValue();\n        try {\n            tg = ThreadGroupReferenceWrapper.parent(tg);\n        } catch (InternalExceptionWrapper ex) {\n            tg = null;\n        } catch (VMDisconnectedExceptionWrapper ex) {\n            tg = null;\n        } catch (ObjectCollectedExceptionWrapper ex) {\n            tg = null;\n        }\n    }\n}""}",0,0,3,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/debugger.jpda/src/org/netbeans/modules/debugger/jpda/models/ThreadsTreeModel.java,propertyChange,318,18.0,49.0,exception_happened
46,46,1,False,[],[],"[[(354, 354), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aca13de50>"": ""{\n    String source = \""http:///org/eclipse/emf/ecore/util/ExtendedMetaData\"";\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/ogc/net.opengis.wfsv/src/net/opengis/wfsv/impl/WfsvPackageImpl.java,createExtendedMetaDataAnnotations,816,1.0,49.0,exception_happened
47,47,2,False,"[(55, 60), (55, 60)]","[(37, 37)]","[[(17, 17), (29, 29)], [(17, 17), (16, 16), (19, 19), (21, 21), (18, 18), (22, 22)], [(54, 54), (49, 49), (46, 46)], [(51, 51), (49, 49)], [(39, 39), (28, 28), (29, 29)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd10fe50>"": ""JParameter jParameter : _params.values()\nJParameter jParameter : _params.values()"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10f250>"": ""boolean parameterAnnotations = false;\nfor (JParameter jParameter : _params.values()) {\r\n    if (jParameter.hasAnnotations()) {\r\n        parameterAnnotations = true;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6381eb0>"": ""String typeAndName = jParameter.toString();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529940>"": ""{\r\n    for (int i = 0; i < _exceptions.size(); i++) {\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529d90>"": ""i++\nJClass jClass = _exceptions.elementAt(i);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10f5b0>"": ""int parameterCount = 0;\nfor (JParameter jParameter : _params.values()) {\r\n    parameterCount++;""}",4,0,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/castor/castor-1.3.1/src/castor-1.3.1/codegen/src/main/java/org/exolab/javasource/JConstructor.java,print,223,14.0,47.0,exception_happened
48,48,1,False,"[(18, 33), (36, 50), (5, 17), (22, 33), (43, 50), (25, 33), (52, 58), (28, 33)]","[(36, 36), (18, 18)]","[[(19, 19), (18, 18)], [(59, 59), (0, 0)], [(59, 59), (1, 1), (2, 2), (0, 0)], [(59, 59), (1, 1), (0, 0)], [(8, 8), (17, 17), (9, 9), (0, 0), (10, 10), (59, 59)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe659610>"": ""URL url = new URL(PORTLET_APP_PATH + \""/WEB-INF/portlet.xml\"");\nInputStream is = url.openStream();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57e8040>"": ""URL url = new URL(PORTLET_APP_PATH + \""/WEB-INF/portlet.xml\"");"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc700>"": ""public void setUp() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf520>"": ""{\n  PortalContainer portalContainer = PortalContainer.getInstance();\n  SessionContainer scontainer = portalContainer.createSessionContainer(\""sessioncontainer\"", \""anon\"") ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bfb80>"": ""{\n  PortalContainer portalContainer = PortalContainer.getInstance();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7370>"": ""ExoWindowID windowID = new ExoWindowID();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9b80>"": ""{\n  User user = orgService_.findUserByName(\""exotest\"") ;\n  if(user == null) {\n  \tuser = orgService_.createUserInstance() ;\n  }\n}""}",0,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/exoportal/exoportal-v1.0.2/src/exo/services/portlet-container/impl/src/test/org/exoplatform/services/portletcontainer/imp/BaseTest.java,setUp,67,2.0,48.0,exception_happened
49,49,2,False,"[(47, 52), (40, 46), (73, 82)]",[],"[[(4, 4), (93, 93)], [(33, 33), (12, 12), (16, 16), (15, 15)], [(94, 94), (1, 1), (0, 0)], [(41, 41), (40, 40), (46, 46)], [(43, 43), (52, 52), (61, 61), (20, 20), (33, 33), (37, 37), (39, 39), (89, 89), (2, 2), (48, 48), (57, 57), (66, 66), (53, 53), (94, 94), (16, 16), (72, 72), (58, 58), (35, 35), (44, 44), (12, 12), (21, 21), (67, 67), (86, 86), (22, 22), (40, 40), (8, 8), (17, 17), (68, 68), (45, 45), (13, 13), (73, 73), (15, 15), (41, 41), (50, 50), (59, 59), (51, 51), (4, 4), (5, 5), (23, 23), (0, 0), (46, 46), (1, 1), (93, 93), (6, 6), (47, 47), (24, 24)], [(24, 24), (21, 21), (20, 20), (22, 22)], [(17, 17), (23, 23), (16, 16), (24, 24), (20, 20), (13, 13), (33, 33), (12, 12), (21, 21), (22, 22), (15, 15)], [(47, 47), (53, 53), (48, 48)], [(46, 46), (43, 43), (52, 52), (45, 45), (50, 50), (35, 35), (39, 39), (44, 44), (86, 86), (48, 48), (37, 37), (41, 41), (47, 47), (51, 51), (40, 40), (53, 53)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acf17e850>"": ""final Validator validator : validators) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae74f0>"": ""FieldValidator fValidator = null;\nif (validator instanceof FieldValidator) {\n    fValidator = (FieldValidator) validator;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a364f0>"": ""{\n    List<Validator> validators = getValidators(object.getClass(), context, method);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbb20>"": ""{\n    Collection<String> fieldErrors = validatorContext.getFieldErrors().get(fullFieldName);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9730>"": ""{\n    List<Validator> validators = getValidators(object.getClass(), context, method);\n    Set<String> shortcircuitedFields = null;\n    for (final Validator validator : validators) {\n    try {\n            validator.setValidatorContext(validatorContext);\n            if (LOG.isDebugEnabled()) {\n            FieldValidator fValidator = null;\n            String fullFieldName = null;\n            if (validator instanceof FieldValidator) {\n                fValidator = (FieldValidator) validator;\n                fullFieldName = new InternalValidatorContextWrapper(fValidator.getValidatorContext()).getFullFieldName(fValidator.getFieldName());\n                if (validatorContext instanceof VisitorFieldValidator.AppendingValidatorContext) {\n                    VisitorFieldValidator.AppendingValidatorContext appendingValidatorContext =\n                            (VisitorFieldValidator.AppendingValidatorContext) validatorContext;\n                    fullFieldName = appendingValidatorContext.getFullFieldNameFromParent(fValidator.getFieldName());\n                }\n            }\n            if (validator instanceof ShortCircuitableValidator && ((ShortCircuitableValidator) validator).isShortCircuit()) {\n                List<String> errs = null;\n                if (fValidator != null) {\n                    if (validatorContext.hasFieldErrors()) {\n                        Collection<String> fieldErrors = validatorContext.getFieldErrors().get(fullFieldName);\n                        if (fieldErrors != null) {\n                            errs = new ArrayList<String>(fieldErrors);\n                        }\n                    }\n                } else if (validatorContext.hasActionErrors()) {\n                    Collection<String> actionErrors = validatorContext.getActionErrors();\n                    if (actionErrors != null) {\n                        errs = new ArrayList<String>(actionErrors);\n                    }\n                }\n                if (fValidator != null) {\n                    if (validatorContext.hasFieldErrors()) {\n                        Collection<String> errCol = validatorContext.getFieldErrors().get(fullFieldName);\n                        if ((errCol != null) && !errCol.equals(errs)) {\n                            if (shortcircuitedFields == null) {\n                                shortcircuitedFields = new TreeSet<String>();\n                            }\n                    }\n                }\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7f40>"": ""{\n    VisitorFieldValidator.AppendingValidatorContext appendingValidatorContext =\n            (VisitorFieldValidator.AppendingValidatorContext) validatorContext;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7580>"": ""FieldValidator fValidator = null;\nString fullFieldName = null;\nif (validator instanceof FieldValidator) {\n    fValidator = (FieldValidator) validator;\n    fullFieldName = new InternalValidatorContextWrapper(fValidator.getValidatorContext()).getFullFieldName(fValidator.getFieldName());\n    if (validatorContext instanceof VisitorFieldValidator.AppendingValidatorContext) {\n        VisitorFieldValidator.AppendingValidatorContext appendingValidatorContext =\n                (VisitorFieldValidator.AppendingValidatorContext) validatorContext;\n        fullFieldName = appendingValidatorContext.getFullFieldNameFromParent(fValidator.getFieldName());\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbfa0>"": ""{\n    Collection<String> actionErrors = validatorContext.getActionErrors();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbdc0>"": ""{\n    List<String> errs = null;\n    if (fValidator != null) {\n        if (validatorContext.hasFieldErrors()) {\n            Collection<String> fieldErrors = validatorContext.getFieldErrors().get(fullFieldName);\n            if (fieldErrors != null) {\n                errs = new ArrayList<String>(fieldErrors);\n            }\n        }\n    } else if (validatorContext.hasActionErrors()) {\n        Collection<String> actionErrors = validatorContext.getActionErrors();\n        if (actionErrors != null) {\n            errs = new ArrayList<String>(actionErrors);\n        }\n    }\n}""}",1,0,1,19,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/struts/struts-2.2.1/src/struts-2.2.1/src/xwork-core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java,validate,110,25.0,53.0,exception_happened
50,50,2,False,"[(49, 55)]","[(6, 6), (30, 30), (5, 5), (22, 22)]","[[(23, 23), (36, 36), (24, 24)], [(46, 46), (58, 58), (44, 44)], [(41, 41), (12, 12), (11, 11), (13, 13)], [(38, 38), (21, 21), (20, 20)], [(55, 55), (56, 56), (49, 49), (48, 48)], [(10, 10), (42, 42), (9, 9)], [(23, 23), (36, 36), (26, 26)], [(39, 39), (19, 19), (18, 18)], [(45, 45), (58, 58), (44, 44)], [(45, 45), (58, 58), (44, 44), (55, 55), (48, 48), (47, 47)], [(23, 23), (25, 25), (36, 36), (24, 24)], [(41, 41), (12, 12), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd10f610>"": ""NameValuePair nvPair : values"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad2b3a610>"": ""{\r\n\tString argNames = nvPair.getValue().stringifyValue();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb850>"": "" else {\r\nString[] paramNames = new String[len];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35290a0>"": ""i++) {\r\nAnnotationAJ annotationX = axs[i];\nString typename = annotationX.getTypeName();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10fac0>"": ""{\r\nList<NameValuePair> values = a.getValues();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb6d0>"": ""i++) {\r\nLocalVariable lv = varTable.getLocalVariable(index);\nindex += paramTypes[i].getSize();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35292e0>"": ""{\r\nAnnotationAJ[] axs = getAnnotations();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad2b3a910>"": ""{\r\nList<String> argsList = new ArrayList<String>();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35293d0>"": ""int len = getArity();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f130>"": ""{\r\nAnnotationGen a = ((BcelAnnotation) annotationX).getBcelAnnotation();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeceee340>"": "" else {\r\nUnresolvedType[] paramTypes = getParameterTypes();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb370>"": "" else {\r\nUnresolvedType[] paramTypes = getParameterTypes();\nint index = Modifier.isStatic(modifiers) ? 0 : 1;\nfor (int i = 0; i < len; i++) {\r\n\tindex += paramTypes[i].getSize();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad2b3a790>"": ""{\r\nString argNames = nvPair.getValue().stringifyValue();\nStringTokenizer argNameTokenizer = new StringTokenizer(argNames, \"" ,\"");\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde9a0>"": ""int requiredCount = getParameterTypes().length;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35295b0>"": ""LocalVariableTable varTable = method.getLocalVariableTable();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35299d0>"": ""i++) {\r\nAnnotationAJ annotationX = axs[i];\n""}",5,2,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/weaver/bcel/BcelMethod.java,determineParameterNames,120,18.0,43.0,exception_happened
51,51,1,False,"[(12, 40), (20, 40), (41, 58), (30, 37), (51, 58)]",[],"[[(59, 59), (30, 30), (0, 0), (1, 1), (20, 20), (12, 12), (41, 41), (51, 51)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd9547f0>"": ""{\n    java.awt.GridBagConstraints gridBagConstraints;\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints = new java.awt.GridBagConstraints();\n}""}",0,0,0,0,2,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/j2ee.sun.ddui/src/org/netbeans/modules/j2ee/sun/share/configbean/customizers/SecurityEditPrincipalPanel.java,initComponents,120,1.0,44.0,exception_happened
52,52,2,False,"[(71, 82), (50, 55)]","[(69, 69), (71, 71), (25, 25), (101, 101), (35, 35), (67, 67), (31, 31), (88, 88)]","[[(69, 69), (91, 91), (71, 71), (90, 90), (75, 75)], [(17, 17), (14, 14), (16, 16), (18, 18), (15, 15)], [(69, 69), (71, 71), (75, 75)], [(36, 36), (38, 38), (35, 35), (41, 41), (59, 59)], [(56, 56), (54, 54), (42, 42)], [(2, 2), (113, 113), (0, 0)], [(94, 94), (109, 109), (93, 93)], [(43, 43), (45, 45), (41, 41), (56, 56), (42, 42)], [(41, 41), (56, 56), (43, 43), (42, 42)], [(43, 43), (47, 47), (41, 41), (56, 56), (42, 42)], [(90, 90), (69, 69), (71, 71), (75, 75)], [(46, 46), (43, 43), (41, 41), (56, 56), (42, 42)], [(17, 17), (14, 14), (16, 16), (33, 33), (18, 18), (15, 15)], [(46, 46), (43, 43), (45, 45), (50, 50), (41, 41), (56, 56), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd398820>"": ""ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();\nMap<String, Serializable> params = new HashMap<String, Serializable>();\nShapefileDataStore newDataStore = (ShapefileDataStore) dataStoreFactory.createNewDataStore(params);\nString typeName = newDataStore.getTypeNames()[0];\nSimpleFeatureSource featureSource = newDataStore.getFeatureSource(typeName);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35290d0>"": ""final SimpleFeatureType TYPE = DataUtilities.createType(\n        \""Location\"",                   // <- the name for our feature type\n        \""location:Point:srid=4326,\"" + // <- the geometry attribute: Point type\n        \""name:String\""         // <- a String attribute\n);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd398100>"": ""ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();\nMap<String, Serializable> params = new HashMap<String, Serializable>();\nShapefileDataStore newDataStore = (ShapefileDataStore) dataStoreFactory.createNewDataStore(params);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd954970>"": ""BufferedReader reader = new BufferedReader(new FileReader(file));\ntry {\n    String line = reader.readLine();\n    for (line = reader.readLine(); line != null; line = reader.readLine()) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a220>"": ""{ // skip blank lines\n    SimpleFeature feature = featureBuilder.buildFeature(null);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529ac0>"": ""{\n    File file = JFileDataStoreChooser.showOpenFile(\""csv\"", null);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529b80>"": ""GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory(null);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a3a0>"": ""File newFile = getNewShapeFile(file);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd398490>"": ""{\n\tSimpleFeatureStore featureStore = (SimpleFeatureStore) featureSource;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a34c0>"": ""line = reader.readLine()\nif (line.trim().length() > 0) { // skip blank lines\n    String tokens[] = line.split(\""\\\\,\"");\n    double longitude = Double.parseDouble(tokens[0]);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3d00>"": ""line = reader.readLine()\nif (line.trim().length() > 0) { // skip blank lines\n    String tokens[] = line.split(\""\\\\,\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529520>"": ""BufferedReader reader = new BufferedReader(new FileReader(file));"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3520>"": ""line = reader.readLine()\nif (line.trim().length() > 0) { // skip blank lines\n    String tokens[] = line.split(\""\\\\,\"");\n    String name = tokens[2].trim();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6ad30>"": ""Map<String, Serializable> params = new HashMap<String, Serializable>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a550>"": ""ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd3985b0>"": ""Transaction transaction = new DefaultTransaction(\""create\"");"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd398610>"": ""ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();\nMap<String, Serializable> params = new HashMap<String, Serializable>();\nShapefileDataStore newDataStore = (ShapefileDataStore) dataStoreFactory.createNewDataStore(params);\nString typeName = newDataStore.getTypeNames()[0];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3670>"": ""line = reader.readLine()\nif (line.trim().length() > 0) { // skip blank lines\n    String tokens[] = line.split(\""\\\\,\"");\n    double latitude = Double.parseDouble(tokens[1]);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35296a0>"": ""final SimpleFeatureType TYPE = DataUtilities.createType(\n        \""Location\"",                   // <- the name for our feature type\n        \""location:Point:srid=4326,\"" + // <- the geometry attribute: Point type\n        \""name:String\""         // <- a String attribute\n);\nSimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(TYPE);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b92eb0>"": ""Exception problem"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529730>"": ""SimpleFeatureCollection collection = FeatureCollections.newCollection();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3fa0>"": ""line = reader.readLine()\nif (line.trim().length() > 0) { // skip blank lines\n    String tokens[] = line.split(\""\\\\,\"");\n    double longitude = Double.parseDouble(tokens[0]);\n    double latitude = Double.parseDouble(tokens[1]);\n    Point point = geometryFactory.createPoint(new Coordinate(longitude, latitude));\n}""}",2,0,2,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/demo/example/src/main/java/org/geotools/demo/Csv2Shape.java,main,54,6.0,50.0,exception_happened
53,53,2,False,"[(46, 53)]",[],[],{},0,0,1,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/derby/derby-10.6.1.0/src/db-derby-10.6.1.0-src/java/client/org/apache/derby/client/am/Cursor.java,getString,1023,25.0,51.0,exception_happened
54,54,2,False,"[(28, 35)]","[(12, 12), (16, 16), (13, 13)]","[[(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (9, 9), (1, 1), (10, 10), (48, 48)], [(28, 28), (36, 36), (29, 29)], [(4, 4), (5, 5), (0, 0), (1, 1), (48, 48)], [(30, 30), (27, 27), (36, 36), (25, 25), (29, 29), (38, 38), (26, 26), (35, 35), (28, 28), (32, 32), (39, 39), (42, 42), (40, 40), (37, 37), (41, 41), (34, 34), (31, 31), (33, 33)], [(4, 4), (8, 8), (5, 5), (0, 0), (9, 9), (1, 1), (48, 48)], [(48, 48), (1, 1), (0, 0)], [(4, 4), (1, 1), (48, 48), (0, 0)], [(17, 17), (16, 16), (45, 45), (13, 13), (19, 19), (21, 21), (18, 18), (22, 22), (15, 15)], [(37, 37), (36, 36), (42, 42)], [(45, 45), (14, 14), (13, 13)], [(4, 4), (8, 8), (5, 5), (0, 0), (1, 1), (48, 48)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7a00>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n    java.util.List<Point> controlPoints = connectionWidget.getControlPoints ();\n    boolean empty = controlPoints == null  ||  controlPoints.size () <= 0;\n    double totalDistance = 0.0;\n    double[] distances = new double[empty ? 0 : controlPoints.size () - 1];\n    for (int i = 0; i < distances.length; i ++)\n        distances[i] = totalDistance += GeomUtil.distanceSq (controlPoints.get (i), controlPoints.get (i + 1));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abedc0>"": ""{\n    float percentage = placement.placementInPercentage;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13dc40>"": ""Widget childWidget : entry.getValue()"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7850>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n    java.util.List<Point> controlPoints = connectionWidget.getControlPoints ();\n    boolean empty = controlPoints == null  ||  controlPoints.size () <= 0;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cce50>"": ""ArrayList<Widget> childrenToResolve = new ArrayList<Widget> (widget.getChildren());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe250>"": ""Point point;\nif (empty) {\n    point = new Point();\n} else if (placement.isPercentage) {\n    float percentage = placement.placementInPercentage;\n    if (percentage <= 0.0)\n        point = connectionWidget.getFirstControlPoint ();\n    else if (percentage >= 1.0)\n        point = connectionWidget.getLastControlPoint ();\n    else\n        point = getLinePointAtPercentage (distances, (int) (percentage * totalDistance), controlPoints);\n} else {\n    int distance = placement.placementAtDistance;\n    if (distance < 0)\n        point = getLinePointAtPercentage (distances, distance + (int) totalDistance, controlPoints);\n    else\n        point = getLinePointAtPercentage (distances, distance, controlPoints);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae77c0>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n    java.util.List<Point> controlPoints = connectionWidget.getControlPoints ();\n    boolean empty = controlPoints == null  ||  controlPoints.size () <= 0;\n    double[] distances = new double[empty ? 0 : controlPoints.size () - 1];\n    for (int i = 0; i < distances.length; i ++)\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae70a0>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7d00>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n    java.util.List<Point> controlPoints = connectionWidget.getControlPoints ();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13df10>"": ""{\n    ArrayList<Widget> currentlyResolving = null;\n    for (Widget childWidget : entry.getValue()) {\n        if (childWidget.getParentWidget() == widget  &&  childWidget.isVisible()) {\n            if (currentlyResolving == null)\n                currentlyResolving = new ArrayList<Widget>();\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a160>"": "" else {\n   int distance = placement.placementAtDistance;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13dfa0>"": ""{\n    Placement placement = entry.getKey ();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc5b0>"": ""Map.Entry<Placement,ArrayList<Widget>> entry : reverse.entrySet()"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7dc0>"": ""{\n    ConnectionWidget connectionWidget = (ConnectionWidget) widget;\n    java.util.List<Point> controlPoints = connectionWidget.getControlPoints ();\n    boolean empty = controlPoints == null  ||  controlPoints.size () <= 0;\n    double[] distances = new double[empty ? 0 : controlPoints.size () - 1];\n}""}",4,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/api.visual/src/org/netbeans/modules/visual/layout/ConnectionWidgetLayout.java,layout,109,15.0,45.0,exception_happened
55,55,2,False,"[(99, 111), (120, 129), (99, 107), (57, 68), (27, 39), (57, 64), (27, 35)]",[],"[[(1, 1), (130, 130), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac7a70fd0>"": ""{\n    final GridCoverageFactory factory = CoverageFactoryFinder.getGridCoverageFactory(null);\n}""}",4,0,1,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/library/coverage/src/test/java/org/geotools/coverage/grid/GridCoverageTestBase.java,load,212,11.0,54.0,exception_happened
56,56,2,False,"[(11, 31)]","[(8, 8)]","[[(14, 14), (16, 16), (13, 13), (18, 18), (15, 15)], [(14, 14), (16, 16), (13, 13), (18, 18), (15, 15)], [(14, 14), (27, 27), (16, 16), (24, 24), (20, 20), (13, 13), (26, 26), (19, 19), (28, 28), (18, 18), (31, 31), (15, 15)], [(5, 5), (0, 0), (43, 43), (10, 10), (31, 31), (11, 11)], [(20, 20), (38, 38), (39, 39), (34, 34), (30, 30), (16, 16), (26, 26), (35, 35), (31, 31), (8, 8), (27, 27), (36, 36), (13, 13), (18, 18), (15, 15), (14, 14), (9, 9), (10, 10), (19, 19), (28, 28), (24, 24)], [(39, 39), (34, 34), (31, 31)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0610>"": ""final int shift,radix;\nint j ;\nif ( (source[1] == 'x') || (source[1] == 'X') )\r\n{\tshift = 4 ; j = 2; radix = 16;}\r\n{\tshift = 3 ; j = 1; radix = 8;}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0c40>"": ""final int shift,radix;\nint j ;\nif ( (source[1] == 'x') || (source[1] == 'X') )\r\n{\tshift = 4 ; j = 2; radix = 16;}\r\n{\tshift = 3 ; j = 1; radix = 8;}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4e250>"": ""int length = source.length;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae29d0880>"": ""final int shift,radix;\nint j ;\nif ( (source[1] == 'x') || (source[1] == 'X') )\r\n{\tshift = 4 ; j = 2; radix = 16;}\r\n{\tshift = 3 ; j = 1; radix = 8;}\nwhile (source[j]=='0') \r\n{\tj++; //jump over redondant zero\r\n\t\treturn ;}}\nwhile (j<length)\r\n{\tint digitValue ;\r\n\tif ((digitValue = ScannerHelper.digit(source[j++],radix))\t< 0 )\n\tif (computedValue > MAX) return /*constant stays null*/ ;}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4ed00>"": ""{\r\nlong MAX = Integer.MAX_VALUE;\nif (source[0] == '0')\r\n{\tMAX = 0xFFFFFFFFL ; //a long in order to be positive ! \t\r\n\t\tif (computedValue > MAX) return /*constant stays null*/ ;}}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4ef10>"": ""int length = source.length;\nlong computedValue = 0L;\nif (source[0] == '0')\r\n\tfinal int shift,radix;\n\tint j ;\n\tif ( (source[1] == 'x') || (source[1] == 'X') )\r\n\t{\tshift = 4 ; j = 2; radix = 16;}\r\n\t{\tshift = 3 ; j = 1; radix = 8;}\n\twhile (source[j]=='0') \r\n\t{\tj++; //jump over redondant zero\r\n\t\t\treturn ;}}\n\twhile (j<length)\r\n\t{\tint digitValue ;\r\n\t\tif ((digitValue = ScannerHelper.digit(source[j++],radix))\t< 0 )\n\t\tcomputedValue = (computedValue<<shift) | digitValue ;\n\t\tif (computedValue > MAX) return /*constant stays null*/ ;}}\r\n\tfor (int i = 0 ; i < length;i++)\r\n\t{\tint digitValue ;\r\n\t\tif ((digitValue = ScannerHelper.digit(source[i],10))\t< 0 )\n\t\tcomputedValue = 10*computedValue + digitValue;\n\t\tif (computedValue > MAX) return /*constant stays null*/ ; }}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab708bbb0>"": ""\r\nfor (int i = 0 ; i < length;i++)\r\n\tif (computedValue > MAX) return /*constant stays null*/ ; }}""}",2,2,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java,computeConstant,45,14.0,45.0,exception_happened
57,57,2,False,"[(49, 62), (30, 48), (31, 48), (31, 39), (40, 48)]","[(14, 14), (7, 7), (9, 9), (35, 35), (22, 22), (40, 40), (50, 50), (49, 49)]","[[(63, 63), (0, 0)], [(52, 52), (54, 54), (57, 57), (59, 59), (56, 56), (51, 51)], [(23, 23), (27, 27), (25, 25), (29, 29), (26, 26), (28, 28), (22, 22), (24, 24)], [(26, 26), (24, 24)], [(23, 23), (22, 22)], [(1, 1), (63, 63), (0, 0)], [(17, 17), (14, 14), (16, 16), (20, 20), (19, 19)], [(41, 41), (40, 40), (48, 48)], [(59, 59), (50, 50), (51, 51)], [(59, 59), (52, 52), (54, 54), (51, 51)], [(59, 59), (52, 52), (51, 51), (53, 53)], [(59, 59), (56, 56), (51, 51)], [(63, 63), (0, 0)], [(10, 10), (12, 12), (11, 11)], [(17, 17), (14, 14), (20, 20), (18, 18), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe96a820>"": ""PdfAppearance getListAppearance() throws IOException, DocumentException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4e820>"": ""++idx, yp -= leading) {\n    String ptext = choices[idx];\n    ptext = removeCRLF(ptext);\n    BaseColor textCol = choiceSelections.contains( new Integer( idx )) ? GrayColor.GRAYWHITE : fcolor;\n    Phrase phrase = composePhrase(ptext, ufont, textCol, usize);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40d040>"": ""int topChoice = getTopChoice();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96e880>"": ""float leading = ufont.getFontDescriptor(BaseFont.BBOXURY, usize) - ufont.getFontDescriptor(BaseFont.BBOXLLY, usize);\nint maxFit = (int)(h / leading) + 1;\nint first = 0;\nint last = 0;\nfirst = topChoice;\nlast = first + maxFit;\nif (last > choices.length)\n    last = choices.length;"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96e940>"": ""int first = 0;\nfirst = topChoice;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a361f0>"": ""float leading = ufont.getFontDescriptor(BaseFont.BBOXURY, usize) - ufont.getFontDescriptor(BaseFont.BBOXLLY, usize);\nint maxFit = (int)(h / leading) + 1;"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed250>"": ""float leading = ufont.getFontDescriptor(BaseFont.BBOXURY, usize) - ufont.getFontDescriptor(BaseFont.BBOXLLY, usize);"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a280>"": ""{\n    PdfAppearance app = getBorderAppearance();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedac0>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;\nfloat offsetX = borderWidth;\nif (borderExtra) {\n    offsetX *= 2;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdf02e0>"": ""++curVal) {\nint curChoice = (choiceSelections.get( curVal )).intValue();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4eb80>"": ""float yp = offsetX + h - ufont.getFontDescriptor(BaseFont.BBOXURY, usize);\nfor (int idx = first; idx < last; ++idx, yp -= leading) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6c6bb80>"": ""float xp = offsetX * 2;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4ec10>"": ""++idx, yp -= leading) {\n    String ptext = choices[idx];\n    ptext = removeCRLF(ptext);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4e430>"": ""++idx, yp -= leading) {\n    String ptext = choices[idx];\n    int rtl = checkRTL(ptext) ? PdfWriter.RUN_DIRECTION_LTR : PdfWriter.RUN_DIRECTION_NO_BIDI;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedc70>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdf0c70>"": ""BaseColor fcolor = textColor == null ? GrayColor.GRAYBLACK : textColor;"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdf05e0>"": ""for (int curVal = 0; curVal < choiceSelections.size(); ++curVal) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8a4e670>"": ""++idx, yp -= leading) {\n    BaseColor textCol = choiceSelections.contains( new Integer( idx )) ? GrayColor.GRAYWHITE : fcolor;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96af10>"": ""PdfAppearance getListAppearance() throws IOException, DocumentException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedf40>"": ""float usize = fontSize;\nif (usize == 0)\n    usize = 12;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6c6bf70>"": ""float yp = offsetX + h - ufont.getFontDescriptor(BaseFont.BBOXURY, usize);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed790>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;\nfloat h = box.getHeight() - borderWidth * 2;\nif (borderExtra) {\n    h -= borderWidth * 2;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96afd0>"": ""BaseFont ufont = getRealFont();""}",4,0,0,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/itext/itext-5.0.3/src/src/core/com/itextpdf/text/pdf/TextField.java,getListAppearance,322,13.0,48.0,exception_happened
58,58,2,False,"[(32, 51), (42, 51), (46, 51), (23, 29), (11, 16)]","[(8, 8), (32, 32)]","[[(32, 32), (36, 36)], [(36, 36), (20, 20), (38, 38), (19, 19), (32, 32), (21, 21), (37, 37), (41, 41), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac57e86a0>"": ""StringBuffer sb = new StringBuffer (Server.BASE_PATH);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57e8eb0>"": ""StringBuffer sb = new StringBuffer (Server.BASE_PATH);\nFile f = new File (sb.toString());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf7c0>"": ""boolean moderated = moderatedGroups.contains(groupname.trim().toLowerCase());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6c6b040>"": ""Group g = getGroup(groupname);\nif (opener != null)\r\n    g = new Group (checkGproupname(groupname), topic, opener.getName());\r\nelse g = new Group (checkGproupname(groupname), topic, rUser.getName());\n   StringBuffer sb = new StringBuffer (Server.BASE_PATH);\n   File f = new File (sb.toString());\n   if (f.exists()) {\r\n       g = checkProperties (f, g, rUser);\n   }""}",0,0,0,14,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/freecs/freecs-1.3.20100406/src/freecs-1.3.20100406/src/freecs/core/GroupManager.java,openGroup,138,22.0,43.0,exception_happened
59,59,2,False,"[(65, 83), (73, 83), (47, 57), (65, 72), (46, 58), (59, 85), (39, 45)]","[(29, 29), (77, 77)]","[[(59, 59), (85, 85), (63, 63), (62, 62)], [(85, 85), (69, 69), (71, 71), (68, 68), (72, 72), (70, 70), (65, 65), (67, 67), (66, 66), (59, 59)], [(28, 28), (27, 27), (25, 25), (26, 26)], [(57, 57), (52, 52), (48, 48), (50, 50), (47, 47), (51, 51), (49, 49), (53, 53)], [(1, 1), (88, 88), (0, 0)], [(74, 74), (83, 83), (73, 73)], [(8, 8), (17, 17), (14, 14), (7, 7), (9, 9), (20, 20), (13, 13), (10, 10), (3, 3), (12, 12), (6, 6), (11, 11), (15, 15)], [(76, 76), (82, 82), (75, 75)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abef46610>"": ""{\n    PropertyEditor newPrEd = newValue instanceof FormProperty.ValueWithEditor ?\n        ((FormProperty.ValueWithEditor)newValue).getPropertyEditor() : null;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc640>"": ""Exception ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef468e0>"": ""{\n    ResourceValue resValue = searchDroppedResourceValue(property, value);\n    if (resValue == null) {\n        resValue = resourceService.create(getDefaultKey0(property, AUTO_RESOURCING),\n                                          property.getValueType(),\n                                          value,\n                                          getStringValue(property, value),\n                                          getSourceFile());\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dcd00>"": ""Object prevValue;\ntry {\n    prevValue = property.getValue();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8d00>"": ""{\n    I18nValue i18nValue = searchDroppedI18nValue(property, value.toString());\n    if (i18nValue == null) {\n        i18nValue = i18nService.create(getDefaultKey0(property, AUTO_I18N),\n                                       value.toString(),\n                                       getSrcDataObject());\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb08520>"": ""{\n    Object value = FormProperty.getEnclosedValue(newValue);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeb429700>"": ""{\n    PropertyEditor propEd = property.getPropertyEditor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeb429730>"": ""PropertyEditor newPropEd : formPropEd.getAllEditors()"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13db80>"": ""{\n    ExternalValue eValue = (ExternalValue) value;\n    if (eValue.getKey() == ExternalValue.COMPUTE_AUTO_KEY) {\n        if (value instanceof I18nValue && getI18nService() != null) {\n            String key = getDefaultKey0(property, AUTO_I18N);\n            eValue = i18nService.changeKey((I18nValue)value, key);\n        }\n        else if (value instanceof ResourceValue && getResourceService() != null) {\n            String key = getDefaultKey0(property, AUTO_RESOURCING);\n            eValue = resourceService.changeKey((ResourceValue)value, key);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeb4291c0>"": ""{\n    FormPropertyEditor formPropEd = (FormPropertyEditor)propEd;\n}""}",1,0,1,17,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/form/src/org/netbeans/modules/form/ResourceSupport.java,makeResource0,224,28.0,52.0,exception_happened
60,60,2,False,"[(27, 51), (7, 21), (53, 62), (11, 20)]","[(53, 53)]","[[(30, 30), (23, 23), (27, 27), (43, 43), (45, 45), (25, 25), (29, 29), (49, 49), (44, 44), (50, 50), (28, 28), (63, 63), (40, 40), (41, 41), (51, 51), (31, 31)], [(30, 30), (31, 31), (50, 50), (29, 29)], [(41, 41), (49, 49), (40, 40)], [(30, 30), (23, 23), (27, 27), (36, 36), (63, 63), (29, 29), (38, 38), (28, 28), (37, 37), (50, 50), (51, 51), (31, 31), (24, 24)], [(10, 10), (21, 21), (13, 13)], [(4, 4), (17, 17), (7, 7), (16, 16), (9, 9), (0, 0), (1, 1), (20, 20), (13, 13), (10, 10), (21, 21), (18, 18), (66, 66), (15, 15)], [(28, 28), (27, 27), (51, 51)], [(48, 48), (45, 45), (46, 46)], [(66, 66), (1, 1), (0, 0)], [(17, 17), (5, 5), (7, 7), (0, 0), (1, 1), (20, 20), (13, 13), (10, 10), (19, 19), (21, 21), (66, 66), (15, 15)], [(8, 8), (7, 7), (0, 0), (1, 1), (10, 10), (3, 3), (21, 21), (66, 66), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aecdf0220>"": ""{\nCoordinateReferenceSystem crs = null;\nif (hint != null) {\n    StringTokenizer st = new StringTokenizer(hint, \"";\"");\n    while (st.hasMoreTokens()) {\n        String h = st.nextToken();\n        h = h.trim();\n        if (h.startsWith(\""srid=\"")) {\n            String srid = h.split(\""=\"")[1];\n            try {\n                crs = CRS.decode(\""EPSG:\"" + srid);\n            }\n        }\n    }\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8c40>"": ""{\n    String h = st.nextToken();\n    h = h.trim();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8040>"": ""{\n    String srid = h.split(\""=\"")[1];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdf0670>"": ""{\n    boolean nillable = true;\n    if (hint != null) {\n        StringTokenizer st = new StringTokenizer(hint, \"";\"");\n        while (st.hasMoreTokens()) {\n            String h = st.nextToken();\n            h = h.trim();\n            if (h.equals(\""nillable\"")) {\n                nillable = true;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe880>"": "" else {\n   int split2 = typeSpec.indexOf(\"":\"", split + 1);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe8b0>"": ""{\n    int split = typeSpec.indexOf(\"":\"");\n    String type;\n    if (split == -1) {\n        type = \""String\"";\n    } else {\n        int split2 = typeSpec.indexOf(\"":\"", split + 1);\n        if (split2 == -1) {\n            type = typeSpec.substring(split + 1);\n        } else {\n            type = typeSpec.substring(split + 1, split2);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef46eb0>"": ""{\n    StringTokenizer st = new StringTokenizer(hint, \"";\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab708b0d0>"": ""{\n    String msg = \""Error decoding srs: \"" + srid;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab708b2e0>"": ""Class clazz = type(type);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abef10>"": ""{\n    int split = typeSpec.indexOf(\"":\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abebe0>"": ""{\n    int split = typeSpec.indexOf(\"":\"");\n    String hint = null;\n    if (split == -1) {\n    } else {\n        int split2 = typeSpec.indexOf(\"":\"", split + 1);\n        if (split2 == -1) {\n        } else {\n            hint = typeSpec.substring(split2 + 1);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe7f0>"": ""{\n    int split = typeSpec.indexOf(\"":\"");\n    String name;\n    if (split == -1) {\n        name = typeSpec;\n    } else {\n        name = typeSpec.substring(0, split);\n    }\n}""}",0,1,2,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/library/main/src/main/java/org/geotools/data/DataUtilities.java,createAttribute,2128,12.0,41.0,exception_happened
61,61,2,False,"[(22, 54), (35, 54), (35, 50), (59, 65)]","[(22, 22)]","[[(62, 62), (61, 61), (58, 58), (67, 67), (55, 55), (64, 64), (57, 57), (66, 66), (59, 59), (56, 56), (60, 60)], [(1, 1), (69, 69), (0, 0)], [(43, 43), (20, 20), (38, 38), (39, 39), (11, 11), (16, 16), (12, 12), (21, 21), (40, 40), (22, 22), (17, 17), (13, 13), (55, 55), (50, 50), (41, 41), (14, 14), (10, 10), (37, 37), (42, 42)], [(25, 25), (22, 22), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8abeeb0>"": ""Component c = droppable.getDropComponent();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d4c0>"": "" else {\n   if( null != currentDropIndication ) {\n       Rectangle repaintRect = currentDropIndication.getBounds();\n       currentDropIndication = null;\n       if( null != currentPainter ) {\n           Rectangle rect = currentPainter.getPaintArea();\n           if( null != rect )\n               repaintRect = repaintRect.union( rect );\n       }\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdf0d30>"": ""{\n    Point old = dragLocation;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe550>"": ""{\n    Rectangle repaintRectangle = null;\n    if( null != currentDropIndication ) {\n        repaintRectangle = currentDropIndication.getBounds();\n        repaintRectangle = SwingUtilities.convertRectangle(componentUnderCursor, repaintRectangle, this );\n        if( null != currentPainter ) {\n            Rectangle rect = currentPainter.getPaintArea();\n        }\n    }\n    Component c = droppable.getDropComponent();\n    if( null != currentDropIndication ) {\n        Rectangle rect = currentDropIndication.getBounds();\n        rect = SwingUtilities.convertRectangle(c, rect, this );\n        if( null != repaintRectangle )\n            repaintRectangle.add( rect );\n        else\n            repaintRectangle = rect;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe3a0>"": ""Component c = droppable.getDropComponent();\nShape s = droppable.getIndicationForLocation (\n    SwingUtilities.convertPoint(this, p, c));""}",0,0,0,16,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/core.windows/src/org/netbeans/core/windows/view/dnd/DropTargetGlassPane.java,setDragLocation,134,19.0,51.0,exception_happened
62,62,2,False,"[(40, 54), (40, 52), (25, 32), (40, 48)]","[(4, 4)]",[],"{""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab190>"": ""Object changeObject = event.getChangedObjects()[0];""}",0,1,0,12,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/pde/internal/ui/editor/build/BinSection.java,modelChanged,72,23.0,44.0,exception_happened
63,63,2,False,[],[],"[[(51, 51), (0, 0)], [(16, 16), (0, 0), (1, 1), (19, 19), (12, 12), (2, 2), (50, 50), (51, 51)], [(1, 1), (2, 2), (51, 51), (0, 0)], [(1, 1), (51, 51), (0, 0)], [(0, 0), (1, 1), (2, 2), (6, 6), (51, 51)], [(5, 5), (0, 0), (1, 1), (2, 2), (51, 51)], [(16, 16), (0, 0), (1, 1), (12, 12), (2, 2), (51, 51)], [(14, 14), (0, 0), (1, 1), (12, 12), (2, 2), (51, 51)], [(0, 0), (1, 1), (10, 10), (2, 2), (51, 51)], [(9, 9), (0, 0), (1, 1), (2, 2), (51, 51)], [(7, 7), (0, 0), (1, 1), (2, 2), (51, 51)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad35e3eb0>"": ""public void testScopes() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35e38b0>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends ModelElement> elements = topScope.getElements();\n    elements = ModelUtils.getFirst(topScope.getDeclaredNamespaces()).getElements();\n    for (ModelElement elm : elements) {\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529700>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35e3730>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529940>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends ClassScope> classes = ModelUtils.getDeclaredClasses(topScope);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3529340>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends TypeScope> types = ModelUtils.getDeclaredTypes(topScope);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a70d60>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends ModelElement> elements = topScope.getElements();\n    elements = ModelUtils.getFirst(topScope.getDeclaredNamespaces()).getElements();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a70940>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends ModelElement> elements = topScope.getElements();\n    ModelElement e = ModelUtils.getFirst(elements);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a70fd0>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends VariableName> allVariables = ModelUtils.getDeclaredVariables(topScope);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17efd0>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends FunctionScope> functions = ModelUtils.getDeclaredFunctions(topScope);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35291f0>"": ""{\n    Model model = getModel(prepareTestFile(\""testfiles/model/scope.php\""));\n    FileScope topScope = model.getFileScope();\n    Collection<? extends InterfaceScope> interfaces = ModelUtils.getDeclaredInterfaces(topScope);\n}""}",1,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/php.editor/test/unit/src/org/netbeans/modules/php/editor/model/impl/ModelTest.java,testScopes,140,6.0,45.0,exception_happened
64,64,2,False,"[(39, 51), (29, 37), (1, 6), (45, 51)]","[(22, 22)]","[[(6, 6), (52, 52), (5, 5), (0, 0)], [(52, 52), (5, 5), (0, 0)], [(12, 12), (20, 20), (11, 11), (13, 13)], [(8, 8), (52, 52), (0, 0)], [(12, 12), (20, 20), (11, 11)], [(8, 8), (17, 17), (16, 16), (9, 9), (0, 0), (52, 52), (20, 20), (13, 13), (10, 10), (19, 19), (12, 12), (18, 18), (11, 11), (15, 15)], [(30, 30), (32, 32), (31, 31), (29, 29)], [(52, 52), (9, 9), (0, 0)], [(30, 30), (23, 23), (27, 27), (31, 31), (29, 29), (32, 32), (37, 37), (22, 22), (33, 33)], [(52, 52), (7, 7), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab7401220>"": ""{\n  ExoWindowID windowID = uiEditingPortlet_.getWindowId() ;\n  String portletId = windowID.getPortletApplicationName() + \""/\"" + windowID.getPortletName()  ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7401430>"": ""{\n  ExoWindowID windowID = uiEditingPortlet_.getWindowId() ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60cac40>"": ""{\n  Decorator decorator = (Decorator) decoratorIterator.next() ;\n  String rendererType = decorator.getRendererType() ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60ca850>"": ""{\n  Iterator decoratorIterator = skinService_.getPortletDecorators().iterator() ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60ca430>"": ""List styles = selectDecorator.getStyles() ;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60caa90>"": ""{\n  Decorator decorator = (Decorator) decoratorIterator.next() ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60ca100>"": ""{\n  Iterator decoratorIterator = skinService_.getPortletDecorators().iterator() ;\n  String currentRenderer = uiPortlet.getRendererType() ;\n  Decorator selectDecorator = null ;\n  while(decoratorIterator.hasNext()) {\n    Decorator decorator = (Decorator) decoratorIterator.next() ;\n    String rendererType = decorator.getRendererType() ;\n    if (selectDecorator == null)  {\n      selectDecorator = decorator ;\n    }else if(currentRenderer.equals(rendererType)) {\n      selectDecorator = decorator ;\n    }\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172b50>"": ""List portletStyles = skinService_.getPortletStyles(portletId) ;\nif(portletStyles == null)  {\n  portletStyles = skinService_.getPortletStyles(\""default\"") ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac60ca760>"": ""{\n  String currentRenderer = uiPortlet.getRendererType() ;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae79a0>"": ""List styles = selectDecorator.getStyles() ;\nfor (int i = 0; i < styles.size(); i++) {\n}\nList portletStyles = skinService_.getPortletStyles(portletId) ;\nif(portletStyles == null)  {\n  portletStyles = skinService_.getPortletStyles(\""default\"") ;\n}\nfor (int i = 0; i < portletStyles.size(); i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7401bb0>"": ""{\n  Portlet model = uiPortlet.getPortletModel() ;\n}""}",4,1,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/exoportal/exoportal-v1.0.2/src/exo/portal/impl/src/java/org/exoplatform/portal/faces/component/UIPortletForm.java,setEditingPortlet,110,7.0,45.0,exception_happened
65,65,1,False,"[(7, 13), (20, 31), (18, 31), (39, 48), (56, 65), (5, 13), (37, 48), (54, 65)]",[],"[[(66, 66), (5, 5), (0, 0)], [(66, 66), (0, 0)], [(7, 7), (0, 0), (1, 1), (20, 20), (39, 39), (66, 66), (56, 56)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe659e20>"": ""{\n  List<String> rules = new ArrayList<String>();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7f40>"": ""public void testRead2waySynonymRules() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe6596d0>"": ""{\n  SlowSynonymMap synMap;\n  synMap = new SlowSynonymMap( true );\n  synMap = new SlowSynonymMap( true );\n  synMap = new SlowSynonymMap( true );\n  synMap = new SlowSynonymMap( true );\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMap.java,testRead2waySynonymRules,178,1.0,49.0,exception_happened
66,66,2,False,"[(45, 51)]","[(7, 7)]","[[(23, 23), (27, 27), (71, 71), (0, 0), (61, 61), (1, 1), (25, 25), (26, 26), (21, 21), (57, 57), (41, 41), (56, 56), (40, 40), (53, 53), (33, 33)], [(43, 43), (40, 40), (53, 53), (42, 42)], [(56, 56), (43, 43), (52, 52), (61, 61), (38, 38), (39, 39), (48, 48), (57, 57), (66, 66), (53, 53), (62, 62), (58, 58), (35, 35), (44, 44), (49, 49), (40, 40), (36, 36), (45, 45), (54, 54), (63, 63), (55, 55), (64, 64), (50, 50), (41, 41), (59, 59), (51, 51), (60, 60), (46, 46), (65, 65), (37, 37), (47, 47), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aeb429a00>"": ""{\n    int ch = input.read();\n    if (DOXYGEN_CONTROL_SYMBOLS.indexOf(ch) == (-1)) {\n        ch = input.read();\n        while (!CndLexerUtilities.isCppIdentifierStart(ch) && DOXYGEN_CONTROL_SYMBOLS.indexOf(ch) == (-1) && ch != EOF) {\n            ch = input.read();\n        }\n    }\n            while (true) {\n                ch = input.read();\n            }\n            while (true) {\n                ch = input.read();\n            }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13db20>"": ""{\n    boolean wasFirst = first;\n    first = false;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeb429e80>"": ""int oldState = state;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172940>"": ""switch (ch) {\n    case '@':\n    case '\\\\':\n    {\n        boolean first = true;\n        while (true) {\n            ch = input.read();\n            boolean wasFirst = first;\n            first = false;\n            if ((wasFirst && !CndLexerUtilities.isCppIdentifierStart(ch)) || (!CndLexerUtilities.isCppIdentifierPart(ch))) {\n                input.backup(1);\n                if (input.readLength() > 1) {\n                    return tokenFactory.createToken(DoxygenTokenId.TAG, input.readLength());\n                } else {\n                    // no identifier after control symbol => control symbol is not tag-start\n                    return tokenFactory.createToken(DoxygenTokenId.OTHER_TEXT, input.readLength());\n                }\n            }\n        }\n    }\n    case '<':\n        while (true) {\n            ch = input.read();\n            if (ch == '>' || ch == EOF) {\n                return token(DoxygenTokenId.HTML_TAG);\n            }\n        }\n    case '.':\n        return token(DoxygenTokenId.DOT);\n    case '#':\n        return token(DoxygenTokenId.HASH);\n}""}",0,4,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.lexer/src/org/netbeans/modules/cnd/lexer/DoxygenLexer.java,nextToken,97,24.0,44.0,exception_happened
67,67,2,False,"[(20, 44), (55, 61), (27, 33), (35, 41)]",[],"[[(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (66, 66), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (1, 1), (24, 24), (65, 65), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(1, 1), (69, 69)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe820>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe460>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe280>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abecd0>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abed00>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad35e3100>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe760>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe160>"": ""for(Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n//}\n//for(String key: s_sequences.keySet()) {\n\tString[] tokens = entry.getKey().split(\""\\\\.\"");\n\tString TableName = tokens[1];\n\tint AD_Client_ID = Integer.parseInt(tokens[0]);\n\tString selectSQL = \""SELECT CurrentNext, CurrentNextSys, IncrementNo, AD_Sequence_ID \""\n\t\t+ \""FROM AD_Sequence \""\n\t\t+ \""WHERE Name=?\""\n\t\t+ \"" AND IsActive='Y' AND IsTableID='Y' AND IsAutoSequence='Y' \""\n\t\t+ \"" FOR UPDATE\"";\n\tSequence seq = entry.getValue();\n\t//at this point there should not be a need for syncrhonization, just for safety\n\tsynchronized(seq) {\n\t\tTrx trx = Trx.get(\""MSequence.onSystemShutdown()\"");\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\t//\n\t\t\tpstmt = trx.getConnection().prepareStatement(selectSQL, ResultSet.TYPE_FORWARD_ONLY,\n\t\t\t\t\tResultSet.CONCUR_UPDATABLE);\n\t\t\tpstmt.setString(1, TableName);\n\t\t\t//\n\t\t\trs = pstmt.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\tif (isCompiereSys(AD_Client_ID)) {\n\t\t\t\t\tint dbNextSeq = rs.getInt(2);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(2, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint dbNextSeq = rs.getInt(1);\n\t\t\t\t\t// only when db nextseq equals to the jvm endseq then i'll write back. this is so if there are multiple\n\t\t\t\t\t//jvms running, i know that other jvms already advanced the sequenes so that i don't mess with it\n\t\t\t\t\tif(dbNextSeq == seq.endSeq) {\n\t\t\t\t\t\tseq.endSeq = seq.nextSeq;\n\t\t\t\t\t\trs.updateInt(1, seq.nextSeq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.updateRow();\n\t\t\t}\n\t\t}catch (Exception e) {\n\t\t\ts_log.log(Level.SEVERE, TableName + \"" - \"" + e.getMessage(), e);\n\t\t} finally {\n\t\t\tif( rs != null )\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t}\n\n\t\t\t\tif (pstmt != null)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpstmt.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\ts_log.log(Level.SEVERE, \""Finish\"", e);\n\t\t\t\t\t}\n\t\t\t\t\tpstmt = null;\n\n\t\t\t\t\tif (trx != null) {\n\t\t\t\t\t\ttrx.commit();\n\t\t\t\t\t\ttrx.close();\n\t\t\t\t\t}\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a705b0>"": ""Map.Entry<String, Sequence> entry:s_sequences.entrySet()) {\n}""}",1,0,3,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/compiere/compiere-330/src/release_330/ad/src/org/compiere/model/MSequence.java,onSystemShutdown,50,12.0,42.0,exception_happened
68,68,2,False,"[(39, 47), (41, 47)]","[(30, 30)]","[[(17, 17), (16, 16), (15, 15)], [(32, 32), (31, 31), (58, 58), (29, 29)], [(49, 49), (38, 38), (39, 39), (57, 57), (37, 37), (41, 41), (40, 40), (42, 42)], [(57, 57), (38, 38), (39, 39), (40, 40), (37, 37), (49, 49)], [(72, 72), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8abee50>"": ""StringBuffer output = new StringBuffer();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051ca60>"": ""int numberOfInputs = (inputFile != null ? 1 : 0)\n    + (inputProperty != null ? 1 : 0)\n    + (inputString != null ? 1 : 0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe520>"": ""Session session = null;\ntry {\n    session = openSession();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440ab50>"": "" else { // read command resource and execute for each command\n   try {\n       BufferedReader br = new BufferedReader(\n               new InputStreamReader(commandResource.getInputStream()));\n       String cmd;\n       while ((cmd = br.readLine()) != null)\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440abb0>"": "" else { // read command resource and execute for each command\n   try {\n       BufferedReader br = new BufferedReader(\n               new InputStreamReader(commandResource.getInputStream()));\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7a707f0>"": ""public void execute() throws BuildException {\n}""}",0,1,2,11,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/ant/ant-1.8.4/src/apache-ant-1.8.4/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java,execute,188,30.0,44.0,exception_happened
69,69,1,False,"[(1, 14), (29, 50), (17, 24)]","[(38, 38), (26, 26), (39, 39), (33, 33), (37, 37), (34, 34), (42, 42)]","[[(51, 51), (7, 7), (0, 0)], [(4, 4), (51, 51), (0, 0)], [(2, 2), (51, 51), (0, 0)], [(9, 9), (51, 51), (0, 0)], [(4, 4), (5, 5), (0, 0), (1, 1), (3, 3), (2, 2), (6, 6), (51, 51)], [(3, 3), (51, 51), (0, 0)], [(8, 8), (51, 51), (0, 0)], [(17, 17), (16, 16), (0, 0), (25, 25), (51, 51)], [(1, 1), (51, 51), (0, 0)], [(36, 36), (35, 35)], [(17, 17), (16, 16), (0, 0), (25, 25), (21, 21), (51, 51), (22, 22)], [(17, 17), (16, 16), (0, 0), (25, 25), (18, 18), (51, 51)], [(41, 41), (40, 40)], [(17, 17), (23, 23), (16, 16), (0, 0), (25, 25), (21, 21), (51, 51), (22, 22), (15, 15)], [(10, 10), (51, 51), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac051c850>"": ""Exception e"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493850>"": ""NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe8b0>"": ""{\n    CategoryAxis domainAxis2 = new CategoryAxis(\""Domain 2\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a0d0>"": ""BarRenderer rendererB  = (BarRenderer) p2.getRenderer(1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe160>"": ""{\n    BarRenderer renderer1 = new BarRenderer();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe190>"": ""{\n    CategoryAxis domainAxis1 = new CategoryAxis(\""Domain 1\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe2b0>"": ""{\n    BarRenderer renderer2 = new BarRenderer();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe2e0>"": ""{\n    DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n    CategoryAxis domainAxis1 = new CategoryAxis(\""Domain 1\"");\n    NumberAxis rangeAxis1 = new NumberAxis(\""Range 1\"");\n    BarRenderer renderer1 = new BarRenderer();\n    CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1,\n            renderer1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abeb20>"": ""{\n    NumberAxis rangeAxis1 = new NumberAxis(\""Range 1\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe340>"": ""{\n    NumberAxis rangeAxis2 = new NumberAxis(\""Range 2\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051cb50>"": ""{\n    try {\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8b80>"": ""{\n    DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493400>"": ""BarRenderer rendererA = (BarRenderer) p2.getRenderer(0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe659c10>"": ""NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36c10>"": ""DefaultCategoryDataset datasetA\n        = (DefaultCategoryDataset) p2.getDataset(0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74934c0>"": ""CategoryAxis domainAxisB = p2.getDomainAxis(1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051cdc0>"": ""{\n    try {\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray()));\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c5e0>"": ""{\n    try {\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        ObjectOutput out = new ObjectOutputStream(buffer);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493f10>"": ""DefaultCategoryDataset datasetB\n        = (DefaultCategoryDataset) p2.getDataset(1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c730>"": ""CategoryAxis domainAxisA = p2.getDomainAxis(0);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf17efd0>"": ""{\n    CategoryPlot p2 = null;\n    try {\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray()));\n        p2 = (CategoryPlot) in.readObject();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe7f0>"": ""{\n    DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n}""}",0,0,1,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jfreechart/jfreechart-1.0.13/src/jfreechart-1.0.13/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java,testSerialization5,769,2.0,41.0,exception_happened
70,70,2,False,[],[],"[[(6, 6), (7, 7), (44, 44)], [(8, 8), (0, 0), (44, 44), (2, 2), (6, 6), (49, 49)], [(3, 3), (49, 49), (0, 0)], [(43, 43), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (34, 34), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (17, 17), (27, 27), (36, 36), (13, 13), (32, 32), (18, 18), (41, 41), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(1, 1), (49, 49), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad7493e20>"": ""{\n    char c = line.charAt(i);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8c70>"": ""{\n    int i = 0;\n    while (i < line.length()) {\n        i++;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee86a0>"": ""{\n    StringBuilder current = new StringBuilder();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecee8190>"": ""{\n    int i = 0;\n    boolean isSingleQuoteMode = false;\n    boolean isDoubleQuoteMode = false;\n    while (i < line.length()) {\n        switch (c) {\n            case '\\'': // NOI18N\n                if (isSingleQuoteMode) {\n                    isSingleQuoteMode = false;\n                } else if (!isDoubleQuoteMode) {\n                    isSingleQuoteMode = true;\n                }\n                current.append(c);\n                break;\n            case '\\\""': // NOI18N\n                if (isDoubleQuoteMode) {\n                    isDoubleQuoteMode = false;\n                } else if (!isSingleQuoteMode) {\n                    isDoubleQuoteMode = true;\n                }\n                current.append(c);\n                break;\n            case ' ': // NOI18N\n            case '\\t': // NOI18N\n            case '\\n': // NOI18N\n            case '\\r': // NOI18N\n                if (isSingleQuoteMode || isDoubleQuoteMode) {\n                    current.append(c);\n                    break;\n                } else {\n                    if (current.length() > 0) {\n                        res.add(current.toString());\n                        current.setLength(0);\n                    }\n                }\n                break;\n            default:\n                current.append(c);\n                break;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46fd0>"": ""{\n    List<String> res = new ArrayList<String>();\n}""}",0,1,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.dwarfdump/src/org/netbeans/modules/cnd/dwarfdump/CompileLineService.java,splitCommandLine,318,16.0,44.0,exception_happened
71,71,2,False,"[(1, 11), (58, 75), (42, 54), (42, 49)]",[],"[[(8, 8), (5, 5), (7, 7), (6, 6), (11, 11)], [(30, 30), (58, 58), (75, 75)], [(4, 4), (8, 8), (17, 17), (5, 5), (14, 14), (7, 7), (23, 23), (0, 0), (76, 76), (1, 1), (10, 10), (19, 19), (18, 18), (2, 2), (6, 6), (22, 22), (11, 11), (15, 15)], [(43, 43), (52, 52), (61, 61), (29, 29), (38, 38), (39, 39), (66, 66), (75, 75), (34, 34), (53, 53), (30, 30), (62, 62), (25, 25), (58, 58), (26, 26), (44, 44), (67, 67), (49, 49), (31, 31), (36, 36), (54, 54), (63, 63), (55, 55), (59, 59), (69, 69), (74, 74), (37, 37), (42, 42)], [(39, 39), (34, 34), (36, 36)], [(4, 4), (76, 76), (0, 0)], [(69, 69), (62, 62), (63, 63), (74, 74), (67, 67), (66, 66)], [(30, 30), (52, 52), (54, 54), (29, 29), (55, 55), (34, 34), (31, 31), (53, 53), (42, 42)], [(30, 30), (43, 43), (36, 36), (25, 25), (49, 49), (39, 39), (55, 55), (37, 37), (34, 34), (31, 31), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe610>"": ""{\r\n  int barWidth = verticalBar.getSize().x;\n  if (Application.IS_MAC && barWidth == 0)\r\n    barWidth= 16;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051cb80>"": ""TableColumn column : fCols\nfor (TableColumn column : fCols) {\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2c6ee0>"": ""{\r\n  int totalWidth = fTable.getParent().getClientArea().width;\n  totalWidth -= fTable.getBorderWidth() * 2;\n  ScrollBar verticalBar = fTable.getVerticalBar();\n  if (verticalBar != null) {\r\n    int barWidth = verticalBar.getSize().x;\n    if (Application.IS_MAC && barWidth == 0)\r\n      barWidth= 16;\n    totalWidth -= barWidth;\n  }\n  if (Application.IS_MAC) {\r\n    totalWidth -= 3;\n    if ((fTable.getStyle() & SWT.CHECK) != 0)\r\n      totalWidth -= 24;\n  }\n  else if (Application.IS_LINUX)\r\n    totalWidth -= 3;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c310>"": ""int freeWidth = totalWidth;\nint occupiedWidth = 0;\nint totalFillSum = 0;\nfor (TableColumn column : fCols) {\r\n  CColumnLayoutData data = (CColumnLayoutData) column.getData(LAYOUT_DATA);\n  if (data.getSize() == CColumnLayoutData.Size.FIXED && data.getWidthHint() == CColumnLayoutData.DEFAULT) {\r\n    int width = column.getWidth();\n    freeWidth -= width;\n    occupiedWidth += width;\n  }\n  else if (data.getSize() == CColumnLayoutData.Size.FIXED) {\r\n    freeWidth -= data.getWidthHint();\n    occupiedWidth += data.getWidthHint();\n  }\n  else if (data.getSize() == CColumnLayoutData.Size.FILL) {\r\n    totalFillSum += data.getWidthHint();\n  }\n}\nfor (TableColumn column : fCols) {\r\n  CColumnLayoutData data = (CColumnLayoutData) column.getData(LAYOUT_DATA);\n  /* Fill available space with ratio */\n  if (data.getSize() == CColumnLayoutData.Size.FILL) {\r\n    int colWidth = (freeWidth * data.getWidthHint()) / totalFillSum;\n    if (occupiedWidth + colWidth >= totalWidth)\r\n      colWidth = totalWidth - occupiedWidth;\n    occupiedWidth += colWidth;\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c940>"": ""{\r\n  int width = column.getWidth();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2cab80>"": ""{\r\n  ScrollBar verticalBar = fTable.getVerticalBar();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2ca7c0>"": ""{\r\n  int colWidth = (freeWidth * data.getWidthHint()) / totalFillSum;\n  if (occupiedWidth + colWidth >= totalWidth)\r\n    colWidth = totalWidth - occupiedWidth;\n  occupiedWidth += colWidth;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c9d0>"": ""int totalFillSum = 0;\nfor (TableColumn column : fCols) {\r\n  CColumnLayoutData data = (CColumnLayoutData) column.getData(LAYOUT_DATA);\n  if (data.getSize() == CColumnLayoutData.Size.FIXED && data.getWidthHint() == CColumnLayoutData.DEFAULT) {\r\n  else if (data.getSize() == CColumnLayoutData.Size.FIXED) {\r\n  else if (data.getSize() == CColumnLayoutData.Size.FILL) {\r\n    totalFillSum += data.getWidthHint();\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051cbe0>"": ""int freeWidth = totalWidth;\nfor (TableColumn column : fCols) {\r\n  CColumnLayoutData data = (CColumnLayoutData) column.getData(LAYOUT_DATA);\n  if (data.getSize() == CColumnLayoutData.Size.FIXED && data.getWidthHint() == CColumnLayoutData.DEFAULT) {\r\n    int width = column.getWidth();\n    freeWidth -= width;\n  }\n  else if (data.getSize() == CColumnLayoutData.Size.FIXED) {\r\n    freeWidth -= data.getWidthHint();\n  }\n}""}",2,0,0,12,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/rssowl/rssowl-2.0.5/src/org.rssowl.ui/src/org/rssowl/ui/internal/util/CTable.java,onTableResize,122,17.0,46.0,exception_happened
72,72,2,False,"[(56, 68)]","[(30, 30), (23, 23), (25, 25), (20, 20), (29, 29), (22, 22), (28, 28), (18, 18), (31, 31), (24, 24)]","[[(29, 29), (33, 33)], [(43, 43), (45, 45), (35, 35), (39, 39), (77, 77), (37, 37), (41, 41)], [(46, 46), (44, 44), (35, 35), (77, 77), (37, 37), (47, 47), (40, 40), (42, 42)], [(23, 23), (25, 25), (27, 27)], [(35, 35), (77, 77), (37, 37), (40, 40), (42, 42)], [(35, 35), (39, 39), (77, 77), (37, 37), (41, 41)], [(19, 19), (18, 18)], [(34, 34), (29, 29), (33, 33)], [(43, 43), (52, 52), (29, 29), (39, 39), (42, 42), (80, 80), (34, 34), (30, 30), (25, 25), (26, 26), (35, 35), (44, 44), (3, 3), (77, 77), (31, 31), (22, 22), (40, 40), (27, 27), (45, 45), (32, 32), (41, 41), (23, 23), (5, 5), (78, 78), (0, 0), (46, 46), (24, 24), (28, 28), (37, 37), (47, 47), (33, 33)], [(26, 26), (22, 22), (24, 24)], [(37, 37), (77, 77), (35, 35)], [(78, 78), (34, 34), (35, 35)], [(28, 28), (32, 32)], [(21, 21), (18, 18)], [(46, 46), (44, 44), (35, 35), (77, 77), (37, 37), (40, 40), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab040>"": ""final int minTileX = src.getMinTileX();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed850>"": ""final int minTileY = src.getMinTileY();\nfinal int maxTileY = minTileY + src.getNumYTiles();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab0d0>"": ""final int tileW = src.getTileWidth();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051c100>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\nint minx = r.getMinX();\nminx = minx < minx_ ? minx_ : minx;\nint maxx = minx + tileW;\nmaxx = maxx > maxx_ ? maxx_ : maxx;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc910>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\nint miny = r.getMinY();\nminy = miny < miny_ ? miny_ : miny;\nint maxy = miny + tileH;\nmaxy = maxy > maxy_ ? maxy_ : maxy;\nfor (int j = miny; j < maxy; j++) {\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0190>"": ""final int miny_ = src.getMinY();\nfinal int srcH_ = src.getHeight();\nfinal int maxy_ = miny_ + srcH_;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3a30>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\nint miny = r.getMinY();\nminy = miny < miny_ ? miny_ : miny;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbeda90>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\nint minx = r.getMinX();\nminx = minx < minx_ ? minx_ : minx;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0310>"": ""final int srcH_ = src.getHeight();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0b20>"": ""final int numBands = src.getSampleModel().getNumBands();\nfinal int rgba[] = new int[numBands];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fabb20>"": ""final int minTileY = src.getMinTileY();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed340>"": ""final int minTileY = src.getMinTileY();\nfinal int maxTileY = minTileY + src.getNumYTiles();\nfor (int ty = minTileY; ty < maxTileY; ty++) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493430>"": ""{\nfor (int i = 0; i < reduceList.length; i++) {\n}\nfinal int minx_ = src.getMinX();\nfinal int miny_ = src.getMinY();\nfinal int srcW_ = src.getWidth();\nfinal int srcH_ = src.getHeight();\nfinal int maxx_ = minx_ + srcW_;\nfinal int maxy_ = miny_ + srcH_;\nfinal int minTileX = src.getMinTileX();\nfinal int minTileY = src.getMinTileY();\nfinal int tileW = src.getTileWidth();\nfinal int tileH = src.getTileHeight();\nfinal int maxTileX = minTileX + src.getNumXTiles();\nfinal int maxTileY = minTileY + src.getNumYTiles();\nfor (int ty = minTileY; ty < maxTileY; ty++) {\n\tfor (int tx = minTileX; tx < maxTileX; tx++) {\n\t\tfinal Raster r = src.getTile(tx, ty);\n\t\tint minx = r.getMinX();\n\t\tint miny = r.getMinY();\n\t\tminx = minx < minx_ ? minx_ : minx;\n\t\tminy = miny < miny_ ? miny_ : miny;\n\t\tint maxx = minx + tileW;\n\t\tint maxy = miny + tileH;\n\t\tmaxx = maxx > maxx_ ? maxx_ : maxx;\n\t\tmaxy = maxy > maxy_ ? maxy_ : maxy;\n\t\tfor (int j = miny; j < maxy; j++) {\n\t\t\tfor (int i = minx; i < maxx; i++) {\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0460>"": ""final int minx_ = src.getMinX();\nfinal int srcW_ = src.getWidth();\nfinal int maxx_ = minx_ + srcW_;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0c70>"": ""final boolean discriminantTransparency = transparency != Transparency.OPAQUE;"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedc70>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0520>"": ""final int numBands = src.getSampleModel().getNumBands();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed550>"": ""final int tileH = src.getTileHeight();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0610>"": ""final int minx_ = src.getMinX();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed670>"": ""{\n\tfor (int tx = minTileX; tx < maxTileX; tx++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedee0>"": ""final int minTileX = src.getMinTileX();\nfinal int maxTileX = minTileX + src.getNumXTiles();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0730>"": ""final int numBands = src.getSampleModel().getNumBands();\nfinal int transpBand = numBands - 1;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0f70>"": ""final int miny_ = src.getMinY();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac051cfa0>"": ""tx++) {\nfinal Raster r = src.getTile(tx, ty);\nint miny = r.getMinY();\nminy = miny < miny_ ? miny_ : miny;\nint maxy = miny + tileH;\nmaxy = maxy > maxy_ ? maxy_ : maxy;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19c0fd0>"": ""final int srcW_ = src.getWidth();""}",10,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/library/coverage/src/main/java/org/geotools/image/palette/CustomPaletteBuilder.java,buildPalette,276,17.0,50.0,exception_happened
73,73,2,False,"[(14, 40), (24, 51), (27, 35), (41, 46)]","[(6, 6), (8, 8), (27, 27), (10, 10)]","[[(17, 17), (16, 16), (19, 19)], [(16, 16), (20, 20), (13, 13), (10, 10), (19, 19), (21, 21), (6, 6), (22, 22), (15, 15)], [(43, 43), (46, 46), (44, 44)], [(10, 10), (13, 13)], [(10, 10), (12, 12)], [(1, 1), (53, 53), (0, 0)], [(19, 19), (20, 20), (22, 22)], [(17, 17), (16, 16), (10, 10), (19, 19), (12, 12), (18, 18), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbeda30>"": ""int /*long*/ hwndTrack = parent.handle;"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2c6430>"": ""{\n\tint clientWidth = clientRect.right - clientRect.left;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2c6850>"": ""POINT pt = new POINT ();\nRECT rect = new RECT (), clientRect = new RECT ();\nint height = rect.bottom - rect.top;\nint newX = lastX, newY = lastY;\nif ((style & SWT.VERTICAL) != 0) {\n} else {\n\tint clientHeight = clientRect.bottom - clientRect.top;\n\tnewY = Math.min (Math.max (0, pt.y - startY), clientHeight - height);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aba481e80>"": "" else {\nint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbeda90>"": ""RECT rect = new RECT (), clientRect = new RECT ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbedac0>"": ""POINT pt = new POINT ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46be0>"": ""Event event = new Event ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3130>"": ""RECT rect = new RECT (), clientRect = new RECT ();\nint height = rect.bottom - rect.top;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3f40>"": ""RECT rect = new RECT (), clientRect = new RECT ();\nint width = rect.right - rect.left;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493d60>"": ""{\nLRESULT result = super.WM_MOUSEMOVE (wParam, lParam);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed9a0>"": ""RECT rect = new RECT (), clientRect = new RECT ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2c6bb0>"": "" else {\nint clientHeight = clientRect.bottom - clientRect.top;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe2c6be0>"": ""POINT pt = new POINT ();\nRECT rect = new RECT (), clientRect = new RECT ();\nint width = rect.right - rect.left;\nint newX = lastX, newY = lastY;\nif ((style & SWT.VERTICAL) != 0) {\n\tint clientWidth = clientRect.right - clientRect.left;\n\tnewX = Math.min (Math.max (0, pt.x - startX), clientWidth - width);\n}""}",0,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/swt/widgets/Sash.java,WM_MOUSEMOVE,344,12.0,47.0,exception_happened
74,74,2,False,"[(47, 57)]","[(11, 11)]","[[(43, 43), (20, 20), (29, 29), (38, 38), (39, 39), (42, 42), (34, 34), (30, 30), (16, 16), (25, 25), (26, 26), (35, 35), (44, 44), (21, 21), (31, 31), (22, 22), (40, 40), (17, 17), (27, 27), (36, 36), (45, 45), (32, 32), (18, 18), (41, 41), (23, 23), (24, 24), (19, 19), (28, 28), (37, 37), (33, 33)], [(2, 2), (58, 58), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbed070>"": ""switch (type.kind) {\ncase PROJECT:\n    elements = new LinkedList<String>();\n    elements.add(\""target\"");\n    elements.add(\""import\"");\n    elements.add(\""property\"");\n    elements.add(\""description\"");\n    SortedSet<String> tasks = getSortedDefs(\""task\"");\n    tasks.remove(\""property\"");\n    tasks.remove(\""import\"");\n    elements.addAll(tasks); // Ant 1.6 permits any tasks at top level\n    elements.addAll(getSortedDefs(\""type\""));\n    break;\ncase TARGET:\n    elements = new ArrayList<String>(getSortedDefs(\""task\""));\n    // targets can have embedded types too, though less common:\n    elements.addAll(getSortedDefs(\""type\"")); // NOI18N\n    break;\ncase DESCRIPTION:\n    return Enumerations.empty();\ncase IMPORT:\n    return Enumerations.empty();\ndefault:\n    // some introspectable class\n    if (getAntGrammar().isKnown(type.name)) {\n        elements = new ArrayList<String>(new TreeSet<String>(getAntGrammar().getElements(type.name).keySet()));\n    } else {\n        elements = Collections.emptyList();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aba481b20>"": ""{\n    Node parent = ((Node)ctx).getParentNode();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493d90>"": ""ElementType type = typeOf((Element)parent);""}",1,0,0,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/ant.grammar/src/org/netbeans/modules/ant/grammar/AntGrammar.java,queryElements,326,11.0,44.0,exception_happened
75,75,2,False,"[(73, 96), (58, 69), (85, 91), (43, 50)]","[(36, 36), (38, 38), (29, 29), (28, 28), (74, 74), (73, 73)]","[[(28, 28), (32, 32)], [(28, 28), (30, 30)], [(52, 52), (53, 53), (57, 57)], [(28, 28), (32, 32), (33, 33)], [(28, 28), (30, 30), (31, 31)], [(76, 76), (78, 78), (83, 83)], [(39, 39), (71, 71), (38, 38)], [(39, 39), (71, 71), (38, 38), (40, 40)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3850>"": ""ListRewrite listRewrite= getParamgumentsRewrite();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d38e0>"": ""ListRewrite listRewrite= getParamgumentsRewrite();\nList<N> original= listRewrite.getOriginalList();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9306250>"": ""Iterator<N> nodesIter= nodes.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3af0>"": ""ListRewrite listRewrite= getParamgumentsRewrite();\nList<N> nodes= listRewrite.getRewrittenList();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92fa340>"": ""{\nN newParamgument= createNewParamgument(info, fParameterInfos, nodes);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3460>"": ""ListRewrite listRewrite= getParamgumentsRewrite();\nList<N> original= listRewrite.getOriginalList();\nfor (Iterator<N> iter= original.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92e1490>"": ""for (int i= 0; i < fParameterInfos.size(); i++) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92ced90>"": ""Map<N, N> newOldMap= new LinkedHashMap<N, N>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d35e0>"": ""ListRewrite listRewrite= getParamgumentsRewrite();\nList<N> nodes= listRewrite.getRewrittenList();\nIterator<N> rewriteIter= nodes.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab93066a0>"": ""{\n\tASTNode newNode= newIter.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9306ee0>"": ""Iterator<N> newIter= newNodes.iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92e1730>"": ""i++) {\nParameterInfo info= fParameterInfos.get(i);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3f70>"": ""List<N> newNodes= new ArrayList<N>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92e17c0>"": ""i++) {\n\tParameterInfo info= fParameterInfos.get(i);\n\tint oldIndex= info.getOldIndex();\n}""}",8,3,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/corext/refactoring/structure/ChangeSignatureProcessor.java,reshuffleElements,1689,17.0,53.0,exception_happened
76,76,2,False,"[(46, 64)]",[],"[[(81, 81), (27, 27), (25, 25), (26, 26)], [(27, 27), (36, 36), (25, 25), (29, 29), (26, 26), (35, 35), (28, 28), (81, 81), (37, 37), (31, 31), (33, 33)], [(4, 4), (85, 85), (5, 5), (0, 0), (88, 88)], [(81, 81), (25, 25), (31, 31), (33, 33)], [(28, 28), (25, 25), (81, 81)], [(27, 27), (25, 25), (29, 29), (26, 26), (35, 35), (28, 28), (81, 81), (31, 31), (33, 33)], [(27, 27), (25, 25), (29, 29), (26, 26), (81, 81), (28, 28)], [(4, 4), (85, 85), (7, 7), (9, 9), (0, 0), (88, 88), (15, 15)], [(4, 4), (8, 8), (85, 85), (7, 7), (0, 0), (88, 88), (15, 15)], [(4, 4), (85, 85), (5, 5), (0, 0), (25, 25), (75, 75), (81, 81), (2, 2), (41, 41), (40, 40), (88, 88)], [(41, 41), (76, 76), (43, 43), (42, 42)], [(4, 4), (8, 8), (85, 85), (14, 14), (7, 7), (0, 0), (9, 9), (13, 13), (88, 88), (10, 10), (12, 12), (6, 6), (11, 11), (15, 15)], [(25, 25), (31, 31), (81, 81)], [(43, 43), (29, 29), (42, 42), (2, 2), (75, 75), (76, 76), (85, 85), (7, 7), (25, 25), (26, 26), (35, 35), (44, 44), (81, 81), (3, 3), (40, 40), (31, 31), (27, 27), (68, 68), (36, 36), (45, 45), (64, 64), (73, 73), (15, 15), (41, 41), (88, 88), (4, 4), (5, 5), (0, 0), (65, 65), (28, 28), (37, 37), (33, 33)], [(25, 25), (40, 40), (81, 81)], [(46, 46), (65, 65), (45, 45), (44, 44), (74, 74), (47, 47)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab9429070>"": ""{\nint limit = PlanetConfig.getIntProperty(\n        \""planet.aggregator.technorati.limit\"", 500);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92cd0a0>"": ""{\n    int limit = PlanetConfig.getIntProperty(\n            \""planet.aggregator.technorati.limit\"", 500);\n    int userCount = planet.getSubscriptionCount();\n    int mod = (userCount / limit) + 1;\n    Calendar cal = Calendar.getInstance();\n    int day = cal.get(Calendar.DAY_OF_YEAR);\n    int start = (day % mod) * limit;\n    int end = start + limit;\n    end = end > userCount ? userCount : end;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426130>"": ""{\n    try {\n        PlanetManager planet = PlanetFactory.getPlanet().getPlanetManager();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9405160>"": ""{\n    Calendar cal = Calendar.getInstance();\n    int day = cal.get(Calendar.DAY_OF_YEAR);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9429190>"": ""{\n    int userCount = planet.getSubscriptionCount();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9405280>"": ""{\n    int limit = PlanetConfig.getIntProperty(\n            \""planet.aggregator.technorati.limit\"", 500);\n    int userCount = planet.getSubscriptionCount();\n    int mod = (userCount / limit) + 1;\n    Calendar cal = Calendar.getInstance();\n    int day = cal.get(Calendar.DAY_OF_YEAR);\n    int start = (day % mod) * limit;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9429310>"": ""{\nint limit = PlanetConfig.getIntProperty(\n        \""planet.aggregator.technorati.limit\"", 500);\nint userCount = planet.getSubscriptionCount();\nint mod = (userCount / limit) + 1;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426b80>"": ""{\n{\ntry {\n    int proxyPort = PlanetRuntimeConfig.getIntProperty(\""site.proxyport\"");\n}\n\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426bb0>"": ""{\n    try {\n        try {\n            String proxyHost = PlanetRuntimeConfig.getProperty(\""site.proxyhost\"");\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3c10>"": ""{\n    int count = 0;\n    try {\n        PlanetManager planet = PlanetFactory.getPlanet().getPlanetManager();\n        try {\n            Iterator subs = planet.getSubscriptions().iterator();\n            while (subs.hasNext()) {\n                count++;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940dc10>"": ""{\n    Subscription sub =\n            (Subscription)subs.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426ca0>"": ""{\n    try {\n        Technorati technorati = null;\n        try {\n            String proxyHost = PlanetRuntimeConfig.getProperty(\""site.proxyhost\"");\n            int proxyPort = PlanetRuntimeConfig.getIntProperty(\""site.proxyport\"");\n            if (proxyHost != null && proxyPort != -1) {\n                technorati = new Technorati(proxyHost, proxyPort);\n            } else {\n                technorati = new Technorati();\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9429550>"": ""{\nCalendar cal = Calendar.getInstance();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426d90>"": ""{\n    int count = 0;\n    int errorCount = 0;\n    try {\n        PlanetManager planet = PlanetFactory.getPlanet().getPlanetManager();\n        try {\n        } catch (IOException e\n        try {\n            int limit = PlanetConfig.getIntProperty(\n                    \""planet.aggregator.technorati.limit\"", 500);\n            int userCount = planet.getSubscriptionCount();\n            int mod = (userCount / limit) + 1;\n            Calendar cal = Calendar.getInstance();\n            int day = cal.get(Calendar.DAY_OF_YEAR);\n            int start = (day % mod) * limit;\n            int end = start + limit;\n            end = end > userCount ? userCount : end;\n            Iterator subs = planet.getSubscriptions().iterator();\n            while (subs.hasNext()) {\n                Subscription sub =\n                        (Subscription)subs.next();\n                if (count >= start && count < end) {\n                    try {\n                        planet.saveSubscription(sub);\n                    } catch (Exception e) {\n                        if (errorCount++ > 5)\n                    }\n                count++;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940df10>"": ""{\nIterator subs = planet.getSubscriptions().iterator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940d7f0>"": ""{\n    try {\n        Technorati.Result result =\n                technorati.getBloginfo(sub.getSiteURL());\n    }\n}""}",0,1,4,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/roller/roller-4.0.1/src/apache-roller-src-4.0.1/apps/planet/src/java/org/apache/roller/planet/tasks/TechnoratiRankingsTask.java,run,46,13.0,49.0,exception_happened
77,77,2,False,"[(95, 113), (69, 88), (79, 88), (36, 57), (115, 124), (36, 47), (49, 57)]","[(10, 10), (32, 32)]","[[(100, 100), (110, 110), (108, 108), (102, 102), (104, 104), (113, 113)], [(32, 32), (34, 34)], [(79, 79), (95, 95), (68, 68)], [(69, 69), (68, 68), (65, 65), (109, 109), (108, 108), (103, 103), (102, 102), (95, 95), (113, 113)], [(84, 84), (52, 52), (61, 61), (70, 70), (103, 103), (89, 89), (57, 57), (66, 66), (75, 75), (121, 121), (34, 34), (122, 122), (53, 53), (11, 11), (117, 117), (76, 76), (85, 85), (16, 16), (62, 62), (71, 71), (72, 72), (58, 58), (35, 35), (90, 90), (108, 108), (86, 86), (118, 118), (49, 49), (95, 95), (104, 104), (113, 113), (17, 17), (91, 91), (68, 68), (54, 54), (100, 100), (109, 109), (110, 110), (119, 119), (32, 32), (18, 18), (55, 55), (73, 73), (82, 82), (50, 50), (59, 59), (51, 51), (60, 60), (124, 124), (88, 88), (14, 14), (69, 69), (87, 87), (65, 65), (115, 115), (19, 19), (74, 74), (83, 83), (92, 92), (93, 93), (120, 120), (102, 102), (15, 15)], [(69, 69), (68, 68), (70, 70), (65, 65), (100, 100), (104, 104), (109, 109), (110, 110), (108, 108), (103, 103), (115, 115), (66, 66), (102, 102), (95, 95), (113, 113)], [(98, 98), (126, 126), (95, 95), (97, 97)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab80ac400>"": ""String ad = null;\nif(method.equals(EditPanel.GET)) {\n           ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Query_parametersA11yDesc\"");\n} else if(method.equals(EditPanel.POST)) {\n           ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Posted_dataA11yDesc\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132a30>"": ""final RequestData rd = monitorData.getRequestData();\nString method = rd.getAttributeValue(EditPanel.METHOD);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6280>"": ""{\n    String uploadFileMsg = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Upload_File_Not_Supported\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940d0d0>"": ""String msg2 = null;\nif (EditPanel.PUT.equals(method)) {\n    msg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Upload_File\"");\n} else if (method != null) {  // GET or POST\n    if(method.equals(EditPanel.GET)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Query_parameters\"");\n    } else if(method.equals(EditPanel.POST)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Posted_data\"");\n    }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9443ee0>"": ""int gridy = -1;\naddGridBagComponent(this, createTopSpacer(), 0, ++gridy,\n\t\t    fullGridWidth, 1, 0, 0, \n\t\t    java.awt.GridBagConstraints.WEST,\n\t\t    java.awt.GridBagConstraints.NONE,\n\t\t    topSpacerInsets,\n\t\t    0, 0);\nfinal RequestData rd = monitorData.getRequestData();\nString method = rd.getAttributeValue(EditPanel.METHOD);\nif (EditPanel.POST.equals(method)) {\n    addGridBagComponent(this, createHeaderLabel(NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Querystring_Header\""), NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_QuerystringA11yDesc\""), paramTable),\n                               0, ++gridy,\n\t\t\t1, 1, 0, 0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.NONE,\n\t\t\tlabelInsets,\n\t\t\t0, 0);\n    addGridBagComponent(this, queryStringText, 0, ++gridy,\n\t\t\tfullGridWidth, 1, 1.0, 0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.HORIZONTAL,\n\t\t\ttableInsets,\n\t\t\t0, 0);\nString msg2 = null;\nComponent msg2Label;\nif (EditPanel.PUT.equals(method)) {\n    msg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Upload_File\"");\n    msg2Label = createDataLabel(msg2);\n    addGridBagComponent(this, msg2Label, 0, ++gridy,\n\t\t\tfullGridWidth, 1, 0, 0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.NONE,\n\t\t\tlabelInsets,\n\t\t\t0, 0);\n    addGridBagComponent(this, uploadFileText, 0, ++gridy,\n\t\t\tfullGridWidth, 1, 1.0, 0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.HORIZONTAL,\n\t\t\tlabelInsets,\n\t\t\t0, 0);\n    addGridBagComponent(this, createGlue(), 0, ++gridy,\n\t\t\t1, 1, 1.0, 1.0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.BOTH,\n\t\t\tlabelInsets,\n\t\t\t0, 0);\n} else if (method != null) {  // GET or POST\n           String ad = null;\n    if(method.equals(EditPanel.GET)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Query_parameters\"");\n               ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Query_parametersA11yDesc\"");\n    } else if(method.equals(EditPanel.POST)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Posted_data\"");\n               ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Posted_dataA11yDesc\"");\n    }\n    msg2Label = createSortButtonLabel(msg2, paramTable, ad);\n    addGridBagComponent(this, msg2Label, 0, ++gridy,\n\t\t\t1, 1, 0, 0, \n\t\t\tjava.awt.GridBagConstraints.WEST,\n\t\t\tjava.awt.GridBagConstraints.NONE,\n\t\t\tlabelInsets,\n\t\t\t0, 0);\n    gridy = addParamTable(this, gridy);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132b20>"": ""final RequestData rd = monitorData.getRequestData();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6160>"": ""String msg2 = null;\nComponent msg2Label;\nif (EditPanel.PUT.equals(method)) {\n    msg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Upload_File\"");\n    msg2Label = createDataLabel(msg2);\n} else if (method != null) {  // GET or POST\n           String ad = null;\n    if(method.equals(EditPanel.GET)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Query_parameters\"");\n               ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Query_parametersA11yDesc\"");\n    } else if(method.equals(EditPanel.POST)) {\n\tmsg2 = NbBundle.getBundle(EditPanelQuery.class).getString(\""MON_Posted_data\"");\n               ad = NbBundle.getBundle(EditPanelQuery.class).getString(\""ACS_MON_Posted_dataA11yDesc\"");\n    }\n    msg2Label = createSortButtonLabel(msg2, paramTable, ad);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab808bf70>"": ""{  // GET or POST\n    Param[] params2 = rd.getParam();\n    if (params2 == null) params2 = new Param[0];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9443d90>"": ""int fullGridWidth = java.awt.GridBagConstraints.REMAINDER;""}",0,0,0,7,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/web.monitor/src/org/netbeans/modules/web/monitor/client/EditPanelQuery.java,setData,110,8.0,52.0,exception_happened
78,78,2,False,"[(29, 34)]","[(36, 36), (20, 20), (35, 35), (19, 19), (37, 37), (22, 22)]","[[(37, 37), (39, 39)], [(8, 8), (17, 17), (7, 7)], [(30, 30), (29, 29), (32, 32), (34, 34), (31, 31), (33, 33)], [(23, 23), (22, 22)], [(4, 4), (5, 5), (18, 18)], [(4, 4), (5, 5), (6, 6), (18, 18)], [(46, 46), (52, 52), (45, 45), (48, 48), (50, 50), (47, 47), (51, 51), (49, 49), (53, 53)], [(4, 4), (8, 8), (17, 17), (5, 5), (14, 14), (7, 7), (0, 0), (9, 9), (1, 1), (10, 10), (18, 18), (64, 64), (6, 6)], [(46, 46), (52, 52), (45, 45), (54, 54), (48, 48), (50, 50), (47, 47), (51, 51), (49, 49), (53, 53)], [(2, 2), (64, 64), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6c10>"": ""String message = MessageFormat.format(LaunchConfigurationsMessages.CompileErrorPromptStatusHandler_2, new String[]{projectMessage});"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6610>"": ""IPreferenceStore store = DebugUIPlugin.getDefault().getPreferenceStore();\nString pref = store.getString(IInternalDebugUIConstants.PREF_CONTINUE_WITH_COMPILE_ERROR);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940de50>"": ""Shell shell = DebugUIPlugin.getShell();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940d460>"": ""StringBuffer projectList = new StringBuffer();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132670>"": ""{\n\tObject arg = iterator.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6070>"": ""IPreferenceStore store = DebugUIPlugin.getDefault().getPreferenceStore();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6eb0>"": ""String projectMessage = null;\nif(projects.size() > 20) {\n\tprojectMessage = MessageFormat.format(LaunchConfigurationsMessages.CompileErrorProjectPromptStatusHandler_0, new Object[]{projectList.toString()});\n} else{\n\tprojectMessage = projectList.toString();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940dac0>"": ""int size = Math.min(20, projects.size());\nfor (int i = 0; i < size; i++) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940dcd0>"": ""int size = Math.min(20, projects.size());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132f10>"": ""{\n\tList args = (List) source;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132f40>"": ""{\nList args = (List) source;\nIterator iterator = args.iterator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffd550>"": ""MessageDialogWithToggle dialog = new MessageDialogWithToggle(shell, \n\t\ttitle, \n\t\tnull, \n\t\tmessage, \n\t\tMessageDialog.QUESTION,\n\t\tnew String[] {IDialogConstants.PROCEED_LABEL, IDialogConstants.CANCEL_LABEL}, \n\t\t0,\n\t\tLaunchConfigurationsMessages.CompileErrorProjectPromptStatusHandler_1,\n\t\tfalse);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132f70>"": ""{\nILaunchConfiguration config = null;\nif (source instanceof List) {\n\tList args = (List) source;\n\tIterator iterator = args.iterator();\n\twhile (iterator.hasNext()) {\n\t\tObject arg = iterator.next();\n\t\tif (arg instanceof ILaunchConfiguration) {\n\t\t\tconfig = (ILaunchConfiguration) arg;\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffddc0>"": ""MessageDialogWithToggle dialog = new MessageDialogWithToggle(shell, \n\t\ttitle, \n\t\tnull, \n\t\tmessage, \n\t\tMessageDialog.QUESTION,\n\t\tnew String[] {IDialogConstants.PROCEED_LABEL, IDialogConstants.CANCEL_LABEL}, \n\t\t0,\n\t\tLaunchConfigurationsMessages.CompileErrorProjectPromptStatusHandler_1,\n\t\tfalse);\n      int open = dialog.open();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab81321c0>"": ""{\n\tList projects = new ArrayList();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6fd0>"": ""String title =  LaunchConfigurationsMessages.CompileErrorPromptStatusHandler_0;""}",2,1,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/debug/internal/ui/launchConfigurations/CompileErrorProjectPromptStatusHandler.java,handleStatus,39,13.0,42.0,exception_happened
79,79,2,False,"[(1, 29), (5, 18), (9, 17), (21, 29)]","[(39, 39), (5, 5)]","[[(18, 18), (5, 5), (7, 7)], [(1, 1), (55, 55), (0, 0)], [(3, 3), (55, 55), (0, 0)], [(28, 28), (25, 25), (24, 24)], [(10, 10), (12, 12), (16, 16)], [(45, 45), (38, 38), (39, 39), (40, 40), (50, 50), (51, 51), (49, 49)], [(26, 26), (25, 25), (28, 28), (24, 24)], [(45, 45), (44, 44), (39, 39), (37, 37), (51, 51), (40, 40)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab8132040>"": ""{\n    Node vn = getNode(v);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9434460>"": ""{\n    Collection<Vertex> vertices = originalGraph.getOriginalGraph().getVertices();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab94346d0>"": ""{\n    Collection<Face> faces = originalGraph.getFaces();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132cd0>"": ""{\n    Face nf = originalGraph.getOppositeFace(f, d);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8132af0>"": ""{\n    Collection<Dart> darts = f.getDartsFrom(v);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940db20>"": ""int sinkProduction = 0;\nfor (Node n : getNodes()) {\n    if (n.production > 0) {\n    } else if (n.production < 0) {\n        sinkProduction += n.production;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940dd30>"": ""{\n    Face nf = originalGraph.getOppositeFace(f, d);\n    Node nfn = getNode(nf);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9434d60>"": ""Vertex v : vertices"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940d5b0>"": ""Node n : getNodes()"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab940dbe0>"": ""int sourceProduction = 0;\nfor (Node n : getNodes()) {\n    if (n.production > 0) {\n        sourceProduction += n.production;\n    }\n}""}",6,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/api.visual/src/org/netbeans/modules/visual/graph/layout/orthogonalsupport/FlowNetwork.java,createGraph,96,10.0,43.0,exception_happened
80,80,2,False,"[(32, 37)]","[(39, 39), (32, 32), (33, 33)]","[[(60, 60), (2, 2), (0, 0)], [(52, 52), (20, 20), (39, 39), (48, 48), (2, 2), (57, 57), (34, 34), (7, 7), (58, 58), (44, 44), (40, 40), (49, 49), (36, 36), (45, 45), (6, 6), (32, 32), (50, 50), (51, 51), (60, 60), (0, 0), (9, 9), (46, 46), (1, 1), (37, 37), (47, 47), (33, 33)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffde20>"": ""final int UNEXPECTED_MODIFIERS = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccFinal | ClassFileConstants.AccStatic | ClassFileConstants.AccTransient | ClassFileConstants.AccVolatile);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9405460>"": ""{\r\n\tfinal ReferenceBinding declaringClass = fieldBinding.declaringClass;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffd1c0>"": ""int realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffd190>"": ""int accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9405bb0>"": ""{\r\nint modifiers = fieldBinding.modifiers;\nfinal ReferenceBinding declaringClass = fieldBinding.declaringClass;\nif (declaringClass.isInterface()) {\r\n\tfinal int IMPLICIT_MODIFIERS = ClassFileConstants.AccPublic | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal;\n\tmodifiers |= IMPLICIT_MODIFIERS;\n}\nint realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;\nfinal int UNEXPECTED_MODIFIERS = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccFinal | ClassFileConstants.AccStatic | ClassFileConstants.AccTransient | ClassFileConstants.AccVolatile);\nif ((realModifiers & UNEXPECTED_MODIFIERS) != 0) {\r\n\tmodifiers &= ~ExtraCompilerModifiers.AccJustFlag | ~UNEXPECTED_MODIFIERS;\n}\nint accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);\nif ((accessorBits & (accessorBits - 1)) > 1) {\r\n\tif ((accessorBits & ClassFileConstants.AccPublic) != 0) {\r\n\t\tif ((accessorBits & ClassFileConstants.AccProtected) != 0)\r\n\t\t\tmodifiers &= ~ClassFileConstants.AccProtected;\n\t\tif ((accessorBits & ClassFileConstants.AccPrivate) != 0)\r\n\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;\n\t} else if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {\r\n\t\tmodifiers &= ~ClassFileConstants.AccPrivate;\n\t}\n}\nif (fieldDecl.initialization == null && (modifiers & ClassFileConstants.AccFinal) != 0)\r\n\tmodifiers |= ExtraCompilerModifiers.AccBlankFinal;\n""}",0,0,0,14,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java,checkAndSetModifiersForField,624,17.0,43.0,exception_happened
81,81,2,False,"[(19, 44), (29, 44), (19, 28), (37, 44)]","[(6, 6), (3, 3), (7, 7), (26, 26)]","[[(17, 17), (14, 14), (23, 23), (16, 16), (27, 27), (24, 24), (25, 25), (20, 20), (26, 26), (19, 19), (28, 28), (21, 21), (22, 22), (15, 15)], [(7, 7), (9, 9), (13, 13), (10, 10), (12, 12)], [(18, 18), (14, 14), (16, 16), (15, 15)], [(28, 28), (21, 21), (20, 20)], [(8, 8), (7, 7), (13, 13), (10, 10), (11, 11)], [(17, 17), (14, 14), (16, 16), (15, 15)], [(14, 14), (16, 16), (15, 15)], [(14, 14), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3c10>"": ""float offsetX = (borderExtra ? 2 * borderWidth : borderWidth);\noffsetX = Math.max(offsetX, 1);\nfloat offX = Math.min(bw2, offsetX);\nfloat wt = box.getWidth() - 2 * offX;\nfloat fsize = fontSize;\nif (fsize == 0) {\n    float bw = ufont.getWidthPoint(text, 1);\n    if (bw == 0)\n        fsize = 12;\n    else\n        fsize = wt / bw;\n    float nfsize = h / (ufont.getFontDescriptor(BaseFont.ASCENT, 1));\n    fsize = Math.min(fsize, nfsize);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9405a60>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;\nfloat bw2 = borderWidth;\nif (borderExtra) {\n    bw2 *= 2;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3880>"": ""float offsetX = (borderExtra ? 2 * borderWidth : borderWidth);\noffsetX = Math.max(offsetX, 1);\nfloat offX = Math.min(bw2, offsetX);\nfloat ht = box.getHeight() - 2 * offX;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d3490>"": ""{\n    float bw = ufont.getWidthPoint(text, 1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffdca0>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;\nfloat h = box.getHeight() - borderWidth * 2;\nif (borderExtra) {\n    h -= borderWidth * 2;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d30a0>"": ""float offsetX = (borderExtra ? 2 * borderWidth : borderWidth);\noffsetX = Math.max(offsetX, 1);\nfloat offX = Math.min(bw2, offsetX);\nfloat wt = box.getWidth() - 2 * offX;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92ce6d0>"": ""PdfAppearance app = getBorderAppearance();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffdee0>"": ""boolean borderExtra = borderStyle == PdfBorderDictionary.STYLE_BEVELED || borderStyle == PdfBorderDictionary.STYLE_INSET;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d64f0>"": ""float offsetX = (borderExtra ? 2 * borderWidth : borderWidth);\noffsetX = Math.max(offsetX, 1);\nfloat offX = Math.min(bw2, offsetX);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7ffd910>"": ""BaseFont ufont = getRealFont();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab92d6b50>"": ""float offsetX = (borderExtra ? 2 * borderWidth : borderWidth);\noffsetX = Math.max(offsetX, 1);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9434dc0>"": ""float nfsize = h / (ufont.getFontDescriptor(BaseFont.ASCENT, 1));""}",0,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/itext/itext-5.0.3/src/src/core/com/itextpdf/text/pdf/RadioCheckField.java,getAppearance,214,9.0,42.0,exception_happened
82,82,2,False,"[(45, 62), (52, 60), (31, 39), (45, 51)]","[(52, 52), (31, 31), (15, 15), (26, 26)]","[[(56, 56), (59, 59), (54, 54), (55, 55)], [(10, 10), (45, 45), (9, 9)], [(19, 19), (21, 21), (20, 20), (40, 40)], [(10, 10), (45, 45), (11, 11), (9, 9)], [(61, 61), (47, 47), (46, 46)], [(17, 17), (18, 18), (43, 43), (19, 19)], [(19, 19), (20, 20), (40, 40)], [(34, 34), (38, 38), (33, 33)], [(48, 48), (61, 61), (47, 47), (46, 46)], [(17, 17), (44, 44), (16, 16), (15, 15)], [(17, 17), (16, 16), (43, 43), (44, 44), (19, 19), (18, 18), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab2a8f130>"": ""for (int k = 0, max3 =  upperBounds.length; k < max3; k++) {\n\tTypeBinding otherUpperBound = upperBounds[k];\n\tif ((otherUpperBound.tagBits & TagBits.ContainsNestedTypeReferences) != 0) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426970>"": ""{\nParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) typeBinding;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352250>"": ""{\n\tWildcardBinding wildcardBinding = (WildcardBinding) argument;\n\tTypeBinding bound = wildcardBinding.bound;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33afa60>"": ""TypeBinding[] upperBounds = typeVariableBinding.otherUpperBounds();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426280>"": ""{\nParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) typeBinding;\nReferenceBinding genericType = parameterizedTypeBinding.genericType();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352af0>"": ""ReferenceBinding superclass = wildcardBinding.superclass();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33af310>"": ""{\nTypeVariableBinding typeVariableBinding = (TypeVariableBinding) typeBinding;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352340>"": ""for (int j = 0, max2 = arguments.length; j < max2; j++) {\n\tTypeBinding argument = arguments[j];\n\tif (argument.isWildcard()) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33523a0>"": ""{\nWildcardBinding wildcardBinding = (WildcardBinding) argument;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9443460>"": ""k++) {\nReferenceBinding superInterface = superInterfaces[k];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab94434c0>"": ""ReferenceBinding[] superInterfaces = wildcardBinding.superInterfaces();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33af4c0>"": ""{\nTypeVariableBinding typeVariableBinding = (TypeVariableBinding) typeBinding;\nTypeBinding upperBound = typeVariableBinding.upperBound();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33525e0>"": ""TypeBinding[] arguments = parameterizedTypeBinding.arguments;\nif (arguments != null) {\n\tfor (int j = 0, max2 = arguments.length;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352640>"": ""TypeBinding[] arguments = parameterizedTypeBinding.arguments;\nif (arguments != null) {\n\tfor (int j = 0, max2 = arguments.length; j < max2; j++) {\n\t\tTypeBinding argument = arguments[j];\n\t\tif (argument.isWildcard()) {\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426760>"": ""TypeBinding[] arguments = parameterizedTypeBinding.arguments;""}",6,0,0,16,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/compiler/util/Util.java,recordNestedType,1008,25.0,48.0,exception_happened
83,83,1,False,[],[],"[[(67, 67), (0, 0)], [(43, 43), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (8, 8), (17, 17), (27, 27), (36, 36), (13, 13), (32, 32), (18, 18), (41, 41), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(43, 43), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (3, 3), (12, 12), (21, 21), (67, 67), (22, 22), (31, 31), (40, 40), (8, 8), (17, 17), (27, 27), (36, 36), (13, 13), (32, 32), (18, 18), (41, 41), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab3352ee0>"": ""@Test public void testOffChannel() throws Exception {\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352340>"": ""{\n    TokenSource lexer = // simulate input \"" x =34  ;\\n\""\n        new TokenSource() {\n            int i = 0;\n            WritableToken[] tokens = {\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\""x\""),\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\""=\""),\n                new CommonToken(1,\""34\""),\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\"";\""),\n                new CommonToken(1,\""\\n\"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(Token.EOF,\""\"")\n            };\n            @Override\n            public Token nextToken() {\n                return tokens[i++];\n            }\n            @Override\n            public String getSourceName() { return \""test\""; }\n@Override\npublic int getCharPositionInLine() {\n\treturn 0;\n}\n@Override\npublic int getLine() {\n\treturn 0;\n}\n@Override\npublic CharStream getInputStream() {\n\treturn null;\n}\n\n@Override\npublic void setTokenFactory(TokenFactory<?> factory) {\n}\n\n@Override\npublic TokenFactory<?> getTokenFactory() {\n\treturn null;\n}\n;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33529a0>"": ""{\n    TokenSource lexer = // simulate input \"" x =34  ;\\n\""\n        new TokenSource() {\n            int i = 0;\n            WritableToken[] tokens = {\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\""x\""),\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\""=\""),\n                new CommonToken(1,\""34\""),\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\"" \"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(1,\"";\""),\n                new CommonToken(1,\""\\n\"") {{channel = Lexer.HIDDEN;}},\n                new CommonToken(Token.EOF,\""\"")\n            };\n            @Override\n            public Token nextToken() {\n                return tokens[i++];\n            }\n            @Override\n            public String getSourceName() { return \""test\""; }\n@Override\npublic int getCharPositionInLine() {\n\treturn 0;\n}\n@Override\npublic int getLine() {\n\treturn 0;\n}\n@Override\npublic CharStream getInputStream() {\n\treturn null;\n}\n\n@Override\npublic void setTokenFactory(TokenFactory<?> factory) {\n}\n\n@Override\npublic TokenFactory<?> getTokenFactory() {\n\treturn null;\n}\n;\n}""}",0,0,0,0,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/antlr/antlr-4.0/src/antlr4-4.0/tool/test/org/antlr/v4/test/TestCommonTokenStream.java,testOffChannel,53,1.0,44.0,exception_happened
84,84,2,False,[],"[(5, 5)]","[[(5, 5), (9, 9)], [(41, 41), (1, 1), (0, 0)], [(17, 17), (5, 5), (14, 14), (7, 7), (16, 16), (20, 20), (13, 13), (39, 39), (19, 19), (12, 12), (18, 18), (6, 6), (15, 15)], [(39, 39), (14, 14), (15, 15), (13, 13)], [(5, 5), (14, 14), (7, 7), (23, 23), (24, 24), (25, 25), (13, 13), (39, 39), (10, 10), (21, 21), (6, 6), (22, 22), (15, 15)], [(27, 27), (35, 35), (26, 26)], [(6, 6), (5, 5), (7, 7), (13, 13)], [(6, 6), (5, 5), (7, 7)], [(39, 39), (14, 14), (13, 13)], [(41, 41), (1, 1), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab3352640>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\nPdfPageLabelFormat[] formats = new PdfPageLabelFormat[numberTree.size()];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab27ece50>"": ""{\n    PdfDictionary dict = reader.getCatalog();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352280>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\nInteger numbers[] = new Integer[numberTree.size()];\nnumbers = numberTree.keySet().toArray(numbers);\nint pagecount;\nfor (int k = 0; k < numbers.length; ++k) {\n    Integer key = numbers[k];\n    PdfDictionary d = (PdfDictionary)PdfReader.getPdfObjectRelease(numberTree.get(key));\n    if (d.contains(PdfName.ST)) {\n        pagecount = ((PdfNumber)d.get(PdfName.ST)).intValue();\n    } else {\n        pagecount = 1;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33528e0>"": ""++k) {\n    Integer key = numbers[k];\n    PdfDictionary d = (PdfDictionary)PdfReader.getPdfObjectRelease(numberTree.get(key));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab33524f0>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\nInteger numbers[] = new Integer[numberTree.size()];\nnumbers = numberTree.keySet().toArray(numbers);\nString prefix;\nfor (int k = 0; k < numbers.length; ++k) {\n    Integer key = numbers[k];\n    PdfDictionary d = (PdfDictionary)PdfReader.getPdfObjectRelease(numberTree.get(key));\n    if (d.contains(PdfName.P)) {\n        prefix = ((PdfString)d.get(PdfName.P)).toUnicodeString();\n    } else {\n        prefix = \""\"";\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352520>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab9426b20>"": ""{\n    char type = ((PdfName)d.get(PdfName.S)).toString().charAt(1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352d90>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\nInteger numbers[] = new Integer[numberTree.size()];\nnumbers = numberTree.keySet().toArray(numbers);\nfor (int k = 0; k < numbers.length; ++k) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352190>"": ""HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\nInteger numbers[] = new Integer[numberTree.size()];\nnumbers = numberTree.keySet().toArray(numbers);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3352bb0>"": ""++k) {\n    Integer key = numbers[k];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab27ecdc0>"": ""{\n    PdfDictionary dict = reader.getCatalog();\n    PdfDictionary labels = (PdfDictionary)PdfReader.getPdfObjectRelease(dict.get(PdfName.PAGELABELS));\n}""}",2,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/itext/itext-5.0.3/src/src/core/com/itextpdf/text/pdf/PdfPageLabels.java,getPageLabelFormats,229,10.0,46.0,exception_happened
85,85,2,False,"[(35, 57), (37, 57), (38, 57), (39, 48), (39, 46), (50, 56)]","[(8, 8), (6, 6), (35, 35), (13, 13), (21, 21), (37, 37), (47, 47), (15, 15)]","[[(30, 30), (31, 31), (25, 25), (26, 26), (33, 33), (28, 28), (34, 34), (22, 22), (24, 24)], [(50, 50), (54, 54), (49, 49), (57, 57)], [(39, 39), (41, 41), (46, 46)], [(8, 8), (16, 16), (9, 9), (24, 24), (25, 25), (13, 13), (26, 26), (28, 28), (6, 6), (34, 34), (15, 15)], [(46, 46), (43, 43), (38, 38), (39, 39), (37, 37), (41, 41), (42, 42)], [(39, 39), (41, 41), (46, 46), (42, 42)], [(1, 1), (60, 60), (0, 0)], [(34, 34), (25, 25), (26, 26)], [(60, 60), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab2633c10>"": ""String jobName = null;\nhr = iwebFrame.dataSource (result);\nif (hr == COM.S_OK && result[0] != 0) {\n\tIWebDataSource dataSource = new IWebDataSource (result[0]);\n\thr = dataSource.pageTitle (result);\n\tif (hr == COM.S_OK && result[0] != 0) {\n\t\tjobName = WebKit.extractBSTR (result[0]);\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fea820>"": ""{\n\tfor (int i = 0; i < pageCount; i++) {\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fea250>"": ""int rc = OS.StartDoc (printDC, di);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fcba60>"": ""{\nTCHAR buffer = new TCHAR (0, jobName, true);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643c70>"": ""int /*long*/ printDC = pd.hDC;\nint /*long*/[] result = new int /*long*/[1];\nint hr = iwebFrame.QueryInterface (WebKit_win32.IID_IWebFramePrivate, result);\nIWebFramePrivate privateFrame = new IWebFramePrivate (result[0]);\nint[] count = new int[1];\nhr = privateFrame.getPrintedPageCount (printDC, count);\nhr = iwebFrame.dataSource (result);\nif (hr == COM.S_OK && result[0] != 0) {\n\tIWebDataSource dataSource = new IWebDataSource (result[0]);\n\thr = dataSource.pageTitle (result);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643eb0>"": ""IWebFramePrivate privateFrame = new IWebFramePrivate (result[0]);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fcb6d0>"": ""int /*long*/ hHeap = OS.GetProcessHeap ();\nint /*long*/ lpszDocName = 0;\nif (jobName != null && jobName.length () != 0) {\n\tTCHAR buffer = new TCHAR (0, jobName, true);\n\tint byteCount = buffer.length () * TCHAR.sizeof;\n\tlpszDocName = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2633ee0>"": ""int pageCount = count[0];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fcbaf0>"": ""{\nTCHAR buffer = new TCHAR (0, jobName, true);\nint byteCount = buffer.length () * TCHAR.sizeof;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fcb100>"": ""DOCINFO di = new DOCINFO ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263eb20>"": ""int /*long*/[] result = new int /*long*/[1];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1fcb580>"": ""int /*long*/ hHeap = OS.GetProcessHeap ();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e340>"": ""int /*long*/ printDC = pd.hDC;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263eb80>"": ""{\nIWebFrame iwebFrame = new IWebFrame (frame);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643fa0>"": ""int[] count = new int[1];"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2633bb0>"": ""{\nIWebDataSource dataSource = new IWebDataSource (result[0]);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263ebe0>"": ""{\n\tPRINTDLG pd = new PRINTDLG ();\n}""}",2,0,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/swt/browser/WebUIDelegate.java,printFrame,238,15.0,53.0,exception_happened
86,86,2,False,"[(33, 48)]","[(8, 8), (65, 65), (51, 51), (7, 7)]","[[(76, 76), (2, 2), (0, 0)], [(23, 23), (27, 27), (25, 25), (20, 20), (26, 26), (19, 19), (28, 28), (21, 21), (49, 49), (24, 24)], [(44, 44), (36, 36), (35, 35), (33, 33)], [(44, 44), (39, 39), (35, 35), (41, 41), (40, 40)], [(19, 19), (49, 49), (20, 20)], [(14, 14), (16, 16), (13, 13), (12, 12), (18, 18), (50, 50)], [(39, 39), (44, 44), (35, 35)], [(50, 50), (12, 12), (14, 14), (13, 13)], [(54, 54), (13, 13), (10, 10), (51, 51), (53, 53)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab1da96a0>"": ""{\n    final String projectName = IndicatorProjectManager.getProjectName(zipFile);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e0a0>"": ""{\n    final String name = zipEntry.getName();\n    String outFilename = null;\n    if (name.equalsIgnoreCase(operatorIndicatorFilename)) {\n        outFilename = this.getOperatorIndicatorFilename(projectName);\n    }\n    else if (name.equalsIgnoreCase(jHotDrawFilename)) {\n        outFilename = this.getJHotDrawFilename(projectName);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab94438b0>"": ""OutputStream out = null;\ntry {\n    out = new FileOutputStream(outFilename);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643ee0>"": ""{\n    byte[] buf = new byte[1024];\n    int len;\n    while ((len = in.read(buf)) > 0)\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab26338e0>"": ""final OperatorIndicator operatorIndicator = (OperatorIndicator)Utils.fromXML(OperatorIndicator.class, this.getOperatorIndicatorFilename(projectName));"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e700>"": ""{\n    final String name = zipEntry.getName();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9910>"": ""final String jHotDrawFilename = projectName + JHOTDRAW_RESERVE_WORD + \"".xml\"";"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e160>"": ""ZipInputStream in = null;\ntry {\n    in = new ZipInputStream(new FileInputStream(zipFile));\n    ZipEntry zipEntry = null;\n    while ((zipEntry = in.getNextEntry()) != null)\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab26437f0>"": ""{\n    byte[] buf = new byte[1024];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9790>"": ""final String operatorIndicatorFilename = projectName + \"".xml\"";"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da95b0>"": ""ZipInputStream in = null;\ntry {\n    in = new ZipInputStream(new FileInputStream(zipFile));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643d90>"": ""IOException ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da91f0>"": ""boolean status = true;\ntry {\ncatch (IOException ex) {\n    status = false;\n}""}",0,2,2,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jstock/jstock-1.0.7c/src/jstock/src/org/yccheok/jstock/gui/IndicatorProjectManager.java,install,193,11.0,46.0,exception_happened
87,87,1,False,"[(33, 39), (54, 60), (26, 39), (47, 60)]",[],"[[(6, 6), (67, 67), (2, 2), (0, 0)], [(67, 67), (9, 9), (2, 2), (0, 0)], [(10, 10), (67, 67), (2, 2), (0, 0)], [(43, 43), (48, 48), (2, 2), (57, 57), (7, 7), (58, 58), (21, 21), (67, 67), (49, 49), (22, 22), (8, 8), (27, 27), (36, 36), (6, 6), (63, 63), (64, 64), (14, 14), (0, 0), (9, 9), (1, 1), (10, 10), (28, 28), (37, 37), (42, 42)], [(1, 1), (67, 67), (0, 0)], [(67, 67), (2, 2), (7, 7), (0, 0)], [(67, 67), (14, 14), (0, 0)], [(12, 12), (3, 3), (67, 67), (0, 0)], [(67, 67), (2, 2), (0, 0)], [(67, 67), (3, 3), (0, 0)], [(8, 8), (67, 67), (2, 2), (0, 0)], [(8, 8), (14, 14), (27, 27), (7, 7), (57, 57), (0, 0), (9, 9), (1, 1), (36, 36), (63, 63), (48, 48), (10, 10), (21, 21), (67, 67), (2, 2), (6, 6), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9c10>"": ""{\n    Month nov2006 = new Month(11, 2006);\n    Date d0 = new Date(nov2006.getFirstMillisecond());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263ec40>"": ""{\n    Month nov2006 = new Month(11, 2006);\n    Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e040>"": ""{\n    Month nov2006 = new Month(11, 2006);\n    Date d4 = new Date(nov2006.getLastMillisecond());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2633640>"": ""{\n    MyDateAxis axis = new MyDateAxis(\""Month\"");\n    Month nov2006 = new Month(11, 2006);\n    Date d0 = new Date(nov2006.getFirstMillisecond());\n    Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);\n    Date d2 = new Date(nov2006.getMiddleMillisecond());\n    Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);\n    Date d4 = new Date(nov2006.getLastMillisecond());\n    DateTickUnit unit = new DateTickUnit(DateTickUnit.MONTH, 3);\n    Date psd = axis.previousStandardDate(d0, unit);\n    Date nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d1, unit);\n    nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d1, unit);\n    nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d2, unit);\n    nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d3, unit);\n    nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d3, unit);\n    nsd = unit.addToDate(psd);\n    psd = axis.previousStandardDate(d4, unit);\n    nsd = unit.addToDate(psd);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9280>"": ""{\n    MyDateAxis axis = new MyDateAxis(\""Month\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da96a0>"": ""{\n    Month nov2006 = new Month(11, 2006);\n    Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e8e0>"": ""{\n    DateTickUnit unit = new DateTickUnit(DateTickUnit.MONTH, 3);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e730>"": ""{\n    Month dec2006 = new Month(12, 2006);\n    Date end = new Date(dec2006.getLastMillisecond());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9160>"": ""{\n    Month nov2006 = new Month(11, 2006);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9f70>"": ""{\n    Month dec2006 = new Month(12, 2006);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9580>"": ""{\n    Month nov2006 = new Month(11, 2006);\n    Date d2 = new Date(nov2006.getMiddleMillisecond());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263edc0>"": ""{\n    MyDateAxis axis = new MyDateAxis(\""Month\"");\n    Month nov2006 = new Month(11, 2006);\n    Date d0 = new Date(nov2006.getFirstMillisecond());\n    Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);\n    Date d2 = new Date(nov2006.getMiddleMillisecond());\n    Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);\n    Date d4 = new Date(nov2006.getLastMillisecond());\n    DateTickUnit unit = new DateTickUnit(DateTickUnit.MONTH, 3);\n    Date psd = axis.previousStandardDate(d0, unit);\n    psd = axis.previousStandardDate(d1, unit);\n    psd = axis.previousStandardDate(d1, unit);\n    psd = axis.previousStandardDate(d2, unit);\n    psd = axis.previousStandardDate(d3, unit);\n    psd = axis.previousStandardDate(d3, unit);\n    psd = axis.previousStandardDate(d4, unit);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jfreechart/jfreechart-1.0.13/src/jfreechart-1.0.13/tests/org/jfree/chart/axis/junit/DateAxisTests.java,testPreviousStandardDateMonthB,554,1.0,50.0,exception_happened
88,88,1,False,"[(27, 47), (49, 74), (40, 47), (14, 22), (33, 38), (49, 58), (60, 74)]",[],"[[(4, 4), (89, 89), (0, 0)], [(89, 89), (7, 7), (0, 0)], [(33, 33), (89, 89), (0, 0)], [(89, 89), (16, 16), (0, 0)], [(89, 89), (60, 60), (0, 0)], [(9, 9), (89, 89), (0, 0)], [(5, 5), (89, 89), (0, 0)], [(6, 6), (89, 89), (0, 0)], [(89, 89), (29, 29), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab263ee20>"": ""{\n    javax.swing.JMenu fileMenu = new javax.swing.JMenu();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9640>"": ""{\n    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db00d0>"": ""{\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sampledesktopapplication.SampleDesktopApplication.class).getContext().getActionMap(SampleDesktopView.class, this);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab12abf10>"": ""{\n    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab12c0520>"": ""{\n    javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9730>"": ""{\njavax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e550>"": ""{\n    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263ed60>"": ""{\n    javax.swing.JMenu helpMenu = new javax.swing.JMenu();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0d90>"": ""{\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sampledesktopapplication.SampleDesktopApplication.class).getContext().getResourceMap(SampleDesktopView.class);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/form/test/qa-functional/data/SampleDesktopApplication/src/sampledesktopapplication/SampleDesktopView.java,initComponents,101,1.0,45.0,exception_happened
89,89,2,False,"[(35, 40)]","[(8, 8), (5, 5), (15, 15)]","[[(19, 19), (18, 18), (48, 48)], [(21, 21), (47, 47), (26, 26)], [(52, 52), (54, 54), (57, 57), (56, 56), (51, 51), (53, 53)], [(5, 5), (7, 7)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab263eca0>"": ""ThreadResources resources = getThreadResources();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643790>"": ""{\n  int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e310>"": ""SegmentTermEnum enumerator = resources.termEnum;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0f10>"": ""{\n  int numScans = enumerator.scanTo(term);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab12ab940>"": ""final int indexPos;\nif (tiOrd != null) {\n  indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n} else {\n  indexPos = index.getIndexOffset(term,termBytesRef);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e790>"": ""final CloneableTerm cacheKey = new CloneableTerm(term);\nTermInfoAndOrd tiOrd = termsCache.get(cacheKey);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e7c0>"": ""final CloneableTerm cacheKey = new CloneableTerm(term);""}",0,0,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/apache/lucene/index/TermInfosReader.java,get,176,18.0,44.0,exception_happened
90,90,2,False,"[(47, 57), (48, 53)]",[],"[[(43, 43), (29, 29), (39, 39), (2, 2), (30, 30), (7, 7), (25, 25), (58, 58), (26, 26), (44, 44), (3, 3), (31, 31), (27, 27), (13, 13), (5, 5), (0, 0), (10, 10), (28, 28), (6, 6), (33, 33)], [(3, 3), (58, 58), (0, 0)], [(10, 10), (58, 58), (0, 0)], [(30, 30), (27, 27), (43, 43), (29, 29), (26, 26), (28, 28)], [(10, 10), (58, 58), (0, 0)], [(2, 2), (58, 58), (0, 0)], [(10, 10), (44, 44), (13, 13)], [(39, 39), (36, 36), (31, 31), (35, 35)], [(5, 5), (0, 0), (25, 25), (58, 58), (10, 10), (6, 6)], [(28, 28), (27, 27), (43, 43), (26, 26)], [(5, 5), (27, 27), (7, 7), (0, 0), (43, 43), (25, 25), (58, 58), (13, 13), (26, 26), (10, 10), (28, 28), (3, 3), (44, 44), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0e50>"": ""{\nboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;\nboolean joinLines = this.formatter.preferences.join_lines_in_comments;\nint textStart = text.sourceStart;\nint nextStart = textStart;\nint startLine = Util.getLineNumber(textStart, this.lineEnds, 0, this.maxLines);\nfor (int idx=0, max=text.separatorsPtr; idx<=max ; idx++) {\n\tint end = (int) (text.separators[idx] >>> 32);\n\tnextStart = (int) text.separators[idx];\n\tif (!clearBlankLines || !joinLines) {\n\t\tint endLine = Util.getLineNumber(end, this.lineEnds, startLine-1, this.maxLines);\n\t\tstartLine = Util.getLineNumber(nextStart, this.lineEnds, endLine-1, this.maxLines);\n\t\tint gapLine = endLine;\n\t\tif (joinLines) gapLine++;\n\t\tif (startLine > gapLine) {\n\t\t\ttextStart = nextStart;\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643280>"": ""{\n\tboolean joinLines = this.formatter.preferences.join_lines_in_comments;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db08b0>"": ""{\nfor (int idx=0, max=text.separatorsPtr; idx<=max ; idx++) {\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da94c0>"": ""{\nint endLine = Util.getLineNumber(end, this.lineEnds, startLine-1, this.maxLines);\nstartLine = Util.getLineNumber(nextStart, this.lineEnds, endLine-1, this.maxLines);\nint gapLine = endLine;\nif (joinLines) gapLine++;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0b20>"": ""{\n\tfor (int idx=0, max=text.separatorsPtr;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab2643d60>"": ""{\nboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0160>"": ""idx++) {\nint end = (int) (text.separators[idx] >>> 32);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263eb80>"": ""{\n\tint newLines = startLine - endLine;\n\tif (clearBlankLines) newLines = 1;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0790>"": ""{\nint textStart = text.sourceStart;\nint nextStart = textStart;\nfor (int idx=0, max=text.separatorsPtr; idx<=max ; idx++) {\n\tnextStart = (int) text.separators[idx];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da93a0>"": ""{\nint endLine = Util.getLineNumber(end, this.lineEnds, startLine-1, this.maxLines);\nstartLine = Util.getLineNumber(nextStart, this.lineEnds, endLine-1, this.maxLines);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0bb0>"": ""{\nboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;\nboolean joinLines = this.formatter.preferences.join_lines_in_comments;\nint textStart = text.sourceStart;\nint nextStart = textStart;\nint startLine = Util.getLineNumber(textStart, this.lineEnds, 0, this.maxLines);\nfor (int idx=0, max=text.separatorsPtr; idx<=max ; idx++) {\n\tint end = (int) (text.separators[idx] >>> 32);\n\tnextStart = (int) text.separators[idx];\n\tif (!clearBlankLines || !joinLines) {\n\t\tint endLine = Util.getLineNumber(end, this.lineEnds, startLine-1, this.maxLines);\n\t\tstartLine = Util.getLineNumber(nextStart, this.lineEnds, endLine-1, this.maxLines);\n\t}\n}\n""}",2,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/formatter/Scribe.java,printJavadocText,4294,11.0,41.0,exception_happened
91,91,2,False,"[(37, 66), (56, 63), (39, 51)]","[(24, 24)]","[[(58, 58), (64, 64), (57, 57)], [(16, 16), (35, 35), (19, 19), (18, 18), (15, 15), (24, 24)], [(65, 65), (56, 56), (55, 55)], [(36, 36), (68, 68), (66, 66)], [(56, 56), (43, 43), (52, 52), (61, 61), (38, 38), (39, 39), (48, 48), (57, 57), (66, 66), (53, 53), (62, 62), (58, 58), (44, 44), (67, 67), (49, 49), (40, 40), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (55, 55), (64, 64), (50, 50), (41, 41), (59, 59), (51, 51), (60, 60), (46, 46), (65, 65), (37, 37), (47, 47), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aae921e80>"": ""{\n  ItemIF item = (ItemIF) it.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e0a0>"": ""{\n  try {\n    ChannelFormat format =\n      FormatDetector.getFormat(channel.getLocation());\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aae921af0>"": "" else {\n Iterator it = tempChannel.getItems().iterator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e550>"": ""try {\n    builder.endTransaction();\n} catch (ParseException pe) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263eb80>"": ""UnsupportedFormatException ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab12ab790>"": ""{\n  synchronized (channel) {\n    builder.beginTransaction();\n    ChannelIF tempChannel =\n      FeedParser.parse(tempBuilder, channel.getLocation());\n    logger.info(\n      \""Updating channel from \""\n        + channel.getLocation()\n        + \"": \""\n        + tempChannel\n        + \""(new)    \""\n        + channel\n        + \""(old)\"");\n    InformaUtils.copyChannelProperties(tempChannel, channel);\n    builder.update(channel);\n    channel.setLastUpdated(new Date());\n    // compare with existing items, only add new ones\n    if (tempChannel.getItems().isEmpty()) {\n      logger.warn(\""No items found in channel \"" + channel);\n    } else {\n      Iterator it = tempChannel.getItems().iterator();\n      while (it.hasNext()) {\n        ItemIF item = (ItemIF) it.next();\n        if (!channel.getItems().contains(item)) {\n          logger.debug(\""Found new item: \"" + item);\n          channel.addItem(builder.createItem(null, item));\n          //                                                              }\n        }\n      } // while more items\n    }\n    builder.endTransaction();\n  }\n}""}",0,1,2,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/informa/informa-0.7.0-alpha2/src/informa-0.7.0-alpha2/src/de/nava/informa/utils/UpdateChannelTask.java,run,81,11.0,44.0,exception_happened
92,92,2,False,"[(47, 52), (31, 36), (10, 18)]","[(34, 34), (23, 23), (54, 54), (38, 38), (48, 48), (47, 47), (22, 22), (42, 42)]","[[(58, 58), (55, 55), (57, 57), (59, 59), (56, 56)], [(50, 50), (52, 52), (49, 49)], [(6, 6), (60, 60), (0, 0)], [(54, 54), (58, 58), (55, 55), (57, 57), (59, 59), (56, 56)], [(60, 60), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0040>"": ""String additionalArgs= store.getAdditionalParams();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa1bc880>"": ""for (int i= 0; i < hrefs.length; i++) {\n\tElement links= document.createElement(\""link\""); //$NON-NLS-1$\n\txmlJavadocDesc.appendChild(links);\n\tlinks.setAttribute(store.HREF, hrefs[i]);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0a90>"": ""String title= store.getTitle();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0cd0>"": ""String styleSheet= store.getStyleSheet();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aae921f40>"": ""List<String> packages= new ArrayList<String>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa1bc370>"": ""String[] hrefs= store.getHRefs();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa1bc160>"": ""{\nString str= vmArgs + ' ' + additionalArgs;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da9f70>"": ""{\nString source= store.getSource();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1db0970>"": ""String vmArgs= store.getVMParams();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa1bc5e0>"": ""String[] hrefs= store.getHRefs();\nfor (int i= 0; i < hrefs.length; i++) {\n\tElement links= document.createElement(\""link\""); //$NON-NLS-1$\n\txmlJavadocDesc.appendChild(links);\n\tlinks.setAttribute(store.HREF, hrefs[i]);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aae9213d0>"": ""List<String> sourcefiles= new ArrayList<String>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab263e5e0>"": ""String overview= store.getOverview();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab1da91f0>"": ""{\nString destination= getPathString(Path.fromOSString(store.getDestination()));\n""}",2,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/javadocexport/JavadocWriter.java,xmlWriteJavadocStandardParams,115,10.0,44.0,exception_happened
93,93,2,False,"[(12, 29), (49, 58)]","[(72, 72), (69, 69), (49, 49), (53, 53)]","[[(56, 56), (43, 43), (52, 52), (61, 61), (70, 70), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (57, 57), (66, 66), (75, 75), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (62, 62), (71, 71), (72, 72), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (67, 67), (77, 77), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (73, 73), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (65, 65), (24, 24), (10, 10), (19, 19), (28, 28), (74, 74), (6, 6), (47, 47), (15, 15)], [(17, 17), (27, 27), (16, 16), (25, 25), (26, 26), (28, 28), (15, 15)], [(27, 27), (16, 16), (25, 25), (26, 26), (28, 28), (15, 15)], [(59, 59), (38, 38), (40, 40)], [(61, 61), (20, 20), (57, 57), (25, 25), (58, 58), (35, 35), (31, 31), (68, 68), (63, 63), (32, 32), (64, 64), (59, 59), (5, 5), (0, 0), (65, 65), (6, 6), (33, 33), (70, 70), (29, 29), (39, 39), (66, 66), (7, 7), (62, 62), (72, 72), (44, 44), (40, 40), (36, 36), (18, 18), (73, 73), (4, 4), (14, 14), (69, 69), (9, 9), (10, 10), (37, 37), (47, 47), (42, 42), (43, 43), (38, 38), (80, 80), (75, 75), (34, 34), (11, 11), (76, 76), (16, 16), (71, 71), (12, 12), (67, 67), (77, 77), (49, 49), (8, 8), (45, 45), (41, 41), (51, 51), (23, 23), (19, 19), (74, 74), (56, 56), (15, 15), (52, 52), (48, 48), (53, 53), (30, 30), (26, 26), (21, 21), (22, 22), (17, 17), (27, 27), (54, 54), (13, 13), (55, 55), (50, 50), (60, 60), (46, 46), (1, 1), (28, 28), (24, 24)], [(56, 56), (43, 43), (52, 52), (61, 61), (70, 70), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (57, 57), (66, 66), (75, 75), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (62, 62), (71, 71), (72, 72), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (67, 67), (77, 77), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (73, 73), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (65, 65), (24, 24), (10, 10), (19, 19), (28, 28), (74, 74), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (70, 70), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (57, 57), (66, 66), (75, 75), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (62, 62), (71, 71), (72, 72), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (67, 67), (77, 77), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (73, 73), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (65, 65), (24, 24), (10, 10), (19, 19), (28, 28), (74, 74), (6, 6), (47, 47), (15, 15)], [(56, 56), (43, 43), (52, 52), (61, 61), (70, 70), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (57, 57), (66, 66), (75, 75), (34, 34), (11, 11), (53, 53), (30, 30), (76, 76), (7, 7), (16, 16), (62, 62), (71, 71), (72, 72), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (12, 12), (21, 21), (67, 67), (77, 77), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (68, 68), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (73, 73), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (69, 69), (9, 9), (46, 46), (65, 65), (24, 24), (10, 10), (19, 19), (28, 28), (74, 74), (6, 6), (47, 47), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aab8c5400>"": ""Object instance = r.get();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab8c5be0>"": ""LinkageError x"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab981280>"": ""{\n    synchronized (o) { // o is Class and we will not create \n                       // 2 instances of the same class\n\n        try {\n            Class<?> c = ((Class<?>) o);\n            o = null;\n\n            synchronized (knownInstances) { // guards only the static cache\n                int size = knownInstances.size();\n                int index = hashForClass(c, size);\n                for (int i = 0; i < size; i++) {\n                    Reference<Object> ref = knownInstances.get(index);\n                    Object obj = ref == null ? null : ref.get();\n                    if (obj == null) {\n                        break;\n                    }\n                    if (c == obj.getClass()) {\n                        o = obj;\n                        break;\n                    }\n                    if (++index == size) {\n                        index = 0;\n                    }\n                }\n            }\n\n            if (o == null) {\n                o = SharedClassObjectBridge.newInstance(c);\n\n                synchronized (knownInstances) { // guards only the static cache\n                    hashPut(o);\n\n                    int size = knownInstances.size();\n                    if (knownInstancesCount > size * 2 / 3) {\n                        LOGGER.log(Level.CONFIG, \""Cache of size {0} is 2/3 full. Rehashing.\"", size);\n                        HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n                        all.addAll(knownInstances);\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.set(i, null);\n                        }\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.add(null);\n                        }\n                        knownInstancesCount = 0;\n                        for (Reference<Object> r : all) {\n                            if (r == null) {\n                                continue;\n                            }\n                            Object instance = r.get();\n                            if (instance == null) {\n                                continue;\n                            }\n                            hashPut(instance);\n                        }\n                    }\n\n                }\n            }\n\n            // Do not assign to instance var unless there is a complete synch\n            // block between the newInstance and this line. Otherwise we could\n            // be assigning a half-constructed instance that another thread\n            // could see and return immediately.\n            object = o;\n        } catch (Exception ex) {\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, ex);\n            object = null;\n        } catch (LinkageError x) { // #174055 + NoClassDefFoundError\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, x);\n            object = null;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab90b310>"": ""{\n    Reference<Object> ref = knownInstances.get(index);\n    Object obj = ref == null ? null : ref.get();\n    if (++index == size) {\n        index = 0;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab90b130>"": ""{\n    Reference<Object> ref = knownInstances.get(index);\n    if (++index == size) {\n        index = 0;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab9263a0>"": ""{\n    HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab981580>"": ""{\n    Object o = object; // keeping local copy to avoid another\n    if (o instanceof Class<?>) {\n        synchronized (o) { // o is Class and we will not create \n                           // 2 instances of the same class\n\n            try {\n                Class<?> c = ((Class<?>) o);\n                o = null;\n\n                synchronized (knownInstances) { // guards only the static cache\n                    int size = knownInstances.size();\n                    int index = hashForClass(c, size);\n                    for (int i = 0; i < size; i++) {\n                        Reference<Object> ref = knownInstances.get(index);\n                        Object obj = ref == null ? null : ref.get();\n                        if (obj == null) {\n                            break;\n                        }\n                        if (c == obj.getClass()) {\n                            o = obj;\n                            break;\n                        }\n                        if (++index == size) {\n                            index = 0;\n                        }\n                    }\n                }\n\n                if (o == null) {\n                    o = SharedClassObjectBridge.newInstance(c);\n\n                    synchronized (knownInstances) { // guards only the static cache\n                        hashPut(o);\n\n                        int size = knownInstances.size();\n                        if (knownInstancesCount > size * 2 / 3) {\n                            LOGGER.log(Level.CONFIG, \""Cache of size {0} is 2/3 full. Rehashing.\"", size);\n                            HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n                            all.addAll(knownInstances);\n                            for (int i = 0; i < size; i++) {\n                                knownInstances.set(i, null);\n                            }\n                            for (int i = 0; i < size; i++) {\n                                knownInstances.add(null);\n                            }\n                            knownInstancesCount = 0;\n                            for (Reference<Object> r : all) {\n                                if (r == null) {\n                                    continue;\n                                }\n                                Object instance = r.get();\n                                if (instance == null) {\n                                    continue;\n                                }\n                                hashPut(instance);\n                            }\n                        }\n\n                    }\n                }\n\n                // Do not assign to instance var unless there is a complete synch\n                // block between the newInstance and this line. Otherwise we could\n                // be assigning a half-constructed instance that another thread\n                // could see and return immediately.\n                object = o;\n            } catch (Exception ex) {\n                LOGGER.log(Level.WARNING, \""Cannot create \"" + object, ex);\n                object = null;\n            } catch (LinkageError x) { // #174055 + NoClassDefFoundError\n                LOGGER.log(Level.WARNING, \""Cannot create \"" + object, x);\n                object = null;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab981190>"": ""{\n    synchronized (o) { // o is Class and we will not create \n                       // 2 instances of the same class\n\n        try {\n            Class<?> c = ((Class<?>) o);\n            o = null;\n\n            synchronized (knownInstances) { // guards only the static cache\n                int size = knownInstances.size();\n                int index = hashForClass(c, size);\n                for (int i = 0; i < size; i++) {\n                    Reference<Object> ref = knownInstances.get(index);\n                    Object obj = ref == null ? null : ref.get();\n                    if (obj == null) {\n                        break;\n                    }\n                    if (c == obj.getClass()) {\n                        o = obj;\n                        break;\n                    }\n                    if (++index == size) {\n                        index = 0;\n                    }\n                }\n            }\n\n            if (o == null) {\n                o = SharedClassObjectBridge.newInstance(c);\n\n                synchronized (knownInstances) { // guards only the static cache\n                    hashPut(o);\n\n                    int size = knownInstances.size();\n                    if (knownInstancesCount > size * 2 / 3) {\n                        LOGGER.log(Level.CONFIG, \""Cache of size {0} is 2/3 full. Rehashing.\"", size);\n                        HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n                        all.addAll(knownInstances);\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.set(i, null);\n                        }\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.add(null);\n                        }\n                        knownInstancesCount = 0;\n                        for (Reference<Object> r : all) {\n                            if (r == null) {\n                                continue;\n                            }\n                            Object instance = r.get();\n                            if (instance == null) {\n                                continue;\n                            }\n                            hashPut(instance);\n                        }\n                    }\n\n                }\n            }\n\n            // Do not assign to instance var unless there is a complete synch\n            // block between the newInstance and this line. Otherwise we could\n            // be assigning a half-constructed instance that another thread\n            // could see and return immediately.\n            object = o;\n        } catch (Exception ex) {\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, ex);\n            object = null;\n        } catch (LinkageError x) { // #174055 + NoClassDefFoundError\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, x);\n            object = null;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab981bb0>"": ""{\n    synchronized (o) { // o is Class and we will not create \n                       // 2 instances of the same class\n\n        try {\n            Class<?> c = ((Class<?>) o);\n            o = null;\n\n            synchronized (knownInstances) { // guards only the static cache\n                int size = knownInstances.size();\n                int index = hashForClass(c, size);\n                for (int i = 0; i < size; i++) {\n                    Reference<Object> ref = knownInstances.get(index);\n                    Object obj = ref == null ? null : ref.get();\n                    if (obj == null) {\n                        break;\n                    }\n                    if (c == obj.getClass()) {\n                        o = obj;\n                        break;\n                    }\n                    if (++index == size) {\n                        index = 0;\n                    }\n                }\n            }\n\n            if (o == null) {\n                o = SharedClassObjectBridge.newInstance(c);\n\n                synchronized (knownInstances) { // guards only the static cache\n                    hashPut(o);\n\n                    int size = knownInstances.size();\n                    if (knownInstancesCount > size * 2 / 3) {\n                        LOGGER.log(Level.CONFIG, \""Cache of size {0} is 2/3 full. Rehashing.\"", size);\n                        HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n                        all.addAll(knownInstances);\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.set(i, null);\n                        }\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.add(null);\n                        }\n                        knownInstancesCount = 0;\n                        for (Reference<Object> r : all) {\n                            if (r == null) {\n                                continue;\n                            }\n                            Object instance = r.get();\n                            if (instance == null) {\n                                continue;\n                            }\n                            hashPut(instance);\n                        }\n                    }\n\n                }\n            }\n\n            // Do not assign to instance var unless there is a complete synch\n            // block between the newInstance and this line. Otherwise we could\n            // be assigning a half-constructed instance that another thread\n            // could see and return immediately.\n            object = o;\n        } catch (Exception ex) {\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, ex);\n            object = null;\n        } catch (LinkageError x) { // #174055 + NoClassDefFoundError\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, x);\n            object = null;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab8c57c0>"": ""Exception ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab926fd0>"": ""Reference<Object> r : all"", ""<program_slicing.graph.statement.Statement object at 0x7f4aab9811f0>"": ""{\n    synchronized (o) { // o is Class and we will not create \n                       // 2 instances of the same class\n\n        try {\n            Class<?> c = ((Class<?>) o);\n            o = null;\n\n            synchronized (knownInstances) { // guards only the static cache\n                int size = knownInstances.size();\n                int index = hashForClass(c, size);\n                for (int i = 0; i < size; i++) {\n                    Reference<Object> ref = knownInstances.get(index);\n                    Object obj = ref == null ? null : ref.get();\n                    if (obj == null) {\n                        break;\n                    }\n                    if (c == obj.getClass()) {\n                        o = obj;\n                        break;\n                    }\n                    if (++index == size) {\n                        index = 0;\n                    }\n                }\n            }\n\n            if (o == null) {\n                o = SharedClassObjectBridge.newInstance(c);\n\n                synchronized (knownInstances) { // guards only the static cache\n                    hashPut(o);\n\n                    int size = knownInstances.size();\n                    if (knownInstancesCount > size * 2 / 3) {\n                        LOGGER.log(Level.CONFIG, \""Cache of size {0} is 2/3 full. Rehashing.\"", size);\n                        HashSet<Reference<Object>> all = new HashSet<Reference<Object>>();\n                        all.addAll(knownInstances);\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.set(i, null);\n                        }\n                        for (int i = 0; i < size; i++) {\n                            knownInstances.add(null);\n                        }\n                        knownInstancesCount = 0;\n                        for (Reference<Object> r : all) {\n                            if (r == null) {\n                                continue;\n                            }\n                            Object instance = r.get();\n                            if (instance == null) {\n                                continue;\n                            }\n                            hashPut(instance);\n                        }\n                    }\n\n                }\n            }\n\n            // Do not assign to instance var unless there is a complete synch\n            // block between the newInstance and this line. Otherwise we could\n            // be assigning a half-constructed instance that another thread\n            // could see and return immediately.\n            object = o;\n        } catch (Exception ex) {\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, ex);\n            object = null;\n        } catch (LinkageError x) { // #174055 + NoClassDefFoundError\n            LOGGER.log(Level.WARNING, \""Cannot create \"" + object, x);\n            object = null;\n        }\n    }\n}""}",7,0,1,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/openide.util.lookup/src/org/openide/util/lookup/MetaInfServicesLookup.java,getInstance,440,16.0,49.0,exception_happened
94,94,1,False,"[(20, 40), (55, 85), (35, 54), (22, 33), (74, 83), (25, 33), (55, 73), (5, 10), (41, 54), (55, 71)]","[(37, 37)]","[[(87, 87), (29, 29), (0, 0)], [(23, 23), (87, 87), (22, 22), (0, 0)], [(4, 4), (87, 87), (0, 0)], [(87, 87), (0, 0)], [(5, 5), (87, 87), (0, 0)], [(6, 6), (87, 87), (0, 0)], [(26, 26), (87, 87), (0, 0)], [(30, 30), (23, 23), (87, 87), (0, 0), (29, 29), (22, 22)], [(61, 61), (62, 62)], [(50, 50), (51, 51)], [(87, 87), (25, 25), (0, 0)], [(87, 87), (0, 0), (12, 12), (2, 2), (11, 11)], [(87, 87), (22, 22), (0, 0)], [(87, 87), (11, 11), (0, 0)], [(1, 1), (87, 87), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aaae96400>"": ""{\n    String compileOnSaveLabel = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""CustomizerCompile.CompileOnSave\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaae96c10>"": ""JavaProjectRootNode projectNode = new JavaProjectsTabOperator().getJavaProjectRootNode(anagramGamePrName);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaf56220>"": ""{\n    String projectPropertiesTitle = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""LBL_Customizer_Title\"");\n    NbDialogOperator propertiesDialogOper = new NbDialogOperator(projectPropertiesTitle);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaedd190>"": ""{\n    NewProjectWizardOperator npwo = NewProjectWizardOperator.invoke();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaee3a60>"": ""public void testProfiler() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaedd490>"": ""{\n    String samplesLbl = Bundle.getStringTrimmed(\""org.netbeans.modules.project.ui.Bundle\"", \""Templates/Project/Samples\""); // \""Samples\""\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaedd6a0>"": ""{\n    String javaLbl = Bundle.getStringTrimmed(\""org.netbeans.modules.java.examples.Bundle\"", \""Templates/Project/Samples/Standard\""); // \""Java\""\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaeda9790>"": ""{\n    String compileCategoryTitle = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""LBL_Config_Build\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaae96520>"": ""{\n    String projectPropertiesTitle = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""LBL_Customizer_Title\"");\n    NbDialogOperator propertiesDialogOper = new NbDialogOperator(projectPropertiesTitle);\n    String compileOnSaveLabel = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""CustomizerCompile.CompileOnSave\"");\n    JCheckBox cb = JCheckBoxOperator.waitJCheckBox((Container) propertiesDialogOper.getSource(), compileOnSaveLabel, true, true);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaae0a130>"": ""Action takeSnapshotAction = new Action(ProfileMenu + \""|\"" + Bundle.getStringTrimmed(PROFILER_ACTIONS_BUNDLE,\n                                \""LBL_TakeSnapshotAction\""), null);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaeb0760>"": ""NbDialogOperator profileOper = new NbDialogOperator( Bundle.getStringTrimmed(\""org.netbeans.modules.profiler.ui.stp.Bundle\"",\n                                \""SelectProfilingTask_ProfileDialogCaption\"") ); // \""Profile \""+anagramGamePrName"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaeda9370>"": ""{\nString buildCategoryTitle = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""Projects/org-netbeans-modules-java-j2seproject/Customizer/BuildCategory\"");\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaedd790>"": ""{\n    String anagramGamePrName; // will be get from New Project wizard\n    NewJavaProjectNameLocationStepOperator npnlso = new NewJavaProjectNameLocationStepOperator();\n    anagramGamePrName = npnlso.txtProjectName().getText();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaf563d0>"": ""{\n    String projectPropertiesTitle = Bundle.getStringTrimmed(\""org.netbeans.modules.java.j2seproject.ui.customizer.Bundle\"", \""LBL_Customizer_Title\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaf565e0>"": ""{\n    NewJavaProjectNameLocationStepOperator npnlso = new NewJavaProjectNameLocationStepOperator();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaee37f0>"": ""{\n    String ProfileMenu = org.netbeans.jellytools.Bundle.getStringTrimmed(PROFILER_ACTIONS_BUNDLE, \""Menu/Profile\""); //\""Profile\""\n}""}",0,0,1,1,2,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/profiler/test/qa-functional/src/org/netbeans/test/profiler/ProfilerValidation.java,testProfiler,227,3.0,47.0,exception_happened
95,95,2,False,"[(50, 60), (15, 24)]",[],"[[(17, 17), (23, 23), (16, 16), (24, 24), (20, 20), (44, 44), (10, 10), (19, 19), (18, 18), (22, 22), (15, 15)], [(28, 28), (40, 40), (29, 29), (26, 26)], [(8, 8), (5, 5), (82, 82)], [(6, 6), (5, 5), (82, 82)], [(1, 1), (88, 88), (0, 0)], [(2, 2), (88, 88), (0, 0)], [(62, 62), (46, 46)], [(4, 4), (3, 3), (88, 88), (0, 0)], [(5, 5), (82, 82), (7, 7)], [(59, 59), (57, 57), (52, 52), (54, 54), (58, 58), (60, 60), (55, 55), (77, 77), (48, 48), (50, 50), (51, 51), (53, 53)], [(3, 3), (88, 88), (0, 0)], [(27, 27), (29, 29), (26, 26), (28, 28), (40, 40), (31, 31)], [(59, 59), (57, 57), (62, 62), (46, 46), (52, 52), (54, 54), (58, 58), (60, 60), (55, 55), (64, 64), (48, 48), (77, 77), (50, 50), (47, 47), (51, 51), (53, 53)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aaad98850>"": ""{\n    String userSdoSqlStatement = \""SELECT META.SDO_LAYER_GTYPE\\n\"" +\n        \""FROM ALL_INDEXES INFO\\n\"" +\n        \""INNER JOIN MDSYS.USER_SDO_INDEX_METADATA META\\n\"" +\n        \""ON INFO.INDEX_NAME = META.SDO_INDEX_NAME\\n\"" +\n        \""WHERE INFO.TABLE_NAME = '\"" + tableName + \""'\\n\"" +\n        \""AND REPLACE(meta.sdo_column_name, '\\\""') = '\"" + columnName + \""'\\n\"";\n    if(schema != null && !\""\"".equals(schema)) {\n        userSdoSqlStatement += \"" AND INFO.TABLE_OWNER = '\"" + schema + \""'\"";\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaadc0a0>"": ""Statement userSdoStatement = null;\ntry {\n    userSdoStatement = cx.createStatement();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad988b0>"": ""{\n           String schema = dataStore.getDatabaseSchema();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad98cd0>"": ""{\n           String tableName = columnMetaData.getString(TABLE_NAME);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad99d30>"": ""{\n    final int TABLE_NAME = 3;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad99f40>"": ""{\n    final int COLUMN_NAME = 4;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaadcf40>"": ""Statement allSdoStatement = null;\n    allSdoStatement = cx.createStatement();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad98d90>"": ""{\n    final int TYPE_NAME = 6;\n    String typeName = columnMetaData.getString(TYPE_NAME);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad989a0>"": ""{\n           String columnName = columnMetaData.getString(COLUMN_NAME);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaab033a0>"": ""{\n    String allSdoSqlStatement = \""SELECT META.SDO_LAYER_GTYPE\\n\"" +\n        \""FROM ALL_INDEXES INFO\\n\"" +\n        \""INNER JOIN MDSYS.ALL_SDO_INDEX_METADATA META\\n\"" +\n        \""ON INFO.INDEX_NAME = META.SDO_INDEX_NAME\\n\"" +\n        \""WHERE INFO.TABLE_NAME = '\"" + tableName + \""'\\n\"" +\n        \""AND REPLACE(meta.sdo_column_name, '\\\""') = '\"" + columnName + \""'\\n\"";\n    if(schema != null && !\""\"".equals(schema)) {\n        allSdoSqlStatement += \"" AND INFO.TABLE_OWNER = '\"" + schema + \""'\"";\n        allSdoSqlStatement += \"" AND META.SDO_INDEX_OWNER = '\"" + schema + \""'\"";\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaad99fd0>"": ""{\n    final int TYPE_NAME = 6;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaaadc190>"": ""Statement userSdoStatement = null;\nResultSet userSdoResult = null;\ntry {\n    userSdoStatement = cx.createStatement();\n    userSdoResult = userSdoStatement.executeQuery(userSdoSqlStatement);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaab031f0>"": ""Statement allSdoStatement = null;\nResultSet allSdoResult = null;\ntry {\n    String allSdoSqlStatement = \""SELECT META.SDO_LAYER_GTYPE\\n\"" +\n        \""FROM ALL_INDEXES INFO\\n\"" +\n        \""INNER JOIN MDSYS.ALL_SDO_INDEX_METADATA META\\n\"" +\n        \""ON INFO.INDEX_NAME = META.SDO_INDEX_NAME\\n\"" +\n        \""WHERE INFO.TABLE_NAME = '\"" + tableName + \""'\\n\"" +\n        \""AND REPLACE(meta.sdo_column_name, '\\\""') = '\"" + columnName + \""'\\n\"";\n    if(schema != null && !\""\"".equals(schema)) {\n        allSdoSqlStatement += \"" AND INFO.TABLE_OWNER = '\"" + schema + \""'\"";\n        allSdoSqlStatement += \"" AND META.SDO_INDEX_OWNER = '\"" + schema + \""'\"";\n    }\n    allSdoStatement = cx.createStatement();\n    allSdoResult = allSdoStatement.executeQuery(allSdoSqlStatement);\n}""}",0,0,2,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/plugin/jdbc/jdbc-oracle/src/main/java/org/geotools/data/oracle/OracleDialect.java,getMapping,199,11.0,49.0,exception_happened
96,96,1,True,"[(14, 33), (50, 64), (22, 33), (35, 48), (50, 58), (35, 45), (66, 74), (28, 33)]",,,,0,0,0,0,4,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jag/jag-6.1/src/jag-6.1/src/com/finalist/jaggenerator/ConnectDialog.java,initComponents,65,1.0,43.0,exception_happened
97,97,2,False,[],"[(39, 39), (19, 19), (7, 7), (11, 11)]","[[(1, 1), (2, 2), (64, 64), (0, 0)], [(23, 23), (21, 21), (36, 36)], [(48, 48), (45, 45), (55, 55), (44, 44)], [(3, 3), (64, 64), (0, 0)], [(37, 37), (21, 21), (20, 20)], [(56, 56), (43, 43), (52, 52), (61, 61), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (48, 48), (57, 57), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (62, 62), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (63, 63), (13, 13), (32, 32), (18, 18), (55, 55), (64, 64), (41, 41), (50, 50), (59, 59), (51, 51), (60, 60), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(43, 43), (61, 61), (20, 20), (29, 29), (39, 39), (48, 48), (34, 34), (53, 53), (30, 30), (62, 62), (25, 25), (26, 26), (44, 44), (21, 21), (31, 31), (40, 40), (22, 22), (49, 49), (27, 27), (36, 36), (45, 45), (54, 54), (32, 32), (18, 18), (55, 55), (50, 50), (51, 51), (23, 23), (19, 19), (37, 37), (24, 24)], [(21, 21), (22, 22), (36, 36)], [(1, 1), (64, 64), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aa998f0a0>"": ""{\r\n\tboolean mustImplementAbstractMethods = mustImplementAbstractMethods();\n\tboolean skipInheritedMethods = mustImplementAbstractMethods && canSkipInheritedMethods(); // have a single concrete superclass so only check overridden methods\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa99b40d0>"": ""{\r\n\tfor (int j = 0, length2 = inherited.length;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9955910>"": ""j++) {\r\nMethodBinding otherInheritedMethod = inherited[j];\notherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa998f940>"": ""MethodBinding[] current = (MethodBinding[]) this.currentMethods.get(methodSelectors[s]);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa998f1f0>"": ""{\r\n\tchar[][] methodSelectors = this.inheritedMethods.keyTable;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9999c10>"": ""{\r\n\tfor (int i = 0, length1 = current.length;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa998f4f0>"": ""{\r\nchar[][] methodSelectors = this.inheritedMethods.keyTable;\nnextSelector : for (int s = methodSelectors.length; --s >= 0;) {\r\n\tif (methodSelectors[s] == null) continue nextSelector;\r\n\n\tMethodBinding[] current = (MethodBinding[]) this.currentMethods.get(methodSelectors[s]);\r\n\tif (current == null && skipInheritedMethods)\r\n\t\tcontinue nextSelector;\r\n\n\tMethodBinding[] inherited = (MethodBinding[]) this.inheritedMethods.valueTable[s];\r\n\tif (inherited.length == 1 && current == null) { // handle the common case\r\n\t\tif (mustImplementAbstractMethods && inherited[0].isAbstract())\r\n\t\t\tcheckAbstractMethod(inherited[0]);\r\n\t\tcontinue nextSelector;\r\n\t}\r\n\n\tint index = -1;\r\n\tMethodBinding[] matchingInherited = new MethodBinding[inherited.length];\r\n\tif (current != null) {\r\n\t\tfor (int i = 0, length1 = current.length; i < length1; i++) {\r\n\t\t\tMethodBinding currentMethod = current[i];\r\n\t\t\tfor (int j = 0, length2 = inherited.length; j < length2; j++) {\r\n\t\t\t\tMethodBinding inheritedMethod = computeSubstituteMethod(inherited[j], currentMethod);\r\n\t\t\t\tif (inheritedMethod != null) {\r\n\t\t\t\t\tif (doesMethodOverride(currentMethod, inheritedMethod)) {\r\n\t\t\t\t\t\tmatchingInherited[++index] = inheritedMethod;\r\n\t\t\t\t\t\tinherited[j] = null; // do not want to find it again\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (index >= 0) {\r\n\t\t\t\tcheckAgainstInheritedMethods(currentMethod, matchingInherited, index + 1, inherited); // pass in the length of matching\r\n\t\t\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n\tfor (int i = 0, length = inherited.length; i < length; i++) {\r\n\t\tMethodBinding inheritedMethod = inherited[i];\r\n\t\tif (inheritedMethod == null) continue;\r\n\n\t\tmatchingInherited[++index] = inheritedMethod;\r\n\t\tfor (int j = i + 1; j < length; j++) {\r\n\t\t\tMethodBinding otherInheritedMethod = inherited[j];\r\n\t\t\tif (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))\r\n\t\t\t\tcontinue;\r\n\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);\r\n\t\t\tif (otherInheritedMethod != null) {\r\n\t\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {\r\n\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;\r\n\t\t\t\t\tinherited[j] = null; // do not want to find it again\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (index == -1) continue;\r\n\t\tif (index > 0)\r\n\t\t\tcheckInheritedMethods(matchingInherited, index + 1); // pass in the length of matching\r\n\t\telse if (mustImplementAbstractMethods && matchingInherited[0].isAbstract())\r\n\t\t\tcheckAbstractMethod(matchingInherited[0]);\r\n\t\twhile (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods\r\n\t}\r\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa998fd90>"": ""MethodBinding[] inherited = (MethodBinding[]) this.inheritedMethods.valueTable[s];"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9999670>"": ""int index = -1;\nMethodBinding[] matchingInherited = new MethodBinding[inherited.length];\nif (current != null) {\r\n\tfor (int i = 0, length1 = current.length; i < length1; i++) {\r\n\t\tMethodBinding currentMethod = current[i];\n\t\tfor (int j = 0, length2 = inherited.length; j < length2; j++) {\r\n\t\t\tMethodBinding inheritedMethod = computeSubstituteMethod(inherited[j], currentMethod);\n\t\t\tif (inheritedMethod != null) {\r\n\t\t\t\tif (doesMethodOverride(currentMethod, inheritedMethod)) {\r\n\t\t\t\t\tmatchingInherited[++index] = inheritedMethod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (index >= 0) {\r\n\t\t\twhile (index >= 0) matchingInherited[index--] = null;\n\t}\n}\nfor (int i = 0, length = inherited.length; i < length; i++) {\r\n\tMethodBinding inheritedMethod = inherited[i];\n\tmatchingInherited[++index] = inheritedMethod;\n\tfor (int j = i + 1; j < length; j++) {\r\n\t\tMethodBinding otherInheritedMethod = inherited[j];\n\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);\n\t\tif (otherInheritedMethod != null) {\r\n\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {\r\n\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;\n\t\t\t}\n\t\t}\n\t}\n\twhile (index >= 0) matchingInherited[index--] = null;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9999e80>"": ""i++) {\r\nMethodBinding currentMethod = current[i];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9988f40>"": ""{\r\n\tboolean mustImplementAbstractMethods = mustImplementAbstractMethods();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa99997c0>"": ""MethodBinding[] matchingInherited = new MethodBinding[inherited.length];"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa99b4fd0>"": ""int i = 0, length = inherited.length;""}",10,2,0,15,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java,checkMethods,325,27.0,54.0,exception_happened
98,98,2,False,"[(40, 56), (49, 56)]","[(10, 10), (11, 11)]","[[(32, 32), (31, 31)], [(1, 1), (62, 62), (0, 0)], [(32, 32), (34, 34), (31, 31), (35, 35)], [(14, 14), (25, 25), (20, 20), (13, 13), (10, 10), (19, 19), (12, 12), (21, 21), (18, 18)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aa94e0460>"": ""final Unit unit = getUnit();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9711c70>"": ""Location currentTarget = (nearbyTarget != null) ? nearbyTarget\n    : getTarget();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa94e4eb0>"": ""{\n    String reason = invalidReason();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa97113a0>"": ""Location currentTarget = (nearbyTarget != null) ? nearbyTarget\n    : getTarget();\nUnit.MoveType mt = travelToTarget(tag, currentTarget,\n    CostDeciders.avoidSettlementsAndBlockingUnits());"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa94e0730>"": ""final AIUnit aiUnit = getAIUnit();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa94e09a0>"": ""final AIUnit aiUnit = getAIUnit();\nLocation nearbyTarget = findTarget(aiUnit, 1, false);\nif (nearbyTarget != null) {\n    if (getTarget() == null) {\n        nearbyTarget = null;\n    } else if (nearbyTarget == getTarget()) {\n        nearbyTarget = null;\n    }\n}""}",0,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/freecol/freecol-0.10.7/src/freecol/src/net/sf/freecol/server/ai/mission/UnitSeekAndDestroyMission.java,doMission,451,17.0,48.0,exception_happened
99,99,1,False,"[(26, 53), (26, 45), (3, 8)]",[],"[[(54, 54), (2, 2), (0, 0)], [(3, 3), (54, 54), (0, 0)], [(30, 30), (5, 5), (16, 16), (0, 0), (43, 43), (1, 1), (52, 52), (54, 54), (38, 38), (13, 13), (3, 3), (21, 21), (2, 2), (6, 6), (51, 51), (22, 22), (33, 33)], [(10, 10), (54, 54), (0, 0)], [(54, 54), (27, 27), (0, 0)], [(1, 1), (54, 54), (0, 0)], [(5, 5), (0, 0), (1, 1), (54, 54), (3, 3), (2, 2)], [(30, 30), (5, 5), (0, 0), (1, 1), (54, 54), (13, 13), (3, 3), (21, 21), (2, 2), (6, 6), (51, 51)], [(26, 26), (54, 54), (0, 0)], [(5, 5), (0, 0), (1, 1), (54, 54), (3, 3), (2, 2), (6, 6)], [(5, 5), (0, 0), (1, 1), (54, 54), (3, 3), (2, 2), (6, 6), (47, 47)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aaa3b2e20>"": ""{\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa3b2820>"": ""{\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9711040>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n    MultiViewDescription[] descs = new MultiViewDescription[] { desc1, desc2, desc3 };\n    TopComponent tc = MultiViewFactory.createMultiView(descs, desc1);\n    ActionMap obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    Action res = (Action)obj.get(\""testkey\"");\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    res = (Action)obj.get(\""testkey\"");\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    res = (Action)obj.get(\""testkey\"");\n    res = (Action)obj.get(\""testkey\"");\n    res = (Action)obj.get(\""testkey\"");\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    res = (Action)obj.get(\""testkey\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9711460>"": ""{\n    Action act = new TestAction(\""MultiViewAction\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa94e46a0>"": ""{\n    Action innerAct = new TestAction(\""InnerAction\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa3b2f10>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa3b2d30>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n    MultiViewDescription[] descs = new MultiViewDescription[] { desc1, desc2, desc3 };\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa9711d30>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n    MultiViewDescription[] descs = new MultiViewDescription[] { desc1, desc2, desc3 };\n    TopComponent tc = MultiViewFactory.createMultiView(descs, desc1);\n    ActionMap obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n    obj = (ActionMap)tc.getLookup().lookup(ActionMap.class);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa94e4d60>"": ""{\n    JComponent elemtc = elem1.getVisualRepresentation();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aaa3b2970>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n    MultiViewDescription[] descs = new MultiViewDescription[] { desc1, desc2, desc3 };\n    TopComponent tc = MultiViewFactory.createMultiView(descs, desc1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa91dd3d0>"": ""{\n    MultiViewDescription desc1 = new MVDesc(\""desc1\"", null, 0, elem1);\n    MultiViewDescription desc2 = new MVDesc(\""desc2\"", null, 0, elem2);\n    MultiViewDescription desc3 = new MVDesc(\""desc3\"", null, 0, elem3);\n    MultiViewDescription[] descs = new MultiViewDescription[] { desc1, desc2, desc3 };\n    TopComponent tc = MultiViewFactory.createMultiView(descs, desc1);\n    MultiViewHandler handler = MultiViews.findMultiViewHandler(tc);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/core.multiview/test/unit/src/org/netbeans/core/multiview/MultiViewActionMapTest.java,doTestActionMap,126,1.0,42.0,exception_happened
100,100,2,False,"[(31, 50), (39, 44), (17, 23)]",[],"[[(0, 0), (54, 54), (19, 19), (6, 6), (31, 31)], [(0, 0), (54, 54), (19, 19), (3, 3), (6, 6), (31, 31), (33, 33)], [(4, 4), (0, 0), (45, 45), (54, 54), (37, 37), (19, 19), (3, 3), (40, 40), (6, 6), (34, 34), (31, 31), (33, 33)], [(7, 7), (0, 0), (54, 54), (20, 20), (19, 19), (32, 32), (6, 6), (31, 31)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aa8f47ee0>"": ""{\nSession s = openSession();\ns = openSession();\ns = openSession();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa8f47bb0>"": ""{\nContract c = new Contract( null, \""gail\"", \""phone\"");\nSession s = openSession();\ns = openSession();\ns = openSession();\nc = (Contract) s.createCriteria(Contract.class).uniqueResult();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa8f47d30>"": ""{\nContract c = new Contract( null, \""gail\"", \""phone\"");\nParty party = new Party( \""party\"" );\nSession s = openSession();\ns = openSession();\ns = openSession();\nc = (Contract) s.createCriteria(Contract.class).uniqueResult();\nif ( isContractPartiesInverse ) {\n}\n\tparty = ( Party ) c.getParties().iterator().next();\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aa8f47c70>"": ""{\nSession s = openSession();\nTransaction t = s.beginTransaction();\ns = openSession();\nt = s.beginTransaction();\ns = openSession();\nt = s.beginTransaction();\n""}",0,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hibernate/hibernate-4.2.2/src/hibernate-release-4.2.2.Final/project/hibernate-core/src/test/java/org/hibernate/test/immutable/entitywithmutablecollection/AbstractEntityWithOneToManyTest.java,testCreateWithEmptyOneToManyCollectionUpdateWithExistingElement,339,6.0,42.0,exception_happened
