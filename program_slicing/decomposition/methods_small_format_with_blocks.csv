,Unnamed: 0,Unnamed: 0.1,cc_range,fail_slice,emos_block,emos_slices_cont,emos_slices_discont,slices_dic,has_for,has_while,has_try,has_if,anon_class,File,method_name,start_line,cyclo,ncss,emos_block_abs,emos_slices_cont_abs,emos_slices_discont_abs,blocks
0,0,0,2,False,"[(23, 35)]","[(20, 20)]","[[(46, 46), (2, 2), (0, 0)], [(23, 23), (27, 27), (25, 25), (29, 29), (26, 26), (28, 28), (32, 32), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a040>"": ""RouteSpecificPool rospl = getRoutePool(route, true);"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6ae50>"": ""{\n    HttpRoute route = entry.getPlannedRoute();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3be0>"": ""{\n    String s;\n    if (validDuration > 0) {\n        s = \""for \"" + validDuration + \"" \"" + timeUnit;\n    } else {\n        s = \""indefinitely\"";\n    }\n}""}",0,0,1,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/apache/http/impl/conn/tsccm/ConnPoolByRoute.java,freeEntry,430,6.0,27.0,"[(453, 465)]","[(450, 450)]","[[(476, 476), (432, 432), (430, 430)], [(453, 453), (457, 457), (455, 455), (459, 459), (456, 456), (458, 458), (462, 462), (454, 454)]]","[(432, 438), (440, 447), (440, 448), (440, 450), (440, 469), (440, 471), (447, 469), (447, 471), (448, 469), (448, 471), (450, 469), (450, 471), (452, 469), (452, 471), (453, 462), (453, 463), (453, 464), (453, 465), (454, 461), (455, 461)]"
1,2,2,2,False,"[(11, 19), (4, 10)]",[],"[[(4, 4), (8, 8), (5, 5), (27, 27), (7, 7), (0, 0), (9, 9), (1, 1), (26, 26), (10, 10), (3, 3), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aecee8040>"": ""{\n    if(!reported) {\n        System.err.println();\n        System.err.println(\""Samples - \"");\n        List<String> samples = new ArrayList<String>();\n        samples.addAll(SAMPLES.keySet());\n        Collections.sort(samples, new Comparator<String>(){\n                public int compare(String o1, String o2) {\n                    return SAMPLES.get(o2) - SAMPLES.get(o1);\n                }\n            });\n    }\n}""}",3,0,0,2,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jruby/jruby-1.5.2/src/jruby-1.5.2/src/org/jruby/util/SimpleSampler.java,report,65,6.0,21.0,"[(76, 84), (69, 75)]",[],"[[(69, 69), (73, 73), (70, 70), (92, 92), (72, 72), (65, 65), (74, 74), (66, 66), (91, 91), (75, 75), (68, 68), (67, 67), (71, 71)]]","[(67, 75), (67, 84), (67, 85), (68, 75), (68, 84), (68, 85), (69, 75), (69, 84), (69, 85), (69, 89), (70, 84), (70, 85), (70, 89), (70, 90), (71, 84), (71, 85), (71, 89), (71, 90), (76, 84), (76, 85), (76, 89), (76, 90), (77, 83)]"
2,3,3,2,False,"[(28, 34)]","[(28, 28)]","[[(41, 41), (3, 3), (0, 0)], [(30, 30), (34, 34), (29, 29)], [(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (10, 10), (3, 3), (12, 12), (6, 6), (41, 41), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aecee84c0>"": ""{\n\tVector unresulvedReferences = getUnresolvedReferences(sc);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd39a0>"": ""Vector enabledSCPs = (Vector) resolver.scpEnabled.clone();"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3fd0>"": ""i++) {\nServiceComponentProp scp = (ServiceComponentProp) enabledSCPs.elementAt(i);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdb25e0>"": ""{\nVector unresulvedReferences = getUnresolvedReferences(sc);\nboolean resolved = true;\nif (unresulvedReferences != null) {\n\tfor (int i = 0; i < unresulvedReferences.size(); i++) {\n\t\tif (isMandatory((ComponentReference) unresulvedReferences.elementAt(i))) {\n\t\t\tresolved = false;\n\t\t}\n\t}\n}\n""}",6,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/equinox/internal/ds/SCRCommandProvider.java,printComponentDetails,350,13.0,30.0,"[(378, 384)]","[(378, 378)]","[[(391, 391), (353, 353), (350, 350)], [(380, 380), (384, 384), (379, 379)], [(354, 354), (358, 358), (355, 355), (357, 357), (350, 350), (360, 360), (353, 353), (362, 362), (356, 356), (391, 391), (361, 361)]]","[(351, 362), (351, 362), (351, 367), (351, 367), (351, 376), (351, 376), (351, 377), (351, 377), (351, 378), (351, 378), (352, 362), (352, 367), (352, 376), (352, 377), (352, 378), (353, 362), (353, 367), (353, 376), (353, 377), (353, 378), (353, 384), (354, 362), (354, 367), (354, 376), (354, 377), (354, 378), (354, 384), (355, 362), (355, 367), (355, 376), (355, 377), (355, 378), (355, 384), (363, 376), (363, 377), (363, 378), (363, 384), (363, 389), (363, 390), (369, 376), (369, 377), (369, 378), (369, 384), (369, 389), (369, 390), (377, 384), (377, 389), (377, 390), (378, 384), (378, 389), (378, 390), (379, 389), (379, 390)]"
3,4,4,1,False,"[(7, 26)]",[],"[[(31, 31), (0, 0)], [(5, 5), (31, 31), (0, 0)], [(3, 3), (31, 31), (0, 0)], [(8, 8), (31, 31), (0, 0)], [(1, 1), (31, 31), (0, 0)], [(31, 31), (7, 7), (0, 0)], [(17, 17), (31, 31), (0, 0), (1, 1), (25, 25), (19, 19), (18, 18), (22, 22)], [(17, 17), (0, 0), (1, 1), (19, 19), (18, 18), (31, 31)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aecedf2b0>"": ""public void testIsNull() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa4c0>"": ""{\n\tDistributor d2 = new Distributor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeeeaa700>"": ""{\n\tDistributor d1 = new Distributor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3520>"": ""{\n\tItem item2 = new Item( \""Mouse2\"", \""dd\"" );\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfd30>"": ""{\n\tEntityManager em = getOrCreateEntityManager();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeebd3190>"": ""{\n\tItem item = new Item( \""Mouse\"", null );\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a9a0>"": ""{\n\tEntityManager em = getOrCreateEntityManager();\n\tQuery q = em.createQuery(\n\t\t\t\""select i from Item i where i.descr = :descr or (i.descr is null and cast(:descr as string) is null)\""\n\t);\n\tList result = q.getResultList();\n\tresult = q.getResultList();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6abb0>"": ""{\n\tEntityManager em = getOrCreateEntityManager();\n\tQuery q = em.createQuery(\n\t\t\t\""select i from Item i where i.descr = :descr or (i.descr is null and cast(:descr as string) is null)\""\n\t);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hibernate/hibernate-4.2.2/src/hibernate-release-4.2.2.Final/project/hibernate-entitymanager/src/test/java/org/hibernate/ejb/test/query/QueryTest.java,testIsNull,498,1.0,26.0,"[(505, 524)]",[],"[[(529, 529), (498, 498)], [(503, 503), (529, 529), (498, 498)], [(501, 501), (529, 529), (498, 498)], [(506, 506), (529, 529), (498, 498)], [(499, 499), (529, 529), (498, 498)], [(529, 529), (505, 505), (498, 498)], [(515, 515), (529, 529), (498, 498), (499, 499), (523, 523), (517, 517), (516, 516), (520, 520)], [(515, 515), (498, 498), (499, 499), (517, 517), (516, 516), (529, 529)]]","[(499, 505), (499, 506), (499, 507), (499, 508), (499, 509), (499, 510), (499, 511), (499, 512), (499, 513), (499, 514), (499, 517), (499, 518), (499, 519), (499, 520), (499, 521), (499, 522), (500, 506), (500, 507), (500, 508), (500, 509), (500, 510), (500, 511), (500, 512), (500, 513), (500, 514), (500, 517), (500, 518), (500, 519), (500, 520), (500, 521), (500, 522), (500, 523), (501, 507), (501, 508), (501, 509), (501, 510), (501, 511), (501, 512), (501, 513), (501, 514), (501, 517), (501, 518), (501, 519), (501, 520), (501, 521), (501, 522), (501, 523), (501, 524), (502, 508), (502, 509), (502, 510), (502, 511), (502, 512), (502, 513), (502, 514), (502, 517), (502, 518), (502, 519), (502, 520), (502, 521), (502, 522), (502, 523), (502, 524), (502, 525), (503, 509), (503, 510), (503, 511), (503, 512), (503, 513), (503, 514), (503, 517), (503, 518), (503, 519), (503, 520), (503, 521), (503, 522), (503, 523), (503, 524), (503, 525), (504, 510), (504, 511), (504, 512), (504, 513), (504, 514), (504, 517), (504, 518), (504, 519), (504, 520), (504, 521), (504, 522), (504, 523), (504, 524), (504, 525), (504, 527), (505, 511), (505, 512), (505, 513), (505, 514), (505, 517), (505, 518), (505, 519), (505, 520), (505, 521), (505, 522), (505, 523), (505, 524), (505, 525), (505, 527), (505, 528), (506, 512), (506, 513), (506, 514), (506, 517), (506, 518), (506, 519), (506, 520), (506, 521), (506, 522), (506, 523), (506, 524), (506, 525), (506, 527), (506, 528), (507, 513), (507, 514), (507, 517), (507, 518), (507, 519), (507, 520), (507, 521), (507, 522), (507, 523), (507, 524), (507, 525), (507, 527), (507, 528), (508, 514), (508, 517), (508, 518), (508, 519), (508, 520), (508, 521), (508, 522), (508, 523), (508, 524), (508, 525), (508, 527), (508, 528), (509, 517), (509, 518), (509, 519), (509, 520), (509, 521), (509, 522), (509, 523), (509, 524), (509, 525), (509, 527), (509, 528), (510, 517), (510, 518), (510, 519), (510, 520), (510, 521), (510, 522), (510, 523), (510, 524), (510, 525), (510, 527), (510, 528), (511, 517), (511, 518), (511, 519), (511, 520), (511, 521), (511, 522), (511, 523), (511, 524), (511, 525), (511, 527), (511, 528), (512, 518), (512, 519), (512, 520), (512, 521), (512, 522), (512, 523), (512, 524), (512, 525), (512, 527), (512, 528), (513, 519), (513, 520), (513, 521), (513, 522), (513, 523), (513, 524), (513, 525), (513, 527), (513, 528), (514, 520), (514, 521), (514, 522), (514, 523), (514, 524), (514, 525), (514, 527), (514, 528), (515, 521), (515, 522), (515, 523), (515, 524), (515, 525), (515, 527), (515, 528), (518, 524), (518, 525), (518, 527), (518, 528), (519, 525), (519, 527), (519, 528), (520, 527), (520, 528), (521, 527), (521, 528), (522, 528)]"
4,5,5,2,False,"[(39, 46), (21, 26)]","[(39, 39), (31, 31), (33, 33)]","[[(56, 56), (43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (13, 13), (32, 32), (18, 18), (55, 55), (41, 41), (50, 50), (59, 59), (51, 51), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(19, 19), (28, 28), (15, 15)], [(34, 34), (55, 55), (33, 33)], [(5, 5), (7, 7), (29, 29)], [(56, 56), (43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (13, 13), (32, 32), (18, 18), (55, 55), (41, 41), (50, 50), (59, 59), (51, 51), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(21, 21), (27, 27), (20, 20)], [(56, 56), (43, 43), (52, 52), (20, 20), (29, 29), (38, 38), (33, 33), (37, 37), (39, 39), (42, 42), (2, 2), (48, 48), (57, 57), (34, 34), (11, 11), (53, 53), (30, 30), (7, 7), (16, 16), (25, 25), (58, 58), (26, 26), (35, 35), (44, 44), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (40, 40), (49, 49), (8, 8), (17, 17), (27, 27), (36, 36), (45, 45), (54, 54), (13, 13), (32, 32), (18, 18), (55, 55), (41, 41), (50, 50), (59, 59), (51, 51), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (46, 46), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (47, 47), (15, 15)], [(8, 8), (5, 5), (7, 7), (29, 29), (10, 10)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae7adf820>"": ""for (int ii = 0; ii < p.length; ii++) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdb2640>"": ""{\n    synchronized (LOCK) {\n        List<String[]> arrays = new ArrayList<String[]>(size());\n        String [] mimePathArray = split(this);\n\n        for(int i = 0; i <= mimePathArray.length; i++) {\n            // Create array for the i-th suffix and fill it with mime types\n            String [] arr = new String [mimePathArray.length - i];\n            for(int j = 0; j < arr.length; j++) {\n                arr[j] = mimePathArray[i + j];\n            }\n\n            // Add the array to the list\n            arrays.add(arr);\n\n            if (arr.length > 0) {\n                // For compound mime types fork the existing path and add its\n            // variant for the generic part of the mime type as well.\n            // E.g. text/x-ant+xml adds both text/x-ant+xml and text/xml\n                String genericMimeType = getGenericPartOfCompoundMimeType(arr[0]);\n                if (genericMimeType != null) {\n                    String arr2[] = new String [arr.length];\n                    System.arraycopy(arr, 0, arr2, 0, arr.length);\n                    arr2[0] = genericMimeType;\n\n                    // Add the generic version to the list\n                    arrays.add(arr2);\n                }\n            }\n        }\n\n        List<String> paths = new ArrayList<String>(arrays.size());\n\n        for (String[] p : arrays) {\n            StringBuffer sb = new StringBuffer(10 * p.length + 20);\n\n            if (prefixPath != null && prefixPath.length() > 0) {\n                sb.append(prefixPath);\n            }\n            for (int ii = 0; ii < p.length; ii++) {\n                if (p[ii].length() > 0) {\n                    if (sb.length() > 0) {\n                        sb.append('/'); //NOI18N\n                    }\n                    sb.append(p[ii]);\n                }\n            }\n            if (suffixPath != null && suffixPath.length() > 0) {\n                if (sb.length() > 0) {\n                    sb.append('/'); //NOI18N\n                }\n                sb.append(suffixPath);\n            }\n\n            paths.add(sb.toString());\n        }\n\n        return paths;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a850>"": ""String[] p : arrays"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfa60>"": ""{\n    String genericMimeType = getGenericPartOfCompoundMimeType(arr[0]);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a460>"": ""{\n    StringBuffer sb = new StringBuffer(10 * p.length + 20);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedf280>"": ""i++) {\n    String [] arr = new String [mimePathArray.length - i];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdb20a0>"": ""{\n    synchronized (LOCK) {\n        List<String[]> arrays = new ArrayList<String[]>(size());\n        String [] mimePathArray = split(this);\n\n        for(int i = 0; i <= mimePathArray.length; i++) {\n            // Create array for the i-th suffix and fill it with mime types\n            String [] arr = new String [mimePathArray.length - i];\n            for(int j = 0; j < arr.length; j++) {\n                arr[j] = mimePathArray[i + j];\n            }\n\n            // Add the array to the list\n            arrays.add(arr);\n\n            if (arr.length > 0) {\n                // For compound mime types fork the existing path and add its\n            // variant for the generic part of the mime type as well.\n            // E.g. text/x-ant+xml adds both text/x-ant+xml and text/xml\n                String genericMimeType = getGenericPartOfCompoundMimeType(arr[0]);\n                if (genericMimeType != null) {\n                    String arr2[] = new String [arr.length];\n                    System.arraycopy(arr, 0, arr2, 0, arr.length);\n                    arr2[0] = genericMimeType;\n\n                    // Add the generic version to the list\n                    arrays.add(arr2);\n                }\n            }\n        }\n\n        List<String> paths = new ArrayList<String>(arrays.size());\n\n        for (String[] p : arrays) {\n            StringBuffer sb = new StringBuffer(10 * p.length + 20);\n\n            if (prefixPath != null && prefixPath.length() > 0) {\n                sb.append(prefixPath);\n            }\n            for (int ii = 0; ii < p.length; ii++) {\n                if (p[ii].length() > 0) {\n                    if (sb.length() > 0) {\n                        sb.append('/'); //NOI18N\n                    }\n                    sb.append(p[ii]);\n                }\n            }\n            if (suffixPath != null && suffixPath.length() > 0) {\n                if (sb.length() > 0) {\n                    sb.append('/'); //NOI18N\n                }\n                sb.append(suffixPath);\n            }\n\n            paths.add(sb.toString());\n        }\n\n        return paths;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedf0a0>"": ""{\n    String arr2[] = new String [arr.length];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aeee6a8e0>"": ""List<String> paths = new ArrayList<String>(arrays.size());"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecdb2100>"": ""{\n    synchronized (LOCK) {\n        List<String[]> arrays = new ArrayList<String[]>(size());\n        String [] mimePathArray = split(this);\n\n        for(int i = 0; i <= mimePathArray.length; i++) {\n            // Create array for the i-th suffix and fill it with mime types\n            String [] arr = new String [mimePathArray.length - i];\n            for(int j = 0; j < arr.length; j++) {\n                arr[j] = mimePathArray[i + j];\n            }\n\n            // Add the array to the list\n            arrays.add(arr);\n\n            if (arr.length > 0) {\n                // For compound mime types fork the existing path and add its\n            // variant for the generic part of the mime type as well.\n            // E.g. text/x-ant+xml adds both text/x-ant+xml and text/xml\n                String genericMimeType = getGenericPartOfCompoundMimeType(arr[0]);\n                if (genericMimeType != null) {\n                    String arr2[] = new String [arr.length];\n                    System.arraycopy(arr, 0, arr2, 0, arr.length);\n                    arr2[0] = genericMimeType;\n\n                    // Add the generic version to the list\n                    arrays.add(arr2);\n                }\n            }\n        }\n\n        List<String> paths = new ArrayList<String>(arrays.size());\n\n        for (String[] p : arrays) {\n            StringBuffer sb = new StringBuffer(10 * p.length + 20);\n\n            if (prefixPath != null && prefixPath.length() > 0) {\n                sb.append(prefixPath);\n            }\n            for (int ii = 0; ii < p.length; ii++) {\n                if (p[ii].length() > 0) {\n                    if (sb.length() > 0) {\n                        sb.append('/'); //NOI18N\n                    }\n                    sb.append(p[ii]);\n                }\n            }\n            if (suffixPath != null && suffixPath.length() > 0) {\n                if (sb.length() > 0) {\n                    sb.append('/'); //NOI18N\n                }\n                sb.append(suffixPath);\n            }\n\n            paths.add(sb.toString());\n        }\n\n        return paths;\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfbb0>"": ""i++) {\n    String [] arr = new String [mimePathArray.length - i];\n    for(int j = 0; j < arr.length; j++) {\n    }\n}""}",7,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/editor.mimelookup/src/org/netbeans/api/editor/mimelookup/MimePath.java,getInheritedPaths,541,14.0,33.0,"[(580, 587), (562, 567)]","[(580, 580), (572, 572), (574, 574)]","[[(597, 597), (584, 584), (593, 593), (561, 561), (570, 570), (579, 579), (574, 574), (578, 578), (580, 580), (583, 583), (543, 543), (589, 589), (598, 598), (575, 575), (552, 552), (594, 594), (571, 571), (548, 548), (557, 557), (566, 566), (599, 599), (567, 567), (576, 576), (585, 585), (544, 544), (553, 553), (562, 562), (563, 563), (572, 572), (581, 581), (590, 590), (549, 549), (558, 558), (568, 568), (577, 577), (586, 586), (595, 595), (554, 554), (573, 573), (559, 559), (596, 596), (582, 582), (591, 591), (600, 600), (592, 592), (545, 545), (546, 546), (555, 555), (564, 564), (541, 541), (550, 550), (587, 587), (542, 542), (565, 565), (551, 551), (560, 560), (569, 569), (547, 547), (588, 588), (556, 556)], [(560, 560), (569, 569), (556, 556)], [(575, 575), (596, 596), (574, 574)], [(546, 546), (548, 548), (570, 570)], [(597, 597), (584, 584), (593, 593), (561, 561), (570, 570), (579, 579), (574, 574), (578, 578), (580, 580), (583, 583), (543, 543), (589, 589), (598, 598), (575, 575), (552, 552), (594, 594), (571, 571), (548, 548), (557, 557), (566, 566), (599, 599), (567, 567), (576, 576), (585, 585), (544, 544), (553, 553), (562, 562), (563, 563), (572, 572), (581, 581), (590, 590), (549, 549), (558, 558), (568, 568), (577, 577), (586, 586), (595, 595), (554, 554), (573, 573), (559, 559), (596, 596), (582, 582), (591, 591), (600, 600), (592, 592), (545, 545), (546, 546), (555, 555), (564, 564), (541, 541), (550, 550), (587, 587), (542, 542), (565, 565), (551, 551), (560, 560), (569, 569), (547, 547), (588, 588), (556, 556)], [(562, 562), (568, 568), (561, 561)], [(597, 597), (584, 584), (593, 593), (561, 561), (570, 570), (579, 579), (574, 574), (578, 578), (580, 580), (583, 583), (543, 543), (589, 589), (598, 598), (575, 575), (552, 552), (594, 594), (571, 571), (548, 548), (557, 557), (566, 566), (599, 599), (567, 567), (576, 576), (585, 585), (544, 544), (553, 553), (562, 562), (563, 563), (572, 572), (581, 581), (590, 590), (549, 549), (558, 558), (568, 568), (577, 577), (586, 586), (595, 595), (554, 554), (573, 573), (559, 559), (596, 596), (582, 582), (591, 591), (600, 600), (592, 592), (545, 545), (546, 546), (555, 555), (564, 564), (541, 541), (550, 550), (587, 587), (542, 542), (565, 565), (551, 551), (560, 560), (569, 569), (547, 547), (588, 588), (556, 556)], [(549, 549), (546, 546), (548, 548), (570, 570), (551, 551)]]","[(543, 570), (543, 572), (544, 570), (544, 572), (546, 570), (546, 572), (547, 553), (547, 554), (547, 569), (548, 554), (548, 569), (549, 569), (553, 569), (554, 569), (556, 569), (557, 568), (558, 568), (559, 568), (560, 568), (561, 568), (572, 596), (572, 598), (574, 596), (574, 598), (575, 587), (575, 593), (575, 595), (577, 587), (577, 593), (577, 595), (580, 587), (580, 593), (580, 595), (588, 595)]"
5,7,7,1,False,"[(27, 40), (17, 22)]","[(33, 33)]","[[(4, 4), (41, 41), (0, 0)], [(41, 41), (27, 27), (0, 0)], [(41, 41), (15, 15), (0, 0)], [(41, 41), (0, 0)], [(27, 27), (9, 9), (0, 0), (20, 20), (39, 39), (41, 41), (15, 15)], [(4, 4), (30, 30), (27, 27), (0, 0), (35, 35), (32, 32), (41, 41), (34, 34), (31, 31), (33, 33)], [(41, 41), (1, 1), (16, 16), (0, 0)], [(41, 41), (1, 1), (0, 0)], [(41, 41), (1, 1), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae7343220>"": ""Exception e"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae791ec70>"": ""{\n  String[] args = new String[2];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfc70>"": ""{\n  Configuration conf2 = new Configuration();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7adf6a0>"": ""{\n  Configuration conf1 = new Configuration();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343af0>"": ""public void testFilesOption() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7adf130>"": ""{\n  String files = conf.get(\""tmpfiles\"");\n  Configuration conf1 = new Configuration();\n  files = conf1.get(\""tmpfiles\"");\n  Configuration conf2 = new Configuration();\n  files = conf2.get(\""tmpfiles\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343370>"": ""{\n  String[] args = new String[2];\n  Configuration conf2 = new Configuration();\n  Throwable th = null;\n  try {\n    new GenericOptionsParser(conf2, args);\n  } catch (Exception e) {\n    th = e;\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7adf190>"": ""{\n  File tmpFile = new File(testDir, \""tmpfile\"");\n  URI tmpURI = new URI(tmpFile.toString() + \""#link\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae791ebe0>"": ""{\n  File tmpFile = new File(testDir, \""tmpfile\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae791e7f0>"": ""{\n  File tmpFile = new File(testDir, \""tmpfile\"");\n  Path tmpPath = new Path(tmpFile.toString());\n}""}",0,0,1,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hadoop/hadoop-1.0.0/src/hadoop-1.0.0/src/test/org/apache/hadoop/util/TestGenericOptionsParser.java,testFilesOption,91,2.0,30.0,"[(118, 131), (108, 113)]","[(124, 124)]","[[(95, 95), (132, 132), (91, 91)], [(132, 132), (118, 118), (91, 91)], [(132, 132), (106, 106), (91, 91)], [(132, 132), (91, 91)], [(118, 118), (100, 100), (91, 91), (111, 111), (130, 130), (132, 132), (106, 106)], [(95, 95), (121, 121), (118, 118), (91, 91), (126, 126), (123, 123), (132, 132), (125, 125), (122, 122), (124, 124)], [(132, 132), (92, 92), (107, 107), (91, 91)], [(132, 132), (92, 92), (91, 91)], [(132, 132), (92, 92), (93, 93), (91, 91)]]","[(92, 98), (92, 99), (92, 100), (92, 101), (92, 103), (92, 105), (92, 106), (92, 107), (92, 108), (92, 109), (92, 110), (92, 111), (92, 112), (92, 114), (92, 116), (92, 117), (92, 118), (92, 119), (92, 120), (92, 121), (93, 99), (93, 100), (93, 101), (93, 103), (93, 105), (93, 106), (93, 107), (93, 108), (93, 109), (93, 110), (93, 111), (93, 112), (93, 114), (93, 116), (93, 117), (93, 118), (93, 119), (93, 120), (93, 121), (94, 100), (94, 101), (94, 103), (94, 105), (94, 106), (94, 107), (94, 108), (94, 109), (94, 110), (94, 111), (94, 112), (94, 114), (94, 116), (94, 117), (94, 118), (94, 119), (94, 120), (94, 121), (95, 101), (95, 103), (95, 105), (95, 106), (95, 107), (95, 108), (95, 109), (95, 110), (95, 111), (95, 112), (95, 114), (95, 116), (95, 117), (95, 118), (95, 119), (95, 120), (95, 121), (95, 126), (96, 103), (96, 105), (96, 106), (96, 107), (96, 108), (96, 109), (96, 110), (96, 111), (96, 112), (96, 114), (96, 116), (96, 117), (96, 118), (96, 119), (96, 120), (96, 121), (96, 126), (96, 127), (97, 103), (97, 105), (97, 106), (97, 107), (97, 108), (97, 109), (97, 110), (97, 111), (97, 112), (97, 114), (97, 116), (97, 117), (97, 118), (97, 119), (97, 120), (97, 121), (97, 126), (97, 127), (98, 105), (98, 106), (98, 107), (98, 108), (98, 109), (98, 110), (98, 111), (98, 112), (98, 114), (98, 116), (98, 117), (98, 118), (98, 119), (98, 120), (98, 121), (98, 126), (98, 127), (98, 129), (99, 105), (99, 106), (99, 107), (99, 108), (99, 109), (99, 110), (99, 111), (99, 112), (99, 114), (99, 116), (99, 117), (99, 118), (99, 119), (99, 120), (99, 121), (99, 126), (99, 127), (99, 129), (99, 130), (100, 106), (100, 107), (100, 108), (100, 109), (100, 110), (100, 111), (100, 112), (100, 114), (100, 116), (100, 117), (100, 118), (100, 119), (100, 120), (100, 121), (100, 126), (100, 127), (100, 129), (100, 130), (100, 131), (101, 107), (101, 108), (101, 109), (101, 110), (101, 111), (101, 112), (101, 114), (101, 116), (101, 117), (101, 118), (101, 119), (101, 120), (101, 121), (101, 126), (101, 127), (101, 129), (101, 130), (101, 131), (102, 108), (102, 109), (102, 110), (102, 111), (102, 112), (102, 114), (102, 116), (102, 117), (102, 118), (102, 119), (102, 120), (102, 121), (102, 126), (102, 127), (102, 129), (102, 130), (102, 131), (105, 111), (105, 112), (105, 114), (105, 116), (105, 117), (105, 118), (105, 119), (105, 120), (105, 121), (105, 126), (105, 127), (105, 129), (105, 130), (105, 131), (106, 112), (106, 114), (106, 116), (106, 117), (106, 118), (106, 119), (106, 120), (106, 121), (106, 126), (106, 127), (106, 129), (106, 130), (106, 131), (107, 114), (107, 116), (107, 117), (107, 118), (107, 119), (107, 120), (107, 121), (107, 126), (107, 127), (107, 129), (107, 130), (107, 131), (108, 114), (108, 116), (108, 117), (108, 118), (108, 119), (108, 120), (108, 121), (108, 126), (108, 127), (108, 129), (108, 130), (108, 131), (109, 116), (109, 117), (109, 118), (109, 119), (109, 120), (109, 121), (109, 126), (109, 127), (109, 129), (109, 130), (109, 131), (110, 116), (110, 117), (110, 118), (110, 119), (110, 120), (110, 121), (110, 126), (110, 127), (110, 129), (110, 130), (110, 131), (111, 117), (111, 118), (111, 119), (111, 120), (111, 121), (111, 126), (111, 127), (111, 129), (111, 130), (111, 131), (112, 118), (112, 119), (112, 120), (112, 121), (112, 126), (112, 127), (112, 129), (112, 130), (112, 131), (113, 119), (113, 120), (113, 121), (113, 126), (113, 127), (113, 129), (113, 130), (113, 131), (116, 126), (116, 127), (116, 129), (116, 130), (116, 131), (117, 126), (117, 127), (117, 129), (117, 130), (117, 131), (118, 126), (118, 127), (118, 129), (118, 130), (118, 131), (119, 126), (119, 127), (119, 129), (119, 130), (119, 131), (120, 126), (120, 127), (120, 129), (120, 130), (120, 131), (121, 127), (121, 129), (121, 130), (121, 131), (122, 129), (122, 130), (122, 131)]"
6,8,8,1,False,[],[],"[[(1, 1), (47, 47), (0, 0)], [(1, 1), (47, 47), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae7343b80>"": ""public static Test suite() throws Exception {\r\n    TestSuite suite = new TestSuite(\""All org.castor.ddlgen.engine.sapdb tests\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedf730>"": ""public static Test suite() throws Exception {\r\n    TestSuite suite = new TestSuite(\""All org.castor.ddlgen.engine.sapdb tests\"");\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/castor/castor-1.3.1/src/castor-1.3.1/ddlgen/src/test/java/org/castor/ddlgen/engine/sapdb/SapdbGeneratorTest.java,suite,46,1.0,30.0,[],[],"[[(47, 47), (93, 93), (46, 46)], [(47, 47), (93, 93), (46, 46)]]","[(47, 53), (47, 55), (47, 56), (47, 57), (47, 58), (47, 59), (47, 61), (47, 62), (47, 63), (47, 64), (47, 65), (47, 66), (47, 67), (47, 68), (47, 70), (47, 71), (47, 72), (47, 73), (47, 74), (47, 75), (47, 76), (47, 78), (47, 79), (47, 80), (47, 81), (47, 83), (49, 55), (49, 56), (49, 57), (49, 58), (49, 59), (49, 61), (49, 62), (49, 63), (49, 64), (49, 65), (49, 66), (49, 67), (49, 68), (49, 70), (49, 71), (49, 72), (49, 73), (49, 74), (49, 75), (49, 76), (49, 78), (49, 79), (49, 80), (49, 81), (49, 83), (49, 84), (50, 56), (50, 57), (50, 58), (50, 59), (50, 61), (50, 62), (50, 63), (50, 64), (50, 65), (50, 66), (50, 67), (50, 68), (50, 70), (50, 71), (50, 72), (50, 73), (50, 74), (50, 75), (50, 76), (50, 78), (50, 79), (50, 80), (50, 81), (50, 83), (50, 84), (50, 86), (52, 58), (52, 59), (52, 61), (52, 62), (52, 63), (52, 64), (52, 65), (52, 66), (52, 67), (52, 68), (52, 70), (52, 71), (52, 72), (52, 73), (52, 74), (52, 75), (52, 76), (52, 78), (52, 79), (52, 80), (52, 81), (52, 83), (52, 84), (52, 86), (52, 87), (52, 88), (53, 59), (53, 61), (53, 62), (53, 63), (53, 64), (53, 65), (53, 66), (53, 67), (53, 68), (53, 70), (53, 71), (53, 72), (53, 73), (53, 74), (53, 75), (53, 76), (53, 78), (53, 79), (53, 80), (53, 81), (53, 83), (53, 84), (53, 86), (53, 87), (53, 88), (53, 89), (55, 61), (55, 62), (55, 63), (55, 64), (55, 65), (55, 66), (55, 67), (55, 68), (55, 70), (55, 71), (55, 72), (55, 73), (55, 74), (55, 75), (55, 76), (55, 78), (55, 79), (55, 80), (55, 81), (55, 83), (55, 84), (55, 86), (55, 87), (55, 88), (55, 89), (55, 90), (56, 62), (56, 63), (56, 64), (56, 65), (56, 66), (56, 67), (56, 68), (56, 70), (56, 71), (56, 72), (56, 73), (56, 74), (56, 75), (56, 76), (56, 78), (56, 79), (56, 80), (56, 81), (56, 83), (56, 84), (56, 86), (56, 87), (56, 88), (56, 89), (56, 90), (56, 92), (57, 63), (57, 64), (57, 65), (57, 66), (57, 67), (57, 68), (57, 70), (57, 71), (57, 72), (57, 73), (57, 74), (57, 75), (57, 76), (57, 78), (57, 79), (57, 80), (57, 81), (57, 83), (57, 84), (57, 86), (57, 87), (57, 88), (57, 89), (57, 90), (57, 92), (58, 64), (58, 65), (58, 66), (58, 67), (58, 68), (58, 70), (58, 71), (58, 72), (58, 73), (58, 74), (58, 75), (58, 76), (58, 78), (58, 79), (58, 80), (58, 81), (58, 83), (58, 84), (58, 86), (58, 87), (58, 88), (58, 89), (58, 90), (58, 92), (59, 65), (59, 66), (59, 67), (59, 68), (59, 70), (59, 71), (59, 72), (59, 73), (59, 74), (59, 75), (59, 76), (59, 78), (59, 79), (59, 80), (59, 81), (59, 83), (59, 84), (59, 86), (59, 87), (59, 88), (59, 89), (59, 90), (59, 92), (61, 67), (61, 68), (61, 70), (61, 71), (61, 72), (61, 73), (61, 74), (61, 75), (61, 76), (61, 78), (61, 79), (61, 80), (61, 81), (61, 83), (61, 84), (61, 86), (61, 87), (61, 88), (61, 89), (61, 90), (61, 92), (62, 68), (62, 70), (62, 71), (62, 72), (62, 73), (62, 74), (62, 75), (62, 76), (62, 78), (62, 79), (62, 80), (62, 81), (62, 83), (62, 84), (62, 86), (62, 87), (62, 88), (62, 89), (62, 90), (62, 92), (63, 70), (63, 71), (63, 72), (63, 73), (63, 74), (63, 75), (63, 76), (63, 78), (63, 79), (63, 80), (63, 81), (63, 83), (63, 84), (63, 86), (63, 87), (63, 88), (63, 89), (63, 90), (63, 92), (64, 70), (64, 71), (64, 72), (64, 73), (64, 74), (64, 75), (64, 76), (64, 78), (64, 79), (64, 80), (64, 81), (64, 83), (64, 84), (64, 86), (64, 87), (64, 88), (64, 89), (64, 90), (64, 92), (65, 71), (65, 72), (65, 73), (65, 74), (65, 75), (65, 76), (65, 78), (65, 79), (65, 80), (65, 81), (65, 83), (65, 84), (65, 86), (65, 87), (65, 88), (65, 89), (65, 90), (65, 92), (66, 72), (66, 73), (66, 74), (66, 75), (66, 76), (66, 78), (66, 79), (66, 80), (66, 81), (66, 83), (66, 84), (66, 86), (66, 87), (66, 88), (66, 89), (66, 90), (66, 92), (67, 73), (67, 74), (67, 75), (67, 76), (67, 78), (67, 79), (67, 80), (67, 81), (67, 83), (67, 84), (67, 86), (67, 87), (67, 88), (67, 89), (67, 90), (67, 92), (68, 74), (68, 75), (68, 76), (68, 78), (68, 79), (68, 80), (68, 81), (68, 83), (68, 84), (68, 86), (68, 87), (68, 88), (68, 89), (68, 90), (68, 92), (70, 76), (70, 78), (70, 79), (70, 80), (70, 81), (70, 83), (70, 84), (70, 86), (70, 87), (70, 88), (70, 89), (70, 90), (70, 92), (71, 78), (71, 79), (71, 80), (71, 81), (71, 83), (71, 84), (71, 86), (71, 87), (71, 88), (71, 89), (71, 90), (71, 92), (72, 78), (72, 79), (72, 80), (72, 81), (72, 83), (72, 84), (72, 86), (72, 87), (72, 88), (72, 89), (72, 90), (72, 92), (73, 79), (73, 80), (73, 81), (73, 83), (73, 84), (73, 86), (73, 87), (73, 88), (73, 89), (73, 90), (73, 92), (74, 80), (74, 81), (74, 83), (74, 84), (74, 86), (74, 87), (74, 88), (74, 89), (74, 90), (74, 92), (75, 81), (75, 83), (75, 84), (75, 86), (75, 87), (75, 88), (75, 89), (75, 90), (75, 92), (76, 83), (76, 84), (76, 86), (76, 87), (76, 88), (76, 89), (76, 90), (76, 92), (78, 84), (78, 86), (78, 87), (78, 88), (78, 89), (78, 90), (78, 92), (79, 86), (79, 87), (79, 88), (79, 89), (79, 90), (79, 92), (80, 86), (80, 87), (80, 88), (80, 89), (80, 90), (80, 92), (81, 87), (81, 88), (81, 89), (81, 90), (81, 92), (83, 89), (83, 90), (83, 92), (84, 90), (84, 92), (86, 92)]"
7,9,9,1,False,"[(28, 45), (9, 18), (28, 34)]",[],"[[(7, 7), (9, 9), (0, 0), (1, 1), (28, 28), (3, 3), (48, 48)], [(4, 4), (8, 8), (30, 30), (5, 5), (7, 7), (0, 0), (9, 9), (1, 1), (36, 36), (29, 29), (48, 48), (10, 10), (28, 28), (3, 3), (2, 2), (11, 11)], [(48, 48), (1, 1), (7, 7), (0, 0)], [(29, 29), (38, 38), (39, 39), (2, 2), (48, 48), (11, 11), (30, 30), (7, 7), (35, 35), (3, 3), (40, 40), (8, 8), (36, 36), (45, 45), (4, 4), (5, 5), (0, 0), (9, 9), (1, 1), (10, 10), (28, 28), (37, 37)], [(4, 4), (7, 7), (0, 0), (1, 1), (29, 29), (10, 10), (48, 48)], [(37, 37), (45, 45), (36, 36)], [(48, 48), (8, 8), (2, 2), (0, 0)], [(4, 4), (8, 8), (30, 30), (5, 5), (7, 7), (0, 0), (9, 9), (1, 1), (29, 29), (48, 48), (10, 10), (28, 28), (3, 3), (2, 2), (11, 11)], [(48, 48), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae7343a00>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n          CoordinateReferenceSystem  sourceCRS;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4230\"");\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedf820>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n    final CoordinateOperationFactory opFactory;\n          CoordinateReferenceSystem  sourceCRS;\n          CoordinateReferenceSystem  targetCRS;\n          CoordinateOperation        operation;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n    opFactory  = ReferencingFactoryFinder.getCoordinateOperationFactory(null);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4230\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""2995\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n    for (final Iterator it=((ConcatenatedOperation) operation).getOperations().iterator();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343880>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfcd0>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n    final CoordinateOperationFactory opFactory;\n          CoordinateReferenceSystem  sourceCRS;\n          CoordinateReferenceSystem  targetCRS;\n          CoordinateOperation        operation;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n    opFactory  = ReferencingFactoryFinder.getCoordinateOperationFactory(null);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4230\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""2995\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n    int count = 0;\n    for (final Iterator it=((ConcatenatedOperation) operation).getOperations().iterator(); it.hasNext();) {\n        final CoordinateOperation op = (CoordinateOperation) it.next();\n        if (op instanceof Transformation) {\n            count++;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae73434f0>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n          CoordinateReferenceSystem  targetCRS;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""2995\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7100>"": ""{\n    final CoordinateOperation op = (CoordinateOperation) it.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343130>"": ""{\n    final CoordinateOperationFactory opFactory;\n    opFactory  = ReferencingFactoryFinder.getCoordinateOperationFactory(null);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343370>"": ""{\n    final CRSAuthorityFactory       crsFactory;\n    final CoordinateOperationFactory opFactory;\n          CoordinateReferenceSystem  sourceCRS;\n          CoordinateReferenceSystem  targetCRS;\n          CoordinateOperation        operation;\n    crsFactory = ReferencingFactoryFinder.getCRSAuthorityFactory(\""EPSG\"", null);\n    opFactory  = ReferencingFactoryFinder.getCoordinateOperationFactory(null);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4230\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n    sourceCRS  = crsFactory.createCoordinateReferenceSystem(\""4326\"");\n    targetCRS  = crsFactory.createCoordinateReferenceSystem(\""2995\"");\n    operation  = opFactory.createOperation(sourceCRS, targetCRS);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae73439a0>"": ""public void testCreate() throws FactoryException {\n}""}",2,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/unsupported/epsg-h2/src/test/java/org/geotools/referencing/factory/epsg/OperationFactoryTest.java,testCreate,94,3.0,33.0,"[(122, 139), (103, 112), (122, 128)]",[],"[[(101, 101), (103, 103), (94, 94), (95, 95), (122, 122), (97, 97), (142, 142)], [(98, 98), (102, 102), (124, 124), (99, 99), (101, 101), (94, 94), (103, 103), (95, 95), (130, 130), (123, 123), (142, 142), (104, 104), (122, 122), (97, 97), (96, 96), (105, 105)], [(142, 142), (95, 95), (101, 101), (94, 94)], [(123, 123), (132, 132), (133, 133), (96, 96), (142, 142), (105, 105), (124, 124), (101, 101), (129, 129), (97, 97), (134, 134), (102, 102), (130, 130), (139, 139), (98, 98), (99, 99), (94, 94), (103, 103), (95, 95), (104, 104), (122, 122), (131, 131)], [(98, 98), (101, 101), (94, 94), (95, 95), (123, 123), (104, 104), (142, 142)], [(131, 131), (139, 139), (130, 130)], [(142, 142), (102, 102), (96, 96), (94, 94)], [(98, 98), (102, 102), (124, 124), (99, 99), (101, 101), (94, 94), (103, 103), (95, 95), (123, 123), (142, 142), (104, 104), (122, 122), (97, 97), (96, 96), (105, 105)], [(142, 142), (94, 94)]]","[(95, 101), (95, 102), (95, 103), (95, 104), (95, 105), (95, 107), (95, 108), (95, 109), (95, 111), (95, 114), (95, 115), (95, 115), (95, 116), (95, 117), (95, 121), (95, 122), (95, 123), (95, 124), (95, 126), (95, 127), (95, 128), (95, 129), (96, 102), (96, 103), (96, 104), (96, 105), (96, 107), (96, 108), (96, 109), (96, 111), (96, 114), (96, 115), (96, 115), (96, 116), (96, 117), (96, 121), (96, 122), (96, 123), (96, 124), (96, 126), (96, 127), (96, 128), (96, 129), (97, 103), (97, 104), (97, 105), (97, 107), (97, 108), (97, 109), (97, 111), (97, 114), (97, 115), (97, 115), (97, 116), (97, 117), (97, 121), (97, 122), (97, 123), (97, 124), (97, 126), (97, 127), (97, 128), (97, 129), (98, 104), (98, 105), (98, 107), (98, 108), (98, 109), (98, 111), (98, 114), (98, 115), (98, 115), (98, 116), (98, 117), (98, 121), (98, 122), (98, 123), (98, 124), (98, 126), (98, 127), (98, 128), (98, 129), (99, 105), (99, 107), (99, 108), (99, 109), (99, 111), (99, 114), (99, 115), (99, 115), (99, 116), (99, 117), (99, 121), (99, 122), (99, 123), (99, 124), (99, 126), (99, 127), (99, 128), (99, 129), (101, 107), (101, 108), (101, 109), (101, 111), (101, 114), (101, 115), (101, 115), (101, 116), (101, 117), (101, 121), (101, 122), (101, 123), (101, 124), (101, 126), (101, 127), (101, 128), (101, 129), (102, 108), (102, 109), (102, 111), (102, 114), (102, 115), (102, 115), (102, 116), (102, 117), (102, 121), (102, 122), (102, 123), (102, 124), (102, 126), (102, 127), (102, 128), (102, 129), (102, 139), (103, 109), (103, 111), (103, 114), (103, 115), (103, 115), (103, 116), (103, 117), (103, 121), (103, 122), (103, 123), (103, 124), (103, 126), (103, 127), (103, 128), (103, 129), (103, 139), (103, 140), (104, 111), (104, 114), (104, 115), (104, 115), (104, 116), (104, 117), (104, 121), (104, 122), (104, 123), (104, 124), (104, 126), (104, 127), (104, 128), (104, 129), (104, 139), (104, 140), (104, 141), (105, 111), (105, 114), (105, 115), (105, 115), (105, 116), (105, 117), (105, 121), (105, 122), (105, 123), (105, 124), (105, 126), (105, 127), (105, 128), (105, 129), (105, 139), (105, 140), (105, 141), (107, 114), (107, 115), (107, 115), (107, 116), (107, 117), (107, 121), (107, 122), (107, 123), (107, 124), (107, 126), (107, 127), (107, 128), (107, 129), (107, 139), (107, 140), (107, 141), (108, 114), (108, 115), (108, 115), (108, 116), (108, 117), (108, 121), (108, 122), (108, 123), (108, 124), (108, 126), (108, 127), (108, 128), (108, 129), (108, 139), (108, 140), (108, 141), (109, 115), (109, 115), (109, 116), (109, 117), (109, 121), (109, 122), (109, 123), (109, 124), (109, 126), (109, 127), (109, 128), (109, 129), (109, 139), (109, 140), (109, 141), (110, 116), (110, 117), (110, 121), (110, 122), (110, 123), (110, 124), (110, 126), (110, 127), (110, 128), (110, 129), (110, 139), (110, 140), (110, 141), (112, 121), (112, 122), (112, 123), (112, 124), (112, 126), (112, 127), (112, 128), (112, 129), (112, 139), (112, 140), (112, 141), (115, 121), (115, 121), (115, 122), (115, 122), (115, 123), (115, 123), (115, 124), (115, 124), (115, 126), (115, 126), (115, 127), (115, 127), (115, 128), (115, 128), (115, 129), (115, 129), (115, 139), (115, 139), (115, 140), (115, 140), (115, 141), (115, 141), (116, 122), (116, 123), (116, 124), (116, 126), (116, 127), (116, 128), (116, 129), (116, 139), (116, 140), (116, 141), (117, 123), (117, 124), (117, 126), (117, 127), (117, 128), (117, 129), (117, 139), (117, 140), (117, 141), (118, 124), (118, 126), (118, 127), (118, 128), (118, 129), (118, 139), (118, 140), (118, 141), (122, 128), (122, 129), (122, 139), (122, 140), (122, 141), (123, 129), (123, 139), (123, 140), (123, 141), (124, 139), (124, 140), (124, 141), (125, 139), (125, 140), (125, 141), (127, 139), (127, 140), (127, 141), (128, 139), (128, 140), (128, 141), (129, 139), (129, 140), (129, 141), (130, 139), (130, 140), (130, 141), (131, 138), (132, 138)]"
8,10,10,1,False,"[(24, 34), (12, 21)]","[(27, 27), (24, 24)]","[[(12, 12), (35, 35), (0, 0)], [(19, 19), (30, 30), (13, 13)], [(30, 30), (31, 31), (33, 33)], [(28, 28), (27, 27), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae7343a00>"": ""{\n  TreeSet<BytesRef> dictionary = new TreeSet<BytesRef>();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfc70>"": ""int valueCount = dictionary.size();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7343670>"": ""BytesRef v : values\nBytesRef v : dictionary\nBytesRef v : values"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7adf6d0>"": ""final int maxDoc = state.segmentInfo.getDocCount();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f78e0>"": ""{\n  int ord = dictionary.headSet(v).size();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae7adfb20>"": ""int valueCount = dictionary.size();\nfinal int maxDoc = state.segmentInfo.getDocCount();\nfinal PackedInts.Writer w = PackedInts.getWriter(index, maxDoc, PackedInts.bitsRequired(valueCount-1), PackedInts.DEFAULT);""}",3,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter.java,addFixedDerefBytesField,290,4.0,22.0,"[(314, 324), (302, 311)]","[(317, 317), (314, 314)]","[[(302, 302), (325, 325), (290, 290)], [(309, 309), (320, 320), (303, 303)], [(320, 320), (321, 321), (323, 323)], [(318, 318), (317, 317), (314, 314)]]","[(291, 299), (291, 301), (291, 302), (291, 305), (291, 307), (291, 308), (291, 311), (291, 313), (291, 314), (291, 315), (291, 316), (291, 317), (291, 318), (293, 299), (293, 301), (293, 302), (293, 305), (293, 307), (293, 308), (293, 311), (293, 313), (293, 314), (293, 315), (293, 316), (293, 317), (293, 318), (297, 305), (297, 307), (297, 308), (297, 311), (297, 313), (297, 314), (297, 315), (297, 316), (297, 317), (297, 318), (297, 323), (297, 324), (301, 307), (301, 308), (301, 311), (301, 313), (301, 314), (301, 315), (301, 316), (301, 317), (301, 318), (301, 323), (301, 324), (302, 308), (302, 311), (302, 313), (302, 314), (302, 315), (302, 316), (302, 317), (302, 318), (302, 323), (302, 324), (303, 311), (303, 313), (303, 314), (303, 315), (303, 316), (303, 317), (303, 318), (303, 323), (303, 324), (307, 313), (307, 314), (307, 315), (307, 316), (307, 317), (307, 318), (307, 323), (307, 324), (308, 314), (308, 315), (308, 316), (308, 317), (308, 318), (308, 323), (308, 324), (309, 315), (309, 316), (309, 317), (309, 318), (309, 323), (309, 324), (313, 323), (313, 324), (314, 323), (314, 324), (315, 323), (315, 324), (316, 323), (316, 324), (317, 323), (317, 324), (318, 324)]"
9,11,11,2,False,"[(36, 48)]",[],"[[(20, 20), (29, 29), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (12, 12), (21, 21), (22, 22), (31, 31), (17, 17), (27, 27), (13, 13), (32, 32), (18, 18), (15, 15), (51, 51), (14, 14), (23, 23), (9, 9), (10, 10), (19, 19), (28, 28), (6, 6), (24, 24)], [(6, 6), (10, 10), (51, 51)], [(6, 6), (51, 51), (7, 7)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae63c2190>"": ""{\r\n    Stroke stroke = null;\n    float penWidth = 1f;\n    if (styleName == JRPen.LINE_STYLE_SOLID)\r\n    {\r\n        stroke = (Stroke) new BasicStroke(penWidth);\n    }\n    else if (styleName == JRPen.LINE_STYLE_DASHED)\r\n    {\r\n        stroke =  (Stroke) new BasicStroke(penWidth, \r\n                                    BasicStroke.CAP_BUTT, \r\n                                    BasicStroke.JOIN_BEVEL, 0f, \r\n                                    new float[] { 5f, 3f }, 0f);\n    }\n    else if (styleName == JRPen.LINE_STYLE_DOTTED)\r\n    {\r\n        stroke =  (Stroke) new BasicStroke(penWidth, \r\n                                    BasicStroke.CAP_BUTT, \r\n                                    BasicStroke.JOIN_BEVEL, 0f, \r\n                                    new float[] { 1f*penWidth, 1f*penWidth }, 0f);\n    }\n    else if (styleName == JRPen.LINE_STYLE_DOUBLE)\r\n    {\r\n        stroke =  (Stroke) new BasicStroke((penWidth/3f));\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c20d0>"": ""{\r\n    float penWidth = 1f;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae63c23d0>"": ""{\r\n    Stroke oldStroke = ((Graphics2D)g).getStroke();\n}""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/ireport/ireport-3.7.5/src/iReport-3.7.5-src/ireport-designer/src/com/jaspersoft/ireport/designer/sheet/editors/box/LineStyleListCellRenderer.java,paint,92,8.0,31.0,"[(128, 140)]",[],"[[(112, 112), (121, 121), (103, 103), (122, 122), (108, 108), (117, 117), (118, 118), (104, 104), (113, 113), (114, 114), (123, 123), (109, 109), (119, 119), (105, 105), (124, 124), (110, 110), (107, 107), (143, 143), (106, 106), (115, 115), (101, 101), (102, 102), (111, 111), (120, 120), (98, 98), (116, 116)], [(98, 98), (102, 102), (143, 143)], [(98, 98), (143, 143), (99, 99)]]","[(99, 124), (99, 141), (99, 142), (101, 124), (101, 141), (101, 142), (102, 124), (102, 141), (102, 142), (103, 124), (103, 141), (103, 142), (107, 113), (107, 124), (108, 124), (114, 120), (114, 124), (114, 124), (115, 124), (126, 141), (126, 142), (128, 140), (130, 140), (132, 140)]"
10,12,12,1,False,"[(4, 10)]",[],"[[(59, 59), (2, 2), (0, 0)], [(52, 52), (20, 20), (38, 38), (48, 48), (57, 57), (34, 34), (53, 53), (30, 30), (26, 26), (44, 44), (40, 40), (22, 22), (36, 36), (13, 13), (32, 32), (18, 18), (55, 55), (50, 50), (14, 14), (46, 46), (28, 28), (24, 24)], [(4, 4), (59, 59), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4aecedf100>"": ""{\r\n    StringBuffer strbuf = new StringBuffer();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae71f7b80>"": ""String result = strbuf.toString();\nresult = DisableHtmlTagFilter.filter(result);\nresult = result.replaceAll(\""(.*):\\\\)(.*)\"", \""$1\\\\[:\\\\)\\\\]$2\"");\nresult = result.replaceAll(\""(.*):\\\\((.*)\"", \""$1\\\\[:\\\\(\\\\]$2\"");\nresult = result.replaceAll(\""(.*):D(.*)\"", \""$1\\\\[:D\\\\]$2\"");\nresult = result.replaceAll(\""(.*):lol:(.*)\"", \""$1\\\\[:\\\\)\\\\)\\\\]$2\"");\nresult = result.replaceAll(\""(.*):cry:(.*)\"", \""$1\\\\[:\\\\(\\\\(\\\\]$2\"");\nresult = result.replaceAll(\""(.*):wink:(.*)\"", \""$1\\\\[;\\\\)\\\\]$2\"");\nresult = result.replaceAll(\""(.*):oops:(.*)\"", \""$1\\\\[:\\\"">\\\\]$2\"");\nresult = result.replaceAll(\""(.*):p(.*)\"", \""$1\\\\[:p\\\\]$2\"");\nresult = result.replaceAll(\""(.*)8\\\\)(.*)\"", \""$1\\\\[B-\\\\)\\\\]$2\"");\nresult = result.replaceAll(\""(.*):\\\\?(.*)\"", \""$1\\\\[:-/\\\\]$2\"");\nresult = result.replaceAll(\""(.*):shock:(.*)\"", \""$1\\\\[:O\\\\]$2\"");\nresult = result.replaceAll(\""(.*):evil:(.*)\"", \""$1\\\\[>:\\\\)\\\\]$2\"");\nresult = result.replaceAll(\""(.*)\\\\[url\\\\](.*)\\\\[/url\\\\](.*)\"", \""$1\\\\[url=$2\\\\]$2\\\\[/url\\\\]$3\"");\nresult = result.replaceAll(\""(.*)\\\\[b:[0-9,abcdef]*\\\\](.*)\\\\[/b:[0-9,abcdef]*\\\\](.*)\"", \""$1\\\\[b\\\\]$2\\\\[/b\\\\]$3\"");\nresult = result.replaceAll(\""(.*)\\\\[u:[0-9,abcdef]*\\\\](.*)\\\\[/u:[0-9,abcdef]*\\\\](.*)\"", \""$1\\\\[u\\\\]$2\\\\[/u\\\\]$3\"");\nresult = result.replaceAll(\""(.*)\\\\[i:[0-9,abcdef]*\\\\](.*)\\\\[/i:[0-9,abcdef]*\\\\](.*)\"", \""$1\\\\[i\\\\]$2\\\\[/i\\\\]$3\"");\nresult = result.replaceAll(\""(.*)\\\\[color=([a-z]*):[0-9,abcdef]*\\\\](.*)\\\\[/color:[0-9,abcdef]*\\\\](.*)\"",\r\n        \""$1\\\\[color=$2\\\\]$3\\\\[/color\\\\]$4\"");\nresult = result.replaceAll(\""(.*)\\\\[quote:[0-9,abcdef]*\\\\](.*)\\\\[/quote:[0-9,abcdef]*\\\\](.*)\"", \""$1\\\\[quote=\\\\]$2\\\\[/quote\\\\]$3\"");\nresult = result.replaceAll(\""(.*)\\\\[quote:[0-9,abcdef]*=\\\\\\\""(.*)\\\\\\\""\\\\](.*)\\\\[/quote:[0-9,abcdef]*\\\\](.*)\"", \""$1\\\\[quote=\\\\\\\""$2\\\\\\\""\\\\]$3\\\\[/quote\\\\]$4\"");"", ""<program_slicing.graph.statement.Statement object at 0x7f4aecedfb80>"": ""{\r\n    for (int i = 0; i < text.length(); i++) {\r\n}""}",2,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/mvnforum/mvnforum-1.2.2-ga/src/mvnforum-1.2.2-mvnad-1.0.1-src-20100817/mvnforum/contrib/phpbb2mvnforum/src/org/mvnforum/util/Utils.java,wrapIt,135,3.0,29.0,"[(139, 145)]",[],"[[(194, 194), (137, 137), (135, 135)], [(187, 187), (155, 155), (173, 173), (183, 183), (192, 192), (169, 169), (188, 188), (165, 165), (161, 161), (179, 179), (175, 175), (157, 157), (171, 171), (148, 148), (167, 167), (153, 153), (190, 190), (185, 185), (149, 149), (181, 181), (163, 163), (159, 159)], [(139, 139), (194, 194), (135, 135)]]","[(137, 145), (137, 146), (137, 148), (137, 149), (137, 151), (137, 152), (137, 153), (137, 154), (137, 155), (137, 156), (137, 157), (137, 158), (137, 159), (137, 160), (137, 161), (137, 162), (137, 163), (137, 164), (137, 165), (137, 166), (137, 167), (137, 168), (137, 169), (137, 170), (137, 171), (137, 172), (137, 173), (137, 174), (137, 175), (137, 177), (137, 178), (137, 179), (137, 180), (137, 181), (137, 182), (137, 183), (138, 145), (138, 146), (138, 148), (138, 149), (138, 151), (138, 152), (138, 153), (138, 154), (138, 155), (138, 156), (138, 157), (138, 158), (138, 159), (138, 160), (138, 161), (138, 162), (138, 163), (138, 164), (138, 165), (138, 166), (138, 167), (138, 168), (138, 169), (138, 170), (138, 171), (138, 172), (138, 173), (138, 174), (138, 175), (138, 177), (138, 178), (138, 179), (138, 180), (138, 181), (138, 182), (138, 183), (138, 184), (139, 145), (139, 146), (139, 148), (139, 149), (139, 151), (139, 152), (139, 153), (139, 154), (139, 155), (139, 156), (139, 157), (139, 158), (139, 159), (139, 160), (139, 161), (139, 162), (139, 163), (139, 164), (139, 165), (139, 166), (139, 167), (139, 168), (139, 169), (139, 170), (139, 171), (139, 172), (139, 173), (139, 174), (139, 175), (139, 177), (139, 178), (139, 179), (139, 180), (139, 181), (139, 182), (139, 183), (139, 184), (139, 185), (146, 152), (146, 153), (146, 154), (146, 155), (146, 156), (146, 157), (146, 158), (146, 159), (146, 160), (146, 161), (146, 162), (146, 163), (146, 164), (146, 165), (146, 166), (146, 167), (146, 168), (146, 169), (146, 170), (146, 171), (146, 172), (146, 173), (146, 174), (146, 175), (146, 177), (146, 178), (146, 179), (146, 180), (146, 181), (146, 182), (146, 183), (146, 184), (146, 185), (146, 186), (146, 188), (146, 189), (146, 190), (146, 191), (146, 192), (148, 154), (148, 155), (148, 156), (148, 157), (148, 158), (148, 159), (148, 160), (148, 161), (148, 162), (148, 163), (148, 164), (148, 165), (148, 166), (148, 167), (148, 168), (148, 169), (148, 170), (148, 171), (148, 172), (148, 173), (148, 174), (148, 175), (148, 177), (148, 178), (148, 179), (148, 180), (148, 181), (148, 182), (148, 183), (148, 184), (148, 185), (148, 186), (148, 188), (148, 189), (148, 190), (148, 191), (148, 192), (148, 193), (149, 155), (149, 156), (149, 157), (149, 158), (149, 159), (149, 160), (149, 161), (149, 162), (149, 163), (149, 164), (149, 165), (149, 166), (149, 167), (149, 168), (149, 169), (149, 170), (149, 171), (149, 172), (149, 173), (149, 174), (149, 175), (149, 177), (149, 178), (149, 179), (149, 180), (149, 181), (149, 182), (149, 183), (149, 184), (149, 185), (149, 186), (149, 188), (149, 189), (149, 190), (149, 191), (149, 192), (149, 193), (151, 157), (151, 158), (151, 159), (151, 160), (151, 161), (151, 162), (151, 163), (151, 164), (151, 165), (151, 166), (151, 167), (151, 168), (151, 169), (151, 170), (151, 171), (151, 172), (151, 173), (151, 174), (151, 175), (151, 177), (151, 178), (151, 179), (151, 180), (151, 181), (151, 182), (151, 183), (151, 184), (151, 185), (151, 186), (151, 188), (151, 189), (151, 190), (151, 191), (151, 192), (151, 193), (152, 158), (152, 159), (152, 160), (152, 161), (152, 162), (152, 163), (152, 164), (152, 165), (152, 166), (152, 167), (152, 168), (152, 169), (152, 170), (152, 171), (152, 172), (152, 173), (152, 174), (152, 175), (152, 177), (152, 178), (152, 179), (152, 180), (152, 181), (152, 182), (152, 183), (152, 184), (152, 185), (152, 186), (152, 188), (152, 189), (152, 190), (152, 191), (152, 192), (152, 193), (153, 159), (153, 160), (153, 161), (153, 162), (153, 163), (153, 164), (153, 165), (153, 166), (153, 167), (153, 168), (153, 169), (153, 170), (153, 171), (153, 172), (153, 173), (153, 174), (153, 175), (153, 177), (153, 178), (153, 179), (153, 180), (153, 181), (153, 182), (153, 183), (153, 184), (153, 185), (153, 186), (153, 188), (153, 189), (153, 190), (153, 191), (153, 192), (153, 193), (154, 160), (154, 161), (154, 162), (154, 163), (154, 164), (154, 165), (154, 166), (154, 167), (154, 168), (154, 169), (154, 170), (154, 171), (154, 172), (154, 173), (154, 174), (154, 175), (154, 177), (154, 178), (154, 179), (154, 180), (154, 181), (154, 182), (154, 183), (154, 184), (154, 185), (154, 186), (154, 188), (154, 189), (154, 190), (154, 191), (154, 192), (154, 193), (155, 161), (155, 162), (155, 163), (155, 164), (155, 165), (155, 166), (155, 167), (155, 168), (155, 169), (155, 170), (155, 171), (155, 172), (155, 173), (155, 174), (155, 175), (155, 177), (155, 178), (155, 179), (155, 180), (155, 181), (155, 182), (155, 183), (155, 184), (155, 185), (155, 186), (155, 188), (155, 189), (155, 190), (155, 191), (155, 192), (155, 193), (156, 162), (156, 163), (156, 164), (156, 165), (156, 166), (156, 167), (156, 168), (156, 169), (156, 170), (156, 171), (156, 172), (156, 173), (156, 174), (156, 175), (156, 177), (156, 178), (156, 179), (156, 180), (156, 181), (156, 182), (156, 183), (156, 184), (156, 185), (156, 186), (156, 188), (156, 189), (156, 190), (156, 191), (156, 192), (156, 193), (157, 163), (157, 164), (157, 165), (157, 166), (157, 167), (157, 168), (157, 169), (157, 170), (157, 171), (157, 172), (157, 173), (157, 174), (157, 175), (157, 177), (157, 178), (157, 179), (157, 180), (157, 181), (157, 182), (157, 183), (157, 184), (157, 185), (157, 186), (157, 188), (157, 189), (157, 190), (157, 191), (157, 192), (157, 193), (158, 164), (158, 165), (158, 166), (158, 167), (158, 168), (158, 169), (158, 170), (158, 171), (158, 172), (158, 173), (158, 174), (158, 175), (158, 177), (158, 178), (158, 179), (158, 180), (158, 181), (158, 182), (158, 183), (158, 184), (158, 185), (158, 186), (158, 188), (158, 189), (158, 190), (158, 191), (158, 192), (158, 193), (159, 165), (159, 166), (159, 167), (159, 168), (159, 169), (159, 170), (159, 171), (159, 172), (159, 173), (159, 174), (159, 175), (159, 177), (159, 178), (159, 179), (159, 180), (159, 181), (159, 182), (159, 183), (159, 184), (159, 185), (159, 186), (159, 188), (159, 189), (159, 190), (159, 191), (159, 192), (159, 193), (160, 166), (160, 167), (160, 168), (160, 169), (160, 170), (160, 171), (160, 172), (160, 173), (160, 174), (160, 175), (160, 177), (160, 178), (160, 179), (160, 180), (160, 181), (160, 182), (160, 183), (160, 184), (160, 185), (160, 186), (160, 188), (160, 189), (160, 190), (160, 191), (160, 192), (160, 193), (161, 167), (161, 168), (161, 169), (161, 170), (161, 171), (161, 172), (161, 173), (161, 174), (161, 175), (161, 177), (161, 178), (161, 179), (161, 180), (161, 181), (161, 182), (161, 183), (161, 184), (161, 185), (161, 186), (161, 188), (161, 189), (161, 190), (161, 191), (161, 192), (161, 193), (162, 168), (162, 169), (162, 170), (162, 171), (162, 172), (162, 173), (162, 174), (162, 175), (162, 177), (162, 178), (162, 179), (162, 180), (162, 181), (162, 182), (162, 183), (162, 184), (162, 185), (162, 186), (162, 188), (162, 189), (162, 190), (162, 191), (162, 192), (162, 193), (163, 169), (163, 170), (163, 171), (163, 172), (163, 173), (163, 174), (163, 175), (163, 177), (163, 178), (163, 179), (163, 180), (163, 181), (163, 182), (163, 183), (163, 184), (163, 185), (163, 186), (163, 188), (163, 189), (163, 190), (163, 191), (163, 192), (163, 193), (164, 170), (164, 171), (164, 172), (164, 173), (164, 174), (164, 175), (164, 177), (164, 178), (164, 179), (164, 180), (164, 181), (164, 182), (164, 183), (164, 184), (164, 185), (164, 186), (164, 188), (164, 189), (164, 190), (164, 191), (164, 192), (164, 193), (165, 171), (165, 172), (165, 173), (165, 174), (165, 175), (165, 177), (165, 178), (165, 179), (165, 180), (165, 181), (165, 182), (165, 183), (165, 184), (165, 185), (165, 186), (165, 188), (165, 189), (165, 190), (165, 191), (165, 192), (165, 193), (166, 172), (166, 173), (166, 174), (166, 175), (166, 177), (166, 178), (166, 179), (166, 180), (166, 181), (166, 182), (166, 183), (166, 184), (166, 185), (166, 186), (166, 188), (166, 189), (166, 190), (166, 191), (166, 192), (166, 193), (167, 173), (167, 174), (167, 175), (167, 177), (167, 178), (167, 179), (167, 180), (167, 181), (167, 182), (167, 183), (167, 184), (167, 185), (167, 186), (167, 188), (167, 189), (167, 190), (167, 191), (167, 192), (167, 193), (168, 174), (168, 175), (168, 177), (168, 178), (168, 179), (168, 180), (168, 181), (168, 182), (168, 183), (168, 184), (168, 185), (168, 186), (168, 188), (168, 189), (168, 190), (168, 191), (168, 192), (168, 193), (169, 175), (169, 177), (169, 178), (169, 179), (169, 180), (169, 181), (169, 182), (169, 183), (169, 184), (169, 185), (169, 186), (169, 188), (169, 189), (169, 190), (169, 191), (169, 192), (169, 193), (170, 177), (170, 178), (170, 179), (170, 180), (170, 181), (170, 182), (170, 183), (170, 184), (170, 185), (170, 186), (170, 188), (170, 189), (170, 190), (170, 191), (170, 192), (170, 193), (171, 177), (171, 178), (171, 179), (171, 180), (171, 181), (171, 182), (171, 183), (171, 184), (171, 185), (171, 186), (171, 188), (171, 189), (171, 190), (171, 191), (171, 192), (171, 193), (172, 178), (172, 179), (172, 180), (172, 181), (172, 182), (172, 183), (172, 184), (172, 185), (172, 186), (172, 188), (172, 189), (172, 190), (172, 191), (172, 192), (172, 193), (173, 179), (173, 180), (173, 181), (173, 182), (173, 183), (173, 184), (173, 185), (173, 186), (173, 188), (173, 189), (173, 190), (173, 191), (173, 192), (173, 193), (174, 180), (174, 181), (174, 182), (174, 183), (174, 184), (174, 185), (174, 186), (174, 188), (174, 189), (174, 190), (174, 191), (174, 192), (174, 193), (175, 181), (175, 182), (175, 183), (175, 184), (175, 185), (175, 186), (175, 188), (175, 189), (175, 190), (175, 191), (175, 192), (175, 193), (177, 183), (177, 184), (177, 185), (177, 186), (177, 188), (177, 189), (177, 190), (177, 191), (177, 192), (177, 193), (178, 184), (178, 185), (178, 186), (178, 188), (178, 189), (178, 190), (178, 191), (178, 192), (178, 193), (179, 185), (179, 186), (179, 188), (179, 189), (179, 190), (179, 191), (179, 192), (179, 193), (180, 186), (180, 188), (180, 189), (180, 190), (180, 191), (180, 192), (180, 193), (181, 188), (181, 189), (181, 190), (181, 191), (181, 192), (181, 193), (182, 188), (182, 189), (182, 190), (182, 191), (182, 192), (182, 193), (183, 189), (183, 190), (183, 191), (183, 192), (183, 193), (184, 190), (184, 191), (184, 192), (184, 193), (185, 191), (185, 192), (185, 193), (186, 192), (186, 193), (187, 193)]"
11,13,13,2,False,[],[],[],{},0,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java,checkcast,601,10.0,30.0,[],[],[],
12,14,14,2,False,"[(3, 15)]",[],"[[(19, 19), (20, 20), (22, 22)], [(23, 23), (27, 27), (25, 25), (20, 20), (26, 26), (19, 19), (21, 21), (18, 18), (22, 22), (24, 24)], [(6, 6), (7, 7), (15, 15)], [(4, 4), (30, 30), (5, 5), (0, 0), (3, 3)], [(4, 4), (8, 8), (30, 30), (5, 5), (14, 14), (7, 7), (0, 0), (9, 9), (13, 13), (10, 10), (3, 3), (12, 12), (2, 2), (6, 6), (11, 11), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ae19a5a00>"": ""{\nMPlaceholder ph = element.getCurSharedRef();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3460>"": ""IEclipseContext parentContext = null;\nif (element.getCurSharedRef() != null) {\n\tMPlaceholder ph = element.getCurSharedRef();\n\tparentContext = getContext(ph.getParent());\n} else if (parentContext == null && element.getParent() != null) {\n\tparentContext = getContext(element.getParent());\n} else if (parentContext == null && element.getParent() == null) {\n\tparentContext = getContext((MUIElement) ((EObject) element)\n\t\t\t.eContainer());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19b1340>"": ""{\n\tAbstractPartRenderer renderer = getRendererFor(parentME);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3d90>"": ""{\nMUIElement parentME = element.getParent();\nif (parentME == null)\n\tparentME = (MUIElement) ((EObject) element).eContainer();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ae19a3bb0>"": ""{\nObject parent = null;\nMUIElement parentME = element.getParent();\nif (parentME == null)\n\tparentME = (MUIElement) ((EObject) element).eContainer();\nif (parentME != null) {\n\tAbstractPartRenderer renderer = getRendererFor(parentME);\n\tif (renderer != null) {\n\t\tif (!element.isVisible()) {\n\t\t\tparent = getLimboShell();\n\t\t} else {\n\t\t\tparent = renderer.getUIContainer(element);\n\t\t}\n\t}\n}\n""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/e4/ui/internal/workbench/swt/PartRenderingEngine.java,safeCreateGui,706,10.0,23.0,"[(709, 721)]",[],"[[(725, 725), (726, 726), (728, 728)], [(729, 729), (733, 733), (731, 731), (726, 726), (732, 732), (725, 725), (727, 727), (724, 724), (728, 728), (730, 730)], [(712, 712), (713, 713), (721, 721)], [(710, 710), (736, 736), (711, 711), (706, 706), (709, 709)], [(710, 710), (714, 714), (736, 736), (711, 711), (720, 720), (713, 713), (706, 706), (715, 715), (719, 719), (716, 716), (709, 709), (718, 718), (708, 708), (712, 712), (717, 717), (721, 721)]]","[(707, 721), (707, 723), (707, 724), (708, 721), (708, 723), (708, 724), (709, 721), (709, 723), (709, 724), (710, 721), (710, 723), (710, 724), (710, 733), (712, 721), (712, 723), (712, 724), (712, 733), (712, 735), (713, 720), (714, 720), (723, 733), (723, 735), (724, 733), (724, 735), (725, 733), (725, 735)]"
13,15,15,1,False,"[(43, 54), (40, 54)]",[],"[[(4, 4), (30, 30), (27, 27), (7, 7), (16, 16), (0, 0), (46, 46), (43, 43), (20, 20), (13, 13), (10, 10), (19, 19), (3, 3), (55, 55), (49, 49), (24, 24)], [(55, 55), (40, 40), (0, 0)], [(1, 1), (55, 55), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad9a57280>"": ""{\n    Test test = new AuthenticationTest(\n        \""testConnectShutdownAuthentication\"");\n    test = new AuthenticationTest(\""testUserCasing\"");\n    test = new AuthenticationTest(\""testUserFunctions\"");\n    test = new AuthenticationTest(\""testNotFullAccessUsers\"");\n    test = new AuthenticationTest(\""testUserAccessRoutines\"");\n    test = new AuthenticationTest(\n        \""testChangePasswordAndDatabasePropertiesOnly\"");\n    test = new AuthenticationTest(\""testGreekCharacters\"");\n    test = new AuthenticationTest(\""testSystemShutdown\"");\n    test = new AuthenticationTest(\""testDefaultHashAlgorithm\"");\n    test = new AuthenticationTest(\""testVariousBuiltinAlgorithms\"");\n    test = new AuthenticationTest(\""testNoCollisionsWithConfigurableHash\"");\n    test = new AuthenticationTest(\""testInvalidAlgorithmName\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9b3efd0>"": ""{\n    Properties confHashProps = new Properties();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad9a571f0>"": ""{\n    TestSuite suite = new TestSuite(\""AuthenticationTest\"");\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/derby/derby-10.6.1.0/src/db-derby-10.6.1.0-src/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,baseSuite,91,1.0,29.0,"[(134, 145), (131, 145)]",[],"[[(95, 95), (121, 121), (118, 118), (98, 98), (107, 107), (91, 91), (137, 137), (134, 134), (111, 111), (104, 104), (101, 101), (110, 110), (94, 94), (146, 146), (140, 140), (115, 115)], [(146, 146), (131, 131), (91, 91)], [(92, 92), (146, 146), (91, 91)]]","[(92, 98), (92, 99), (92, 101), (92, 102), (92, 104), (92, 105), (92, 107), (92, 108), (92, 111), (92, 112), (92, 114), (92, 115), (92, 116), (92, 118), (92, 119), (92, 121), (92, 122), (92, 124), (92, 125), (92, 126), (92, 127), (92, 128), (92, 129), (92, 130), (92, 131), (92, 132), (92, 134), (92, 135), (94, 101), (94, 102), (94, 104), (94, 105), (94, 107), (94, 108), (94, 111), (94, 112), (94, 114), (94, 115), (94, 116), (94, 118), (94, 119), (94, 121), (94, 122), (94, 124), (94, 125), (94, 126), (94, 127), (94, 128), (94, 129), (94, 130), (94, 131), (94, 132), (94, 134), (94, 135), (94, 137), (96, 102), (96, 104), (96, 105), (96, 107), (96, 108), (96, 111), (96, 112), (96, 114), (96, 115), (96, 116), (96, 118), (96, 119), (96, 121), (96, 122), (96, 124), (96, 125), (96, 126), (96, 127), (96, 128), (96, 129), (96, 130), (96, 131), (96, 132), (96, 134), (96, 135), (96, 137), (96, 138), (98, 104), (98, 105), (98, 107), (98, 108), (98, 111), (98, 112), (98, 114), (98, 115), (98, 116), (98, 118), (98, 119), (98, 121), (98, 122), (98, 124), (98, 125), (98, 126), (98, 127), (98, 128), (98, 129), (98, 130), (98, 131), (98, 132), (98, 134), (98, 135), (98, 137), (98, 138), (98, 140), (98, 141), (99, 105), (99, 107), (99, 108), (99, 111), (99, 112), (99, 114), (99, 115), (99, 116), (99, 118), (99, 119), (99, 121), (99, 122), (99, 124), (99, 125), (99, 126), (99, 127), (99, 128), (99, 129), (99, 130), (99, 131), (99, 132), (99, 134), (99, 135), (99, 137), (99, 138), (99, 140), (99, 141), (101, 107), (101, 108), (101, 111), (101, 112), (101, 114), (101, 115), (101, 116), (101, 118), (101, 119), (101, 121), (101, 122), (101, 124), (101, 125), (101, 126), (101, 127), (101, 128), (101, 129), (101, 130), (101, 131), (101, 132), (101, 134), (101, 135), (101, 137), (101, 138), (101, 140), (101, 141), (101, 143), (101, 144), (102, 108), (102, 111), (102, 112), (102, 114), (102, 115), (102, 116), (102, 118), (102, 119), (102, 121), (102, 122), (102, 124), (102, 125), (102, 126), (102, 127), (102, 128), (102, 129), (102, 130), (102, 131), (102, 132), (102, 134), (102, 135), (102, 137), (102, 138), (102, 140), (102, 141), (102, 143), (102, 144), (102, 145), (104, 111), (104, 112), (104, 114), (104, 115), (104, 116), (104, 118), (104, 119), (104, 121), (104, 122), (104, 124), (104, 125), (104, 126), (104, 127), (104, 128), (104, 129), (104, 130), (104, 131), (104, 132), (104, 134), (104, 135), (104, 137), (104, 138), (104, 140), (104, 141), (104, 143), (104, 144), (104, 145), (105, 111), (105, 112), (105, 114), (105, 115), (105, 116), (105, 118), (105, 119), (105, 121), (105, 122), (105, 124), (105, 125), (105, 126), (105, 127), (105, 128), (105, 129), (105, 130), (105, 131), (105, 132), (105, 134), (105, 135), (105, 137), (105, 138), (105, 140), (105, 141), (105, 143), (105, 144), (105, 145), (107, 114), (107, 115), (107, 116), (107, 118), (107, 119), (107, 121), (107, 122), (107, 124), (107, 125), (107, 126), (107, 127), (107, 128), (107, 129), (107, 130), (107, 131), (107, 132), (107, 134), (107, 135), (107, 137), (107, 138), (107, 140), (107, 141), (107, 143), (107, 144), (107, 145), (108, 114), (108, 115), (108, 116), (108, 118), (108, 119), (108, 121), (108, 122), (108, 124), (108, 125), (108, 126), (108, 127), (108, 128), (108, 129), (108, 130), (108, 131), (108, 132), (108, 134), (108, 135), (108, 137), (108, 138), (108, 140), (108, 141), (108, 143), (108, 144), (108, 145), (110, 116), (110, 118), (110, 119), (110, 121), (110, 122), (110, 124), (110, 125), (110, 126), (110, 127), (110, 128), (110, 129), (110, 130), (110, 131), (110, 132), (110, 134), (110, 135), (110, 137), (110, 138), (110, 140), (110, 141), (110, 143), (110, 144), (110, 145), (112, 118), (112, 119), (112, 121), (112, 122), (112, 124), (112, 125), (112, 126), (112, 127), (112, 128), (112, 129), (112, 130), (112, 131), (112, 132), (112, 134), (112, 135), (112, 137), (112, 138), (112, 140), (112, 141), (112, 143), (112, 144), (112, 145), (114, 121), (114, 122), (114, 124), (114, 125), (114, 126), (114, 127), (114, 128), (114, 129), (114, 130), (114, 131), (114, 132), (114, 134), (114, 135), (114, 137), (114, 138), (114, 140), (114, 141), (114, 143), (114, 144), (114, 145), (115, 121), (115, 122), (115, 124), (115, 125), (115, 126), (115, 127), (115, 128), (115, 129), (115, 130), (115, 131), (115, 132), (115, 134), (115, 135), (115, 137), (115, 138), (115, 140), (115, 141), (115, 143), (115, 144), (115, 145), (116, 122), (116, 124), (116, 125), (116, 126), (116, 127), (116, 128), (116, 129), (116, 130), (116, 131), (116, 132), (116, 134), (116, 135), (116, 137), (116, 138), (116, 140), (116, 141), (116, 143), (116, 144), (116, 145), (118, 124), (118, 125), (118, 126), (118, 127), (118, 128), (118, 129), (118, 130), (118, 131), (118, 132), (118, 134), (118, 135), (118, 137), (118, 138), (118, 140), (118, 141), (118, 143), (118, 144), (118, 145), (119, 125), (119, 126), (119, 127), (119, 128), (119, 129), (119, 130), (119, 131), (119, 132), (119, 134), (119, 135), (119, 137), (119, 138), (119, 140), (119, 141), (119, 143), (119, 144), (119, 145), (121, 127), (121, 128), (121, 129), (121, 130), (121, 131), (121, 132), (121, 134), (121, 135), (121, 137), (121, 138), (121, 140), (121, 141), (121, 143), (121, 144), (121, 145), (122, 128), (122, 129), (122, 130), (122, 131), (122, 132), (122, 134), (122, 135), (122, 137), (122, 138), (122, 140), (122, 141), (122, 143), (122, 144), (122, 145), (124, 130), (124, 131), (124, 132), (124, 134), (124, 135), (124, 137), (124, 138), (124, 140), (124, 141), (124, 143), (124, 144), (124, 145), (125, 131), (125, 132), (125, 134), (125, 135), (125, 137), (125, 138), (125, 140), (125, 141), (125, 143), (125, 144), (125, 145), (126, 132), (126, 134), (126, 135), (126, 137), (126, 138), (126, 140), (126, 141), (126, 143), (126, 144), (126, 145), (127, 134), (127, 135), (127, 137), (127, 138), (127, 140), (127, 141), (127, 143), (127, 144), (127, 145), (128, 134), (128, 135), (128, 137), (128, 138), (128, 140), (128, 141), (128, 143), (128, 144), (128, 145), (129, 135), (129, 137), (129, 138), (129, 140), (129, 141), (129, 143), (129, 144), (129, 145), (130, 137), (130, 138), (130, 140), (130, 141), (130, 143), (130, 144), (130, 145), (131, 137), (131, 138), (131, 140), (131, 141), (131, 143), (131, 144), (131, 145), (132, 138), (132, 140), (132, 141), (132, 143), (132, 144), (132, 145), (134, 140), (134, 141), (134, 143), (134, 144), (134, 145), (135, 141), (135, 143), (135, 144), (135, 145), (137, 143), (137, 144), (137, 145), (138, 144), (138, 145)]"
14,16,16,2,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/websvc.jaxwsmodel/src/org/netbeans/modules/websvc/customization/model/impl/JAXWSElementFactoryProvider.java,create,160,9.0,26.0,[],[],[],"[(164, 178), (164, 178), (166, 178), (166, 178), (166, 178), (168, 178), (168, 178), (168, 178), (170, 178), (170, 178), (170, 178), (172, 178), (172, 178), (172, 178)]"
15,17,17,2,False,[],"[(7, 7)]","[[(2, 2), (35, 35), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad8ac1220>"": ""StringBuilder sb = new StringBuilder(operator.getText());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad8ac1bb0>"": ""{\nAST operator = AstUtil.findChildOfType(ast, CPPTokenTypes.LITERAL_OPERATOR);\n   }""}",2,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.modelimpl/src/org/netbeans/modules/cnd/modelimpl/csm/CastUtils.java,getFunctionName,74,12.0,31.0,[],"[(81, 81)]","[[(76, 76), (109, 109), (74, 74)]]","[(75, 81), (75, 82), (76, 82), (81, 107), (81, 108), (82, 107), (82, 108), (83, 107), (83, 108)]"
16,18,18,2,False,"[(30, 36)]",[],"[[(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (9, 9), (39, 39), (3, 3), (6, 6)], [(28, 28), (27, 27)], [(14, 14), (27, 27), (13, 13), (10, 10), (12, 12), (37, 37), (11, 11)], [(27, 27), (10, 10), (12, 12), (37, 37), (11, 11)], [(27, 27), (13, 13), (10, 10), (12, 12), (37, 37), (11, 11)], [(37, 37), (39, 39), (2, 2), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (26, 26), (35, 35), (3, 3), (31, 31), (8, 8), (27, 27), (36, 36), (32, 32), (4, 4), (5, 5), (0, 0), (9, 9), (10, 10), (6, 6), (33, 33)], [(17, 17), (14, 14), (27, 27), (13, 13), (10, 10), (12, 12), (37, 37), (11, 11)], [(17, 17), (25, 25), (18, 18)], [(27, 27), (16, 16), (10, 10), (37, 37), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad7493610>"": ""{\r\n    boolean hasRules;  // Separate boolean because stored rules can be null.\r\n    synchronized (rulesIdToRules) {\r\n        hasRules = rulesIdToRules.containsKey(rulesId);\r\n        if (hasRules) {\r\n            rules = rulesIdToRules.get(rulesId);  // can be null\r\n        }\r\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad6a38430>"": ""catch (ParseException e) {\r\ncatch (MissingResourceException e"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7496850>"": ""{\r\n    try {\r\n        UResourceBundle pluralb = getPluralBundle();\n        UResourceBundle rulesb = pluralb.get(\""rules\"");\n        UResourceBundle setb = rulesb.get(rulesId);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74960a0>"": ""{\r\n    try {\r\n        UResourceBundle pluralb = getPluralBundle();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74964c0>"": ""{\r\n    try {\r\n        UResourceBundle pluralb = getPluralBundle();\n        UResourceBundle rulesb = pluralb.get(\""rules\"");\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7493af0>"": ""{\r\n    PluralRules rules = null;\n    boolean hasRules;  // Separate boolean because stored rules can be null.\r\n    synchronized (rulesIdToRules) {\r\n        hasRules = rulesIdToRules.containsKey(rulesId);\r\n        if (hasRules) {\r\n            rules = rulesIdToRules.get(rulesId);  // can be null\r\n        }\r\n    }\n    if (!hasRules) {\r\n        try {\r\n            StringBuilder sb = new StringBuilder();\n            rules = PluralRules.parseDescription(sb.toString());\n        }\n        synchronized (rulesIdToRules) {\r\n            if (rulesIdToRules.containsKey(rulesId)) {\r\n                rules = rulesIdToRules.get(rulesId);\r\n            } else {\r\n                rulesIdToRules.put(rulesId, rules);  // can be null\r\n            }\r\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7496700>"": ""{\r\n    try {\r\n        UResourceBundle pluralb = getPluralBundle();\n        UResourceBundle rulesb = pluralb.get(\""rules\"");\n        UResourceBundle setb = rulesb.get(rulesId);\n        for (int i = 0; i < setb.getSize(); ++i) {\r\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad7496520>"": ""++i) {\r\n    UResourceBundle b = setb.get(i);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad74969d0>"": ""{\r\n    try {\r\n        StringBuilder sb = new StringBuilder();\n    }\n}""}",2,0,1,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/com/ibm/icu/impl/PluralRulesLoader.java,getRulesForRulesId,177,8.0,28.0,"[(207, 213)]",[],"[[(181, 181), (185, 185), (182, 182), (184, 184), (177, 177), (186, 186), (216, 216), (180, 180), (183, 183)], [(205, 205), (204, 204)], [(191, 191), (204, 204), (190, 190), (187, 187), (189, 189), (214, 214), (188, 188)], [(204, 204), (187, 187), (189, 189), (214, 214), (188, 188)], [(204, 204), (190, 190), (187, 187), (189, 189), (214, 214), (188, 188)], [(214, 214), (216, 216), (179, 179), (211, 211), (188, 188), (207, 207), (184, 184), (193, 193), (203, 203), (212, 212), (180, 180), (208, 208), (185, 185), (204, 204), (213, 213), (209, 209), (181, 181), (182, 182), (177, 177), (186, 186), (187, 187), (183, 183), (210, 210)], [(194, 194), (191, 191), (204, 204), (190, 190), (187, 187), (189, 189), (214, 214), (188, 188)], [(194, 194), (202, 202), (195, 195)], [(204, 204), (193, 193), (187, 187), (214, 214), (188, 188)]]","[(178, 186), (179, 186), (180, 186), (180, 186), (187, 214), (187, 215), (188, 206), (188, 213), (189, 202), (189, 203), (190, 202), (190, 203), (191, 202), (191, 203), (193, 202), (193, 203), (194, 202), (194, 203), (195, 201), (207, 213)]"
17,19,19,1,False,[],[],"[[(17, 17), (9, 9), (0, 0), (1, 1), (13, 13), (26, 26), (3, 3), (21, 21), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad5486190>"": ""{\n    DependencyQueue<String,String> q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n    q = new DependencyQueue<String,String>();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/core.osgi/test/unit/src/org/netbeans/core/osgi/DependencyQueueTest.java,testOffer,57,1.0,26.0,[],[],"[[(74, 74), (66, 66), (57, 57), (58, 58), (70, 70), (83, 83), (60, 60), (78, 78), (63, 63)]]","[(58, 64), (58, 65), (58, 66), (58, 67), (58, 68), (58, 69), (58, 70), (58, 71), (58, 72), (58, 73), (58, 74), (58, 75), (58, 76), (58, 77), (59, 65), (59, 66), (59, 67), (59, 68), (59, 69), (59, 70), (59, 71), (59, 72), (59, 73), (59, 74), (59, 75), (59, 76), (59, 77), (59, 78), (60, 66), (60, 67), (60, 68), (60, 69), (60, 70), (60, 71), (60, 72), (60, 73), (60, 74), (60, 75), (60, 76), (60, 77), (60, 78), (60, 79), (61, 67), (61, 68), (61, 69), (61, 70), (61, 71), (61, 72), (61, 73), (61, 74), (61, 75), (61, 76), (61, 77), (61, 78), (61, 79), (61, 80), (62, 68), (62, 69), (62, 70), (62, 71), (62, 72), (62, 73), (62, 74), (62, 75), (62, 76), (62, 77), (62, 78), (62, 79), (62, 80), (62, 81), (63, 69), (63, 70), (63, 71), (63, 72), (63, 73), (63, 74), (63, 75), (63, 76), (63, 77), (63, 78), (63, 79), (63, 80), (63, 81), (63, 82), (64, 70), (64, 71), (64, 72), (64, 73), (64, 74), (64, 75), (64, 76), (64, 77), (64, 78), (64, 79), (64, 80), (64, 81), (64, 82), (65, 71), (65, 72), (65, 73), (65, 74), (65, 75), (65, 76), (65, 77), (65, 78), (65, 79), (65, 80), (65, 81), (65, 82), (66, 72), (66, 73), (66, 74), (66, 75), (66, 76), (66, 77), (66, 78), (66, 79), (66, 80), (66, 81), (66, 82), (67, 73), (67, 74), (67, 75), (67, 76), (67, 77), (67, 78), (67, 79), (67, 80), (67, 81), (67, 82), (68, 74), (68, 75), (68, 76), (68, 77), (68, 78), (68, 79), (68, 80), (68, 81), (68, 82), (69, 75), (69, 76), (69, 77), (69, 78), (69, 79), (69, 80), (69, 81), (69, 82), (70, 76), (70, 77), (70, 78), (70, 79), (70, 80), (70, 81), (70, 82), (71, 77), (71, 78), (71, 79), (71, 80), (71, 81), (71, 82), (72, 78), (72, 79), (72, 80), (72, 81), (72, 82), (73, 79), (73, 80), (73, 81), (73, 82), (74, 80), (74, 81), (74, 82), (75, 81), (75, 82), (76, 82)]"
18,20,20,1,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/php.editor/test/qa-functional/src/org/netbeans/test/php/GeneralPHP.java,CreatePHPApplicationInternal,169,3.0,27.0,[],[],[],"[(170, 177), (170, 178), (170, 179), (170, 181), (170, 183), (170, 185), (170, 187), (170, 189), (170, 203), (170, 205), (170, 206), (170, 208), (170, 210), (170, 223), (170, 225), (172, 178), (172, 179), (172, 181), (172, 183), (172, 185), (172, 187), (172, 189), (172, 203), (172, 205), (172, 206), (172, 208), (172, 210), (172, 223), (172, 225), (172, 227), (173, 179), (173, 181), (173, 183), (173, 185), (173, 187), (173, 189), (173, 203), (173, 205), (173, 206), (173, 208), (173, 210), (173, 223), (173, 225), (173, 227), (173, 228), (174, 181), (174, 183), (174, 185), (174, 187), (174, 189), (174, 203), (174, 205), (174, 206), (174, 208), (174, 210), (174, 223), (174, 225), (174, 227), (174, 228), (175, 181), (175, 183), (175, 185), (175, 187), (175, 189), (175, 203), (175, 205), (175, 206), (175, 208), (175, 210), (175, 223), (175, 225), (175, 227), (175, 228), (177, 183), (177, 185), (177, 187), (177, 189), (177, 203), (177, 205), (177, 206), (177, 208), (177, 210), (177, 223), (177, 225), (177, 227), (177, 228), (178, 185), (178, 187), (178, 189), (178, 203), (178, 205), (178, 206), (178, 208), (178, 210), (178, 223), (178, 225), (178, 227), (178, 228), (179, 185), (179, 187), (179, 189), (179, 203), (179, 205), (179, 206), (179, 208), (179, 210), (179, 223), (179, 225), (179, 227), (179, 228), (181, 187), (181, 189), (181, 203), (181, 205), (181, 206), (181, 208), (181, 210), (181, 223), (181, 225), (181, 227), (181, 228), (181, 236), (183, 189), (183, 203), (183, 205), (183, 206), (183, 208), (183, 210), (183, 223), (183, 225), (183, 227), (183, 228), (183, 236), (183, 238), (185, 203), (185, 205), (185, 206), (185, 208), (185, 210), (185, 223), (185, 225), (185, 227), (185, 228), (185, 236), (185, 238), (187, 203), (187, 205), (187, 206), (187, 208), (187, 210), (187, 223), (187, 225), (187, 227), (187, 228), (187, 236), (187, 238), (189, 203), (189, 205), (189, 206), (189, 208), (189, 210), (189, 223), (189, 225), (189, 227), (189, 228), (189, 236), (189, 238), (191, 203), (191, 205), (191, 206), (191, 208), (191, 210), (191, 223), (191, 225), (191, 227), (191, 228), (191, 236), (191, 238), (205, 223), (205, 225), (205, 227), (205, 228), (205, 236), (205, 238), (206, 223), (206, 225), (206, 227), (206, 228), (206, 236), (206, 238), (208, 223), (208, 225), (208, 227), (208, 228), (208, 236), (208, 238), (210, 223), (210, 225), (210, 227), (210, 228), (210, 236), (210, 238), (212, 223), (212, 225), (212, 227), (212, 228), (212, 236), (212, 238), (213, 219), (213, 220), (213, 221), (213, 222), (215, 221), (215, 222), (216, 222), (225, 236), (225, 238), (227, 236), (227, 238), (228, 236), (228, 238), (229, 236), (229, 238)]"
19,21,21,1,False,[],[],"[[(4, 4), (0, 0), (52, 52), (10, 10), (47, 47)], [(4, 4), (0, 0), (52, 52), (20, 20), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (17, 17), (0, 0), (52, 52), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (23, 23), (0, 0), (52, 52), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (0, 0), (52, 52), (29, 29), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (0, 0), (52, 52), (45, 45), (44, 44), (10, 10), (12, 12), (47, 47), (11, 11)], [(52, 52), (0, 0)], [(4, 4), (0, 0), (52, 52), (10, 10), (12, 12), (41, 41), (47, 47), (40, 40), (11, 11)], [(52, 52), (1, 1), (0, 0)], [(4, 4), (0, 0), (52, 52), (10, 10), (32, 32), (12, 12), (47, 47), (11, 11), (33, 33)], [(4, 4), (14, 14), (0, 0), (52, 52), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (5, 5), (0, 0), (52, 52), (1, 1), (2, 2), (47, 47)], [(4, 4), (0, 0), (52, 52), (26, 26), (10, 10), (12, 12), (47, 47), (11, 11)], [(4, 4), (0, 0), (52, 52), (10, 10), (12, 12), (37, 37), (47, 47), (11, 11)], [(4, 4), (0, 0), (52, 52), (12, 12), (47, 47), (11, 11)], [(4, 4), (8, 8), (5, 5), (0, 0), (52, 52), (1, 1), (2, 2), (47, 47)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa430>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172040>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    Long used = (Long) mbs.getAttribute(mxbeanName, \""Used\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172e50>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    String version = (String) mbs.getAttribute(mxbeanName, \""Version\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4337c40>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    Long total = (Long) mbs.getAttribute(mxbeanName, \""Total\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad43378b0>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    Long nondfs = (Long) (mbs.getAttribute(mxbeanName, \""NonDfsUsedSpace\""));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3f67ee0>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    String deadnodeinfo = (String) (mbs.getAttribute(mxbeanName,\n        \""DeadNodes\""));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faad00>"": ""public void testNameNodeMXBeanInfo() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3f67970>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    String alivenodeinfo = (String) (mbs.getAttribute(mxbeanName,\n        \""LiveNodes\""));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faab20>"": ""{\n  Configuration conf = new Configuration();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3f67130>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    Float percentremaining = (Float) (mbs.getAttribute(mxbeanName,\n        \""PercentRemaining\""));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172d90>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    String hostname = (String) mbs.getAttribute(mxbeanName, \""HostName\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faab50>"": ""{\n  Configuration conf = new Configuration();\n  MiniDFSCluster cluster = null;\n  try {\n    cluster = new MiniDFSCluster(conf, 1, true, null);\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad4337b50>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    String safemode = (String) mbs.getAttribute(mxbeanName, \""Safemode\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3f67550>"": ""{\n  try {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n    Long totalblocks = (Long) (mbs.getAttribute(mxbeanName, \""TotalBlocks\""));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad5172790>"": ""{\n  try {\n    ObjectName mxbeanName = new ObjectName(\n      \""Hadoop:service=NameNode,name=NameNodeInfo\"");\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3faa5b0>"": ""{\n  Configuration conf = new Configuration();\n  MiniDFSCluster cluster = null;\n  try {\n    cluster = new MiniDFSCluster(conf, 1, true, null);\n    FSNamesystem fsn = cluster.getNameNode().namesystem;\n  }\n}""}",0,0,1,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hadoop/hadoop-1.0.0/src/hadoop-1.0.0/src/test/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java,testNameNodeMXBeanInfo,37,2.0,31.0,[],[],"[[(41, 41), (37, 37), (89, 89), (47, 47), (84, 84)], [(41, 41), (37, 37), (89, 89), (57, 57), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (54, 54), (37, 37), (89, 89), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (60, 60), (37, 37), (89, 89), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (37, 37), (89, 89), (66, 66), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (37, 37), (89, 89), (82, 82), (81, 81), (47, 47), (49, 49), (84, 84), (48, 48)], [(89, 89), (37, 37)], [(41, 41), (37, 37), (89, 89), (47, 47), (49, 49), (78, 78), (84, 84), (77, 77), (48, 48)], [(89, 89), (38, 38), (37, 37)], [(41, 41), (37, 37), (89, 89), (47, 47), (69, 69), (49, 49), (84, 84), (48, 48), (70, 70)], [(41, 41), (51, 51), (37, 37), (89, 89), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (42, 42), (37, 37), (89, 89), (38, 38), (39, 39), (84, 84)], [(41, 41), (37, 37), (89, 89), (63, 63), (47, 47), (49, 49), (84, 84), (48, 48)], [(41, 41), (37, 37), (89, 89), (47, 47), (49, 49), (74, 74), (84, 84), (48, 48)], [(41, 41), (37, 37), (89, 89), (49, 49), (84, 84), (48, 48)], [(41, 41), (45, 45), (42, 42), (37, 37), (89, 89), (38, 38), (39, 39), (84, 84)]]","[(42, 49), (42, 50), (42, 51), (42, 52), (42, 53), (42, 54), (42, 55), (42, 56), (42, 57), (42, 58), (42, 59), (42, 60), (42, 61), (42, 62), (42, 63), (42, 64), (42, 65), (42, 66), (42, 67), (42, 68), (42, 70), (42, 72), (42, 73), (42, 74), (42, 75), (42, 76), (42, 78), (42, 79), (42, 80), (42, 82), (43, 49), (43, 50), (43, 51), (43, 52), (43, 53), (43, 54), (43, 55), (43, 56), (43, 57), (43, 58), (43, 59), (43, 60), (43, 61), (43, 62), (43, 63), (43, 64), (43, 65), (43, 66), (43, 67), (43, 68), (43, 70), (43, 72), (43, 73), (43, 74), (43, 75), (43, 76), (43, 78), (43, 79), (43, 80), (43, 82), (43, 83), (45, 51), (45, 52), (45, 53), (45, 54), (45, 55), (45, 56), (45, 57), (45, 58), (45, 59), (45, 60), (45, 61), (45, 62), (45, 63), (45, 64), (45, 65), (45, 66), (45, 67), (45, 68), (45, 70), (45, 72), (45, 73), (45, 74), (45, 75), (45, 76), (45, 78), (45, 79), (45, 80), (45, 82), (45, 83), (47, 53), (47, 54), (47, 55), (47, 56), (47, 57), (47, 58), (47, 59), (47, 60), (47, 61), (47, 62), (47, 63), (47, 64), (47, 65), (47, 66), (47, 67), (47, 68), (47, 70), (47, 72), (47, 73), (47, 74), (47, 75), (47, 76), (47, 78), (47, 79), (47, 80), (47, 82), (47, 83), (48, 54), (48, 55), (48, 56), (48, 57), (48, 58), (48, 59), (48, 60), (48, 61), (48, 62), (48, 63), (48, 64), (48, 65), (48, 66), (48, 67), (48, 68), (48, 70), (48, 72), (48, 73), (48, 74), (48, 75), (48, 76), (48, 78), (48, 79), (48, 80), (48, 82), (48, 83), (50, 56), (50, 57), (50, 58), (50, 59), (50, 60), (50, 61), (50, 62), (50, 63), (50, 64), (50, 65), (50, 66), (50, 67), (50, 68), (50, 70), (50, 72), (50, 73), (50, 74), (50, 75), (50, 76), (50, 78), (50, 79), (50, 80), (50, 82), (50, 83), (51, 57), (51, 58), (51, 59), (51, 60), (51, 61), (51, 62), (51, 63), (51, 64), (51, 65), (51, 66), (51, 67), (51, 68), (51, 70), (51, 72), (51, 73), (51, 74), (51, 75), (51, 76), (51, 78), (51, 79), (51, 80), (51, 82), (51, 83), (52, 58), (52, 59), (52, 60), (52, 61), (52, 62), (52, 63), (52, 64), (52, 65), (52, 66), (52, 67), (52, 68), (52, 70), (52, 72), (52, 73), (52, 74), (52, 75), (52, 76), (52, 78), (52, 79), (52, 80), (52, 82), (52, 83), (53, 59), (53, 60), (53, 61), (53, 62), (53, 63), (53, 64), (53, 65), (53, 66), (53, 67), (53, 68), (53, 70), (53, 72), (53, 73), (53, 74), (53, 75), (53, 76), (53, 78), (53, 79), (53, 80), (53, 82), (53, 83), (54, 60), (54, 61), (54, 62), (54, 63), (54, 64), (54, 65), (54, 66), (54, 67), (54, 68), (54, 70), (54, 72), (54, 73), (54, 74), (54, 75), (54, 76), (54, 78), (54, 79), (54, 80), (54, 82), (54, 83), (55, 61), (55, 62), (55, 63), (55, 64), (55, 65), (55, 66), (55, 67), (55, 68), (55, 70), (55, 72), (55, 73), (55, 74), (55, 75), (55, 76), (55, 78), (55, 79), (55, 80), (55, 82), (55, 83), (56, 62), (56, 63), (56, 64), (56, 65), (56, 66), (56, 67), (56, 68), (56, 70), (56, 72), (56, 73), (56, 74), (56, 75), (56, 76), (56, 78), (56, 79), (56, 80), (56, 82), (56, 83), (57, 63), (57, 64), (57, 65), (57, 66), (57, 67), (57, 68), (57, 70), (57, 72), (57, 73), (57, 74), (57, 75), (57, 76), (57, 78), (57, 79), (57, 80), (57, 82), (57, 83), (58, 64), (58, 65), (58, 66), (58, 67), (58, 68), (58, 70), (58, 72), (58, 73), (58, 74), (58, 75), (58, 76), (58, 78), (58, 79), (58, 80), (58, 82), (58, 83), (59, 65), (59, 66), (59, 67), (59, 68), (59, 70), (59, 72), (59, 73), (59, 74), (59, 75), (59, 76), (59, 78), (59, 79), (59, 80), (59, 82), (59, 83), (60, 66), (60, 67), (60, 68), (60, 70), (60, 72), (60, 73), (60, 74), (60, 75), (60, 76), (60, 78), (60, 79), (60, 80), (60, 82), (60, 83), (61, 67), (61, 68), (61, 70), (61, 72), (61, 73), (61, 74), (61, 75), (61, 76), (61, 78), (61, 79), (61, 80), (61, 82), (61, 83), (62, 68), (62, 70), (62, 72), (62, 73), (62, 74), (62, 75), (62, 76), (62, 78), (62, 79), (62, 80), (62, 82), (62, 83), (63, 70), (63, 72), (63, 73), (63, 74), (63, 75), (63, 76), (63, 78), (63, 79), (63, 80), (63, 82), (63, 83), (64, 70), (64, 72), (64, 73), (64, 74), (64, 75), (64, 76), (64, 78), (64, 79), (64, 80), (64, 82), (64, 83), (65, 72), (65, 73), (65, 74), (65, 75), (65, 76), (65, 78), (65, 79), (65, 80), (65, 82), (65, 83), (66, 72), (66, 73), (66, 74), (66, 75), (66, 76), (66, 78), (66, 79), (66, 80), (66, 82), (66, 83), (67, 73), (67, 74), (67, 75), (67, 76), (67, 78), (67, 79), (67, 80), (67, 82), (67, 83), (68, 74), (68, 75), (68, 76), (68, 78), (68, 79), (68, 80), (68, 82), (68, 83), (69, 75), (69, 76), (69, 78), (69, 79), (69, 80), (69, 82), (69, 83), (71, 78), (71, 79), (71, 80), (71, 82), (71, 83), (73, 79), (73, 80), (73, 82), (73, 83), (74, 80), (74, 82), (74, 83), (75, 82), (75, 83), (76, 82), (76, 83), (77, 83)]"
20,22,22,1,False,"[(6, 12), (26, 39)]","[(18, 18), (26, 26)]","[[(1, 1), (40, 40), (0, 0)], [(2, 2), (40, 40), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5310>"": ""{\r\n    StringBuilder sb = new StringBuilder();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad43372b0>"": ""Map.Entry<Object, Object> entry : new TreeMap<Object, Object>(System.getProperties()).entrySet()"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3c04040>"": ""Runtime rt = Runtime.getRuntime();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc52e0>"": ""{\r\n    String nl = System.getProperty(\""line.separator\""); //$NON-NLS-1$\r\n}""}",1,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jpf/jpf-1.5.1/src/source-boot/org/java/plugin/boot/ErrorDialog.java,getErrorDetails,222,3.0,24.0,"[(228, 234), (248, 261)]","[(240, 240), (248, 248)]","[[(223, 223), (262, 262), (222, 222)], [(224, 224), (262, 262), (222, 222)]]","[(223, 235), (223, 236), (223, 238), (223, 239), (223, 239), (223, 243), (223, 244), (223, 246), (223, 247), (223, 247), (223, 248), (223, 252), (223, 254), (224, 235), (224, 235), (224, 236), (224, 236), (224, 238), (224, 238), (224, 239), (224, 239), (224, 239), (224, 239), (224, 243), (224, 243), (224, 244), (224, 244), (224, 246), (224, 246), (224, 247), (224, 247), (224, 247), (224, 247), (224, 248), (224, 248), (224, 252), (224, 252), (224, 254), (224, 254), (225, 235), (225, 236), (225, 238), (225, 239), (225, 239), (225, 243), (225, 244), (225, 246), (225, 247), (225, 247), (225, 248), (225, 252), (225, 254), (225, 256), (226, 235), (226, 236), (226, 238), (226, 239), (226, 239), (226, 243), (226, 244), (226, 246), (226, 247), (226, 247), (226, 248), (226, 252), (226, 254), (226, 256), (227, 233), (227, 233), (227, 234), (227, 234), (228, 234), (228, 234), (236, 243), (236, 244), (236, 246), (236, 247), (236, 247), (236, 248), (236, 252), (236, 254), (236, 256), (236, 258), (236, 260), (236, 261), (237, 243), (237, 244), (237, 246), (237, 247), (237, 247), (237, 248), (237, 252), (237, 254), (237, 256), (237, 258), (237, 260), (237, 261), (239, 246), (239, 246), (239, 247), (239, 247), (239, 247), (239, 247), (239, 248), (239, 248), (239, 252), (239, 252), (239, 254), (239, 254), (239, 256), (239, 256), (239, 258), (239, 258), (239, 260), (239, 260), (239, 261), (239, 261), (240, 246), (240, 247), (240, 247), (240, 248), (240, 252), (240, 254), (240, 256), (240, 258), (240, 260), (240, 261), (244, 252), (244, 254), (244, 256), (244, 258), (244, 260), (244, 261), (245, 252), (245, 254), (245, 256), (245, 258), (245, 260), (245, 261), (247, 254), (247, 254), (247, 256), (247, 256), (247, 258), (247, 258), (247, 260), (247, 260), (247, 261), (247, 261), (248, 254), (248, 256), (248, 258), (248, 260), (248, 261), (249, 256), (249, 258), (249, 260), (249, 261), (253, 260), (253, 261), (255, 261)]"
21,23,23,1,False,[],[],"[[(41, 41), (5, 5), (0, 0)], [(41, 41), (1, 1), (22, 22), (0, 0)], [(25, 25), (26, 26), (28, 28), (40, 40), (24, 24)], [(41, 41), (1, 1), (0, 0)], [(41, 41), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc400>"": ""{\n    UnicodeString s2 = new UnicodeString(\""Hello world\\u2122\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5640>"": ""{\n    SSTRecord record = new SSTRecord();\n    Iterator iter = record.getStrings();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bc5100>"": ""while ( iter.hasNext() )\n{\n    UnicodeString ucs = (UnicodeString) iter.next();\n    if ( ucs.equals( s1 ) )\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc130>"": ""{\n    SSTRecord record = new SSTRecord();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc1c0>"": ""{\n    UnicodeString s1 = new UnicodeString(\""Hello world\"");\n}""}",0,1,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/poi/poi-3.6/src/poi-3.6/src/testcases/org/apache/poi/hssf/record/TestSSTRecord.java,testSimpleAddString,266,4.0,29.0,[],[],"[[(307, 307), (271, 271), (266, 266)], [(307, 307), (267, 267), (288, 288), (266, 266)], [(291, 291), (292, 292), (294, 294), (306, 306), (290, 290)], [(307, 307), (267, 267), (266, 266)], [(307, 307), (268, 268), (266, 266)]]","[(267, 273), (267, 274), (267, 275), (267, 276), (267, 277), (267, 278), (267, 279), (267, 280), (267, 281), (267, 282), (267, 283), (267, 284), (267, 285), (267, 286), (267, 287), (267, 288), (268, 274), (268, 275), (268, 276), (268, 277), (268, 278), (268, 279), (268, 280), (268, 281), (268, 282), (268, 283), (268, 284), (268, 285), (268, 286), (268, 287), (268, 288), (270, 276), (270, 277), (270, 278), (270, 279), (270, 280), (270, 281), (270, 282), (270, 283), (270, 284), (270, 285), (270, 286), (270, 287), (270, 288), (271, 277), (271, 278), (271, 279), (271, 280), (271, 281), (271, 282), (271, 283), (271, 284), (271, 285), (271, 286), (271, 287), (271, 288), (273, 279), (273, 280), (273, 281), (273, 282), (273, 283), (273, 284), (273, 285), (273, 286), (273, 287), (273, 288), (274, 280), (274, 281), (274, 282), (274, 283), (274, 284), (274, 285), (274, 286), (274, 287), (274, 288), (275, 281), (275, 282), (275, 283), (275, 284), (275, 285), (275, 286), (275, 287), (275, 288), (275, 306), (276, 282), (276, 283), (276, 284), (276, 285), (276, 286), (276, 287), (276, 288), (276, 306), (277, 283), (277, 284), (277, 285), (277, 286), (277, 287), (277, 288), (277, 306), (278, 284), (278, 285), (278, 286), (278, 287), (278, 288), (278, 306), (279, 285), (279, 286), (279, 287), (279, 288), (279, 306), (280, 286), (280, 287), (280, 288), (280, 306), (281, 287), (281, 288), (281, 306), (282, 288), (282, 306), (283, 306), (284, 306), (285, 306), (286, 306), (287, 306), (288, 306), (290, 306), (292, 305), (294, 305), (298, 305), (299, 305)]"
22,24,24,2,False,[],[],"[[(25, 25), (20, 20), (19, 19), (21, 21), (24, 24)], [(17, 17), (5, 5), (14, 14), (7, 7), (16, 16), (0, 0), (13, 13), (35, 35), (10, 10), (32, 32), (12, 12), (2, 2), (6, 6), (11, 11)], [(6, 6), (10, 10), (32, 32)], [(2, 2), (35, 35), (0, 0)], [(17, 17), (12, 12), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc640>"": ""int index = -1;\nif (application != null)\n\tindex = fApplicationCombo.indexOf(application);\nif (index == -1)\n\tindex = fApplicationCombo.indexOf(TargetPlatform.getDefaultApplication());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc8e0>"": ""{\nString attribute = getApplicationAttribute();\nString application = config.getAttribute(attribute, (String) null);\nif (application == null || fApplicationCombo.indexOf(application) == -1) {\n\tapplication = null;\n\tStringTokenizer tokenizer = new StringTokenizer(config.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS, \""\"")); //$NON-NLS-1$\n\twhile (tokenizer.hasMoreTokens()) {\n\t\tString token = tokenizer.nextToken();\n\t\tif (token.equals(\""-application\"") && tokenizer.hasMoreTokens()) { //$NON-NLS-1$\n\t\t\tapplication = tokenizer.nextToken();\n\t\t}\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad37e8160>"": ""{\n\tStringTokenizer tokenizer = new StringTokenizer(config.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS, \""\"")); //$NON-NLS-1$\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc7c0>"": ""{\nString attribute = getApplicationAttribute();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad3bfc9d0>"": ""{\n\tString token = tokenizer.nextToken();\n}""}",0,1,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/pde/internal/ui/launcher/ProgramBlock.java,initializeApplicationSection,142,10.0,23.0,[],[],"[[(167, 167), (162, 162), (161, 161), (163, 163), (166, 166)], [(159, 159), (147, 147), (156, 156), (149, 149), (158, 158), (142, 142), (155, 155), (177, 177), (152, 152), (174, 174), (154, 154), (144, 144), (148, 148), (153, 153)], [(148, 148), (152, 152), (174, 174)], [(144, 144), (177, 177), (142, 142)], [(159, 159), (154, 154), (153, 153)]]","[(149, 159), (149, 161), (149, 163), (149, 165), (149, 167), (149, 173), (151, 159), (151, 161), (151, 163), (151, 165), (151, 167), (151, 173), (152, 159), (152, 159), (152, 161), (152, 161), (152, 163), (152, 163), (152, 165), (152, 165), (152, 167), (152, 167), (152, 173), (152, 173), (153, 159), (153, 161), (153, 163), (153, 165), (153, 167), (153, 173), (161, 167), (161, 173), (162, 173), (165, 173), (166, 173)]"
23,25,25,2,False,[],[],"[[(12, 12), (21, 21), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad4337c70>"": "" else {\nString type= getType();\n""}",0,0,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/javaeditor/CompilationUnitDocumentProvider.java,initializeImage,232,9.0,24.0,[],[],"[[(244, 244), (253, 253), (243, 243)]]","[(235, 253), (236, 253), (236, 254), (237, 253), (237, 254), (238, 253), (238, 254), (244, 252), (245, 252)]"
24,27,27,2,False,"[(10, 16), (17, 23)]","[(6, 6), (27, 27), (20, 20), (13, 13)]","[[(8, 8), (30, 30), (0, 0), (1, 1), (20, 20), (13, 13), (2, 2), (6, 6), (22, 22), (15, 15)], [(30, 30), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ad0a80eb0>"": ""{\nint /*long*/[] result = new int /*long*/[1];\nint hr = webView.mainFrame (result);\nIWebFrame mainFrame = new IWebFrame (result[0]);\nhr = mainFrame.dataSource (result);\nIWebDataSource dataSource = new IWebDataSource (result[0]);\nhr = dataSource.representation (result);\nIWebDocumentRepresentation representation = new IWebDocumentRepresentation (result[0]);\nhr = representation.documentSource (result);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad23724c0>"": ""IWebDocumentRepresentation representation = new IWebDocumentRepresentation (result[0]);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad23942e0>"": ""IWebFrame mainFrame = new IWebFrame (result[0]);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad09c6130>"": ""String source = extractBSTR (result[0]);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad0a80d60>"": ""{\nint /*long*/[] result = new int /*long*/[1];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad23941f0>"": ""IWebDataSource dataSource = new IWebDataSource (result[0]);""}",0,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/swt/browser/WebKit.java,getText,729,9.0,26.0,"[(739, 745), (746, 752)]","[(735, 735), (756, 756), (749, 749), (742, 742)]","[[(737, 737), (759, 759), (729, 729), (730, 730), (749, 749), (742, 742), (731, 731), (735, 735), (751, 751), (744, 744)], [(759, 759), (730, 730), (729, 729)]]","[(730, 736), (730, 737), (730, 738), (730, 741), (730, 742), (730, 743), (730, 744), (730, 745), (730, 748), (730, 749), (730, 750), (730, 751), (730, 752), (731, 737), (731, 738), (731, 741), (731, 742), (731, 743), (731, 744), (731, 745), (731, 748), (731, 749), (731, 750), (731, 751), (731, 752), (732, 738), (732, 741), (732, 742), (732, 743), (732, 744), (732, 745), (732, 748), (732, 749), (732, 750), (732, 751), (732, 752), (732, 755), (735, 741), (735, 742), (735, 743), (735, 744), (735, 745), (735, 748), (735, 749), (735, 750), (735, 751), (735, 752), (735, 755), (735, 756), (735, 757), (735, 758), (736, 742), (736, 743), (736, 744), (736, 745), (736, 748), (736, 749), (736, 750), (736, 751), (736, 752), (736, 755), (736, 756), (736, 757), (736, 758), (737, 743), (737, 744), (737, 745), (737, 748), (737, 749), (737, 750), (737, 751), (737, 752), (737, 755), (737, 756), (737, 757), (737, 758), (738, 744), (738, 745), (738, 748), (738, 749), (738, 750), (738, 751), (738, 752), (738, 755), (738, 756), (738, 757), (738, 758), (739, 745), (739, 748), (739, 749), (739, 750), (739, 751), (739, 752), (739, 755), (739, 756), (739, 757), (739, 758), (742, 748), (742, 749), (742, 750), (742, 751), (742, 752), (742, 755), (742, 756), (742, 757), (742, 758), (743, 749), (743, 750), (743, 751), (743, 752), (743, 755), (743, 756), (743, 757), (743, 758), (744, 750), (744, 751), (744, 752), (744, 755), (744, 756), (744, 757), (744, 758), (745, 751), (745, 752), (745, 755), (745, 756), (745, 757), (745, 758), (746, 752), (746, 755), (746, 756), (746, 757), (746, 758), (749, 755), (749, 756), (749, 757), (749, 758), (750, 756), (750, 757), (750, 758), (751, 757), (751, 758), (752, 758)]"
25,28,28,2,False,"[(22, 27)]",[],"[[(29, 29), (0, 0)], [(4, 4), (17, 17), (9, 9)], [(4, 4), (8, 8), (17, 17), (0, 0), (20, 20), (29, 29), (3, 3), (21, 21), (18, 18), (2, 2), (6, 6)], [(28, 28), (3, 3), (21, 21), (22, 22)], [(4, 4), (17, 17), (14, 14), (9, 9), (10, 10), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbed850>"": ""private void loadManifest() throws IOException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbf70d0>"": ""{\n    JarFile jarFile = new JarFile(physicalJar, false);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed9a0>"": ""{\n    File jarBeingOpened = null; // for annotation purposes\n    try {\n        if (reloadable) {\n            jarBeingOpened = physicalJar; // might be null\n            jarBeingOpened = physicalJar; // might have changed\n        } else {\n            jarBeingOpened = jar;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbed5b0>"": ""try {\n} catch (IOException e) {\n    if (jarBeingOpened != null) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbe6dc0>"": ""{\n    JarFile jarFile = new JarFile(physicalJar, false);\n    try {\n        Manifest m = jarFile.getManifest();\n    }\n}""}",0,0,2,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/o.n.bootstrap/src/org/netbeans/StandardModule.java,loadManifest,288,7.0,21.0,"[(310, 315)]",[],"[[(317, 317), (288, 288)], [(292, 292), (305, 305), (297, 297)], [(292, 292), (296, 296), (305, 305), (288, 288), (308, 308), (317, 317), (291, 291), (309, 309), (306, 306), (290, 290), (294, 294)], [(316, 316), (291, 291), (309, 309), (310, 310)], [(292, 292), (305, 305), (302, 302), (297, 297), (298, 298), (299, 299)]]","[(292, 308), (293, 304), (294, 304), (294, 304), (295, 304), (296, 304), (296, 304), (297, 304), (298, 304)]"
26,29,29,2,False,"[(7, 23), (7, 14), (7, 14)]",[],"[[(4, 4), (8, 8), (7, 7), (16, 16), (0, 0), (19, 19), (3, 3), (2, 2), (24, 24)], [(1, 1), (24, 24), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbf7d00>"": ""{\nint ch;\nwhile ((ch= in.read()) != -1) {\n\tif (ch == '\\n') {\n\t} else if (ch == '\\r') {\n\t\tch= in.read();\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acfbf7790>"": ""{\n\tStringBuffer buf= new StringBuffer(128);\n}""}",0,1,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/junit/model/RemoteTestRunnerClient.java,readMessage,348,6.0,22.0,"[(355, 371), (355, 362), (355, 362)]",[],"[[(352, 352), (356, 356), (355, 355), (364, 364), (348, 348), (367, 367), (351, 351), (350, 350), (372, 372)], [(349, 349), (372, 372), (348, 348)]]","[(349, 367), (350, 367), (350, 368), (351, 367), (351, 368), (352, 366), (355, 364), (355, 364), (355, 366), (355, 366), (356, 362), (356, 363), (357, 363)]"
27,30,30,2,False,[],[],"[[(10, 10), (1, 1), (0, 0)], [(8, 8), (3, 3), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acfbe6130>"": ""{\nNode parentNode = root.find(parentPath, 0);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ad0a80c40>"": ""{\nint index = parentNode.indexOfFilteredElement(element);\n""}",0,0,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/debug/internal/ui/viewers/model/FilterTransform.java,removeElementFromFilters,288,8.0,29.0,[],[],"[[(298, 298), (289, 289), (288, 288)], [(296, 296), (291, 291), (290, 290)]]","[(290, 320), (291, 320), (292, 317), (293, 317), (298, 314), (298, 315), (298, 316), (299, 314), (299, 315), (299, 316), (300, 314), (300, 315), (300, 316), (304, 314), (304, 314), (308, 314)]"
28,31,31,2,False,[],"[(18, 18)]","[[(8, 8), (30, 30), (5, 5), (7, 7), (0, 0), (1, 1), (10, 10), (3, 3), (2, 2), (6, 6)], [(30, 30), (5, 5), (7, 7), (0, 0), (1, 1), (10, 10), (2, 2), (6, 6)], [(30, 30), (5, 5), (0, 0), (1, 1), (10, 10), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acf41d820>"": ""Throwable tr"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40d8b0>"": ""{\n    OutputStream fos = null;\n    OutputStream bos = null;\n    DataOutputStream dos = null;\n    try {\n        fos = new FileOutputStream(MASTER_INDEX_FILE_NAME, false);\n        bos = new BufferedOutputStream(fos);\n        dos = new DataOutputStream(bos);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40dac0>"": ""{\n    OutputStream fos = null;\n    OutputStream bos = null;\n    try {\n        fos = new FileOutputStream(MASTER_INDEX_FILE_NAME, false);\n        bos = new BufferedOutputStream(fos);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40dd30>"": ""{\n    OutputStream fos = null;\n    try {\n        fos = new FileOutputStream(MASTER_INDEX_FILE_NAME, false);\n    }\n}""}",0,0,2,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.repository/src/org/netbeans/modules/cnd/repository/translator/RepositoryTranslatorImpl.java,storeMasterIndex,369,9.0,21.0,[],"[(387, 387)]","[[(377, 377), (399, 399), (374, 374), (376, 376), (369, 369), (370, 370), (379, 379), (372, 372), (371, 371), (375, 375)], [(399, 399), (374, 374), (376, 376), (369, 369), (370, 370), (379, 379), (371, 371), (375, 375)], [(399, 399), (374, 374), (369, 369), (370, 370), (379, 379), (375, 375)]]",
29,32,32,2,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/ogc/net.opengis.wfs/src/net/opengis/wfs/impl/FeatureTypeTypeImpl.java,eGet,519,12.0,25.0,[],[],[],"[(521, 527), (521, 528), (521, 529), (521, 530), (521, 531), (521, 532), (521, 533), (521, 534), (521, 535), (521, 536), (521, 537), (521, 538), (521, 539), (521, 540), (522, 528), (522, 529), (522, 530), (522, 531), (522, 532), (522, 533), (522, 534), (522, 535), (522, 536), (522, 537), (522, 538), (522, 539), (522, 540), (522, 541), (523, 529), (523, 530), (523, 531), (523, 532), (523, 533), (523, 534), (523, 535), (523, 536), (523, 537), (523, 538), (523, 539), (523, 540), (523, 541), (523, 542), (524, 530), (524, 531), (524, 532), (524, 533), (524, 534), (524, 535), (524, 536), (524, 537), (524, 538), (524, 539), (524, 540), (524, 541), (524, 542), (525, 531), (525, 532), (525, 533), (525, 534), (525, 535), (525, 536), (525, 537), (525, 538), (525, 539), (525, 540), (525, 541), (525, 542), (526, 532), (526, 533), (526, 534), (526, 535), (526, 536), (526, 537), (526, 538), (526, 539), (526, 540), (526, 541), (526, 542), (527, 533), (527, 534), (527, 535), (527, 536), (527, 537), (527, 538), (527, 539), (527, 540), (527, 541), (527, 542), (528, 534), (528, 535), (528, 536), (528, 537), (528, 538), (528, 539), (528, 540), (528, 541), (528, 542), (529, 535), (529, 536), (529, 537), (529, 538), (529, 539), (529, 540), (529, 541), (529, 542), (530, 536), (530, 537), (530, 538), (530, 539), (530, 540), (530, 541), (530, 542), (531, 537), (531, 538), (531, 539), (531, 540), (531, 541), (531, 542), (532, 538), (532, 539), (532, 540), (532, 541), (532, 542), (533, 539), (533, 540), (533, 541), (533, 542), (534, 540), (534, 541), (534, 542), (535, 541), (535, 542), (536, 542)]"
30,33,33,2,False,[],"[(19, 19)]","[[(57, 57), (2, 2), (0, 0)], [(4, 4), (5, 5), (57, 57), (0, 0), (3, 3), (2, 2), (6, 6)], [(36, 36), (35, 35), (19, 19), (47, 47), (22, 22)], [(4, 4), (5, 5), (2, 2), (0, 0), (57, 57)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acdcdea30>"": ""{\nPatchConfiguration configuration = getConfiguration();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde250>"": ""{\nPatchConfiguration configuration = getConfiguration();\nint fuzz = 0;\nint maxFuzz = configuration.getFuzz() == -1 ? MAXIMUM_FUZZ_FACTOR\n\t\t: configuration.getFuzz();\nfor (; fuzz <= maxFuzz; fuzz++) {\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f550>"": ""int hugeShift = lines.size();\nfor (int i = 1; i <= hugeShift; i++) {\nif (!this.fMatches) {\n\tfor (int i = 1; i <= hugeShift; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde970>"": ""{\nPatchConfiguration configuration = getConfiguration();\nint maxFuzz = configuration.getFuzz() == -1 ? MAXIMUM_FUZZ_FACTOR\n\t\t: configuration.getFuzz();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f790>"": ""int hugeShift = lines.size();""}",6,0,0,9,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/compare/internal/core/patch/HunkResult.java,calculateFuzz,118,17.0,33.0,[],"[(137, 137)]","[[(175, 175), (120, 120), (118, 118)], [(122, 122), (123, 123), (175, 175), (118, 118), (121, 121), (120, 120), (124, 124)], [(154, 154), (153, 153), (137, 137), (165, 165), (140, 140)], [(122, 122), (123, 123), (120, 120), (118, 118), (175, 175)]]",exception_happened
31,34,34,2,False,"[(18, 29)]",[],"[[(20, 20), (29, 29), (33, 33), (2, 2), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (8, 8), (17, 17), (27, 27), (13, 13), (32, 32), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(20, 20), (29, 29), (33, 33), (2, 2), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (31, 31), (8, 8), (17, 17), (27, 27), (13, 13), (32, 32), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acdcde0a0>"": ""{\n    switch (e.getKind()) {\n        case CLASS: {\n            TypeElement te = (TypeElement) e;\n            TypeMirror superType = te.getSuperclass();\n            if (superType.getKind().equals(TypeKind.NONE)) {\n                return false;\n            } else {\n                e = ((DeclaredType) superType).asElement();\n                String clazz = processingEnv.getElementUtils().getBinaryName((TypeElement) e).toString();\n                if (clazz.equals(providerClass.getName())) {\n                    return true;\n                } else {\n                    return isClassOf(e, providerClass);\n                }\n            }\n        }\n        case METHOD: {\n            TypeMirror retType = ((ExecutableElement) e).getReturnType();\n            if (retType.getKind().equals(TypeKind.NONE)) {\n                return false;\n            } else {\n                e = ((DeclaredType) retType).asElement();\n                String clazz = processingEnv.getElementUtils().getBinaryName((TypeElement) e).toString();\n                if (clazz.equals(providerClass.getName())) {\n                    return true;\n                } else {\n                    return isClassOf(e, providerClass);\n                }\n            }\n        }\n        default:\n            throw new IllegalArgumentException(\""Annotated element is not loadable as an instance: \"" + e);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde7f0>"": ""{\n    switch (e.getKind()) {\n        case CLASS: {\n            TypeElement te = (TypeElement) e;\n            TypeMirror superType = te.getSuperclass();\n            if (superType.getKind().equals(TypeKind.NONE)) {\n                return false;\n            } else {\n                e = ((DeclaredType) superType).asElement();\n                String clazz = processingEnv.getElementUtils().getBinaryName((TypeElement) e).toString();\n                if (clazz.equals(providerClass.getName())) {\n                    return true;\n                } else {\n                    return isClassOf(e, providerClass);\n                }\n            }\n        }\n        case METHOD: {\n            TypeMirror retType = ((ExecutableElement) e).getReturnType();\n            if (retType.getKind().equals(TypeKind.NONE)) {\n                return false;\n            } else {\n                e = ((DeclaredType) retType).asElement();\n                String clazz = processingEnv.getElementUtils().getBinaryName((TypeElement) e).toString();\n                if (clazz.equals(providerClass.getName())) {\n                    return true;\n                } else {\n                    return isClassOf(e, providerClass);\n                }\n            }\n        }\n        default:\n            throw new IllegalArgumentException(\""Annotated element is not loadable as an instance: \"" + e);\n    }\n}""}",0,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/api.debugger/src/org/netbeans/debugger/registry/DebuggerProcessor.java,isClassOf,224,8.0,27.0,"[(242, 253)]",[],"[[(244, 244), (253, 253), (257, 257), (226, 226), (258, 258), (235, 235), (254, 254), (231, 231), (240, 240), (249, 249), (250, 250), (227, 227), (236, 236), (245, 245), (246, 246), (255, 255), (232, 232), (241, 241), (251, 251), (237, 237), (256, 256), (242, 242), (228, 228), (229, 229), (238, 238), (247, 247), (224, 224), (233, 233), (225, 225), (248, 248), (234, 234), (243, 243), (252, 252), (230, 230), (239, 239)], [(244, 244), (253, 253), (257, 257), (226, 226), (258, 258), (235, 235), (254, 254), (231, 231), (240, 240), (249, 249), (250, 250), (227, 227), (236, 236), (245, 245), (246, 246), (255, 255), (232, 232), (241, 241), (251, 251), (237, 237), (256, 256), (242, 242), (228, 228), (229, 229), (238, 238), (247, 247), (224, 224), (233, 233), (225, 225), (248, 248), (234, 234), (243, 243), (252, 252), (230, 230), (239, 239)]]","[(226, 240), (226, 240), (226, 241), (226, 241), (232, 238), (241, 254), (241, 254), (241, 255), (241, 255), (241, 256), (241, 256), (246, 252)]"
32,35,35,2,False,[],[],"[[(1, 1), (24, 24), (2, 2), (0, 0)], [(1, 1), (24, 24), (0, 0)], [(4, 4), (3, 3), (22, 22)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acf40bb80>"": ""{\n    int max = s.length();\n    StringBuffer s2 = new StringBuffer((int)(max * 1.1 + 1));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf40bf10>"": ""{\n    int max = s.length();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acf0d6b50>"": ""{\n    char c = s.charAt(i);\n}""}",2,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/nbbuild/antsrc/org/netbeans/nbbuild/MakeUpdateDesc.java,xmlEscape,200,6.0,22.0,[],[],"[[(201, 201), (224, 224), (202, 202), (200, 200)], [(201, 201), (224, 224), (200, 200)], [(204, 204), (203, 203), (222, 222)]]",
33,36,36,2,False,[],"[(1, 1)]","[[(4, 4), (3, 3), (18, 18), (2, 2), (6, 6)], [(4, 4), (8, 8), (3, 3), (18, 18), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd398d00>"": ""Token token : super.getTokens()"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd398730>"": ""{\n    String versionImage = token.getValue();\n    int versionIndex = versionImage.indexOf(\""standalone\"");\n    versionIndex = versionImage.indexOf('=',versionIndex);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd398970>"": ""{\n    String versionImage = token.getValue();\n    int versionIndex = versionImage.indexOf(\""standalone\"");\n    versionIndex = versionImage.indexOf('=',versionIndex);\n    versionImage = versionImage.substring(versionIndex+1).trim();\n}""}",1,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/xml.xdm/src/org/netbeans/modules/xml/xdm/nodes/Document.java,getXmlStandalone,912,9.0,24.0,[],"[(913, 913)]","[[(916, 916), (915, 915), (930, 930), (914, 914), (918, 918)], [(916, 916), (920, 920), (915, 915), (930, 930), (914, 914), (918, 918)]]","[(915, 929), (916, 929), (917, 929), (918, 929), (919, 929), (920, 929), (921, 929)]"
34,37,37,2,False,"[(7, 12), (35, 40)]","[(28, 28), (51, 51)]","[[(17, 17), (14, 14), (23, 23), (24, 24), (20, 20), (19, 19), (28, 28), (18, 18), (55, 55), (34, 34), (22, 22), (15, 15)], [(17, 17), (14, 14), (20, 20), (19, 19), (18, 18), (55, 55), (15, 15)], [(14, 14), (55, 55)], [(17, 17), (14, 14), (20, 20), (33, 33), (19, 19), (18, 18), (55, 55), (15, 15)], [(8, 8), (7, 7), (9, 9), (10, 10), (12, 12), (11, 11)], [(37, 37), (40, 40), (39, 39), (35, 35)], [(1, 1), (56, 56), (0, 0)], [(23, 23), (20, 20), (28, 28), (34, 34), (22, 22)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd10ac10>"": ""for (String element : saEquip) {\r\n    String equipName = element.trim();\n    // ProtoMech Ammo comes in non-standard amounts.\r\n    int ammoIndex = equipName.indexOf(\""Ammo (\"");\n    int shotsCount = 0;\n    if (ammoIndex > 0) {\r\n        try {\r\n            String shots = equipName.substring(ammoIndex + 6, equipName.length() - 1);\n            shotsCount = Integer.parseInt(shots);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10a490>"": ""for (String element : saEquip) {\r\n    String equipName = element.trim();\n    // ProtoMech Ammo comes in non-standard amounts.\r\n    int ammoIndex = equipName.indexOf(\""Ammo (\"");\n    int shotsCount = 0;\n    if (ammoIndex > 0) {\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10f6a0>"": ""String element : saEquip) {\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10aeb0>"": ""for (String element : saEquip) {\r\n    String equipName = element.trim();\n    // ProtoMech Ammo comes in non-standard amounts.\r\n    int ammoIndex = equipName.indexOf(\""Ammo (\"");\n    int shotsCount = 0;\n    if (ammoIndex > 0) {\r\n        equipName = equipName.substring(0, ammoIndex + 4);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10fac0>"": ""String prefix;\nif (t.getTechLevel() == TechConstants.T_CLAN_TW) {\r\n    prefix = \""Clan \"";\n} else {\r\n    prefix = \""IS \"";\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9faf0>"": ""NumberFormatException badShots"", ""<program_slicing.graph.statement.Statement object at 0x7f4aced9f370>"": ""EquipmentType etype = EquipmentType.get(equipName);\nif (etype == null) {\r\n    etype = EquipmentType.get(prefix + equipName);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10ffa0>"": ""{\r\n    String[] saEquip = dataFile.getDataAsString(sName + \"" Equipment\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10a7c0>"": ""{\r\n    try {\r\n        String shots = equipName.substring(ammoIndex + 6, equipName.length() - 1);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde3d0>"": ""LocationFullException ex""}",1,0,2,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/megamek/megamek-0.35.18/src/src/megamek/common/loaders/BLKProtoFile.java,loadEquipment,145,14.0,32.0,"[(152, 157), (180, 185)]","[(173, 173), (196, 196)]","[[(162, 162), (159, 159), (168, 168), (169, 169), (165, 165), (164, 164), (173, 173), (163, 163), (200, 200), (179, 179), (167, 167), (160, 160)], [(162, 162), (159, 159), (165, 165), (164, 164), (163, 163), (200, 200), (160, 160)], [(159, 159), (200, 200)], [(162, 162), (159, 159), (165, 165), (178, 178), (164, 164), (163, 163), (200, 200), (160, 160)], [(153, 153), (152, 152), (154, 154), (155, 155), (157, 157), (156, 156)], [(182, 182), (185, 185), (184, 184), (180, 180)], [(146, 146), (201, 201), (145, 145)], [(168, 168), (165, 165), (173, 173), (179, 179), (167, 167)]]","[(146, 152), (146, 157), (147, 157), (151, 157), (159, 200), (160, 179), (160, 180), (160, 185), (160, 199), (162, 179), (162, 180), (162, 185), (162, 199), (163, 179), (163, 180), (163, 185), (163, 199), (164, 179), (164, 180), (164, 185), (164, 199), (165, 179), (165, 180), (165, 185), (165, 199), (166, 175), (166, 177), (166, 178), (167, 175), (167, 177), (167, 178), (180, 199), (182, 199), (187, 199), (188, 198), (189, 195)]"
35,38,38,2,False,[],"[(3, 3)]","[[(4, 4), (5, 5), (7, 7), (16, 16), (9, 9), (25, 25), (13, 13), (26, 26), (10, 10), (19, 19), (3, 3), (12, 12), (18, 18), (21, 21), (22, 22), (15, 15)], [(31, 31), (0, 0)], [(4, 4), (3, 3), (5, 5)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd0696a0>"": ""byte bom[] = new byte[BOM_SIZE];\nint n, unread;\nn = internalIn.read(bom, 0, bom.length);\nif ((bom[0] == (byte) 0x00) && (bom[1] == (byte) 0x00) && (bom[2] == (byte) 0xFE) && (bom[3] == (byte) 0xFF)) {\n    unread = n - 4;\n} else if ((bom[0] == (byte) 0xFF) && (bom[1] == (byte) 0xFE) && (bom[2] == (byte) 0x00) && (bom[3] == (byte) 0x00)) {\n    unread = n - 4;\n} else if ((bom[0] == (byte) 0xEF) && (bom[1] == (byte) 0xBB) && (bom[2] == (byte) 0xBF)) {\n    unread = n - 3;\n} else if ((bom[0] == (byte) 0xFE) && (bom[1] == (byte) 0xFF)) {\n    unread = n - 2;\n} else if ((bom[0] == (byte) 0xFF) && (bom[1] == (byte) 0xFE)) {\n    unread = n - 2;\n} else {\n    unread = n;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd0692b0>"": ""protected void init() throws IOException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd0698b0>"": ""byte bom[] = new byte[BOM_SIZE];\nint n, unread;\nn = internalIn.read(bom, 0, bom.length);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd069bb0>"": ""byte bom[] = new byte[BOM_SIZE];""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/marauroa/marauroa-3.8.1/src/marauroa-3.8.1/src/marauroa/common/io/UnicodeSupportingInputStream.java,init,107,18.0,31.0,[],"[(110, 110)]","[[(111, 111), (112, 112), (114, 114), (123, 123), (116, 116), (132, 132), (120, 120), (133, 133), (117, 117), (126, 126), (110, 110), (119, 119), (125, 125), (128, 128), (129, 129), (122, 122)], [(138, 138), (107, 107)], [(111, 111), (110, 110), (112, 112)]]","[(110, 133), (111, 133), (112, 133), (112, 135), (114, 133), (114, 135), (114, 137), (117, 133), (117, 133), (120, 133), (120, 133), (120, 133), (123, 133), (123, 133), (123, 133), (126, 133), (126, 133), (126, 133)]"
36,39,39,2,False,[],[],[],{},0,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/aspectj/aspectj-1.6.9/src/org/aspectj/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java,visit,2788,17.0,34.0,[],[],[],"[(2791, 2797), (2791, 2798), (2791, 2799), (2791, 2800), (2791, 2801), (2791, 2802), (2791, 2803), (2791, 2804), (2791, 2805), (2791, 2806), (2791, 2807), (2791, 2808), (2791, 2809), (2791, 2810), (2791, 2811), (2791, 2812), (2791, 2813), (2791, 2814), (2791, 2815), (2791, 2816), (2791, 2817), (2791, 2818), (2792, 2798), (2792, 2799), (2792, 2800), (2792, 2801), (2792, 2802), (2792, 2803), (2792, 2804), (2792, 2805), (2792, 2806), (2792, 2807), (2792, 2808), (2792, 2809), (2792, 2810), (2792, 2811), (2792, 2812), (2792, 2813), (2792, 2814), (2792, 2815), (2792, 2816), (2792, 2817), (2792, 2818), (2792, 2819), (2793, 2799), (2793, 2800), (2793, 2801), (2793, 2802), (2793, 2803), (2793, 2804), (2793, 2805), (2793, 2806), (2793, 2807), (2793, 2808), (2793, 2809), (2793, 2810), (2793, 2811), (2793, 2812), (2793, 2813), (2793, 2814), (2793, 2815), (2793, 2816), (2793, 2817), (2793, 2818), (2793, 2819), (2793, 2820), (2794, 2800), (2794, 2801), (2794, 2802), (2794, 2803), (2794, 2804), (2794, 2805), (2794, 2806), (2794, 2807), (2794, 2808), (2794, 2809), (2794, 2810), (2794, 2811), (2794, 2812), (2794, 2813), (2794, 2814), (2794, 2815), (2794, 2816), (2794, 2817), (2794, 2818), (2794, 2819), (2794, 2820), (2794, 2821), (2795, 2801), (2795, 2802), (2795, 2803), (2795, 2804), (2795, 2805), (2795, 2806), (2795, 2807), (2795, 2808), (2795, 2809), (2795, 2810), (2795, 2811), (2795, 2812), (2795, 2813), (2795, 2814), (2795, 2815), (2795, 2816), (2795, 2817), (2795, 2818), (2795, 2819), (2795, 2820), (2795, 2821), (2795, 2822), (2796, 2802), (2796, 2803), (2796, 2804), (2796, 2805), (2796, 2806), (2796, 2807), (2796, 2808), (2796, 2809), (2796, 2810), (2796, 2811), (2796, 2812), (2796, 2813), (2796, 2814), (2796, 2815), (2796, 2816), (2796, 2817), (2796, 2818), (2796, 2819), (2796, 2820), (2796, 2821), (2796, 2822), (2797, 2803), (2797, 2804), (2797, 2805), (2797, 2806), (2797, 2807), (2797, 2808), (2797, 2809), (2797, 2810), (2797, 2811), (2797, 2812), (2797, 2813), (2797, 2814), (2797, 2815), (2797, 2816), (2797, 2817), (2797, 2818), (2797, 2819), (2797, 2820), (2797, 2821), (2797, 2822), (2798, 2804), (2798, 2805), (2798, 2806), (2798, 2807), (2798, 2808), (2798, 2809), (2798, 2810), (2798, 2811), (2798, 2812), (2798, 2813), (2798, 2814), (2798, 2815), (2798, 2816), (2798, 2817), (2798, 2818), (2798, 2819), (2798, 2820), (2798, 2821), (2798, 2822), (2799, 2805), (2799, 2806), (2799, 2807), (2799, 2808), (2799, 2809), (2799, 2810), (2799, 2811), (2799, 2812), (2799, 2813), (2799, 2814), (2799, 2815), (2799, 2816), (2799, 2817), (2799, 2818), (2799, 2819), (2799, 2820), (2799, 2821), (2799, 2822), (2800, 2806), (2800, 2807), (2800, 2808), (2800, 2809), (2800, 2810), (2800, 2811), (2800, 2812), (2800, 2813), (2800, 2814), (2800, 2815), (2800, 2816), (2800, 2817), (2800, 2818), (2800, 2819), (2800, 2820), (2800, 2821), (2800, 2822), (2801, 2807), (2801, 2808), (2801, 2809), (2801, 2810), (2801, 2811), (2801, 2812), (2801, 2813), (2801, 2814), (2801, 2815), (2801, 2816), (2801, 2817), (2801, 2818), (2801, 2819), (2801, 2820), (2801, 2821), (2801, 2822), (2802, 2808), (2802, 2809), (2802, 2810), (2802, 2811), (2802, 2812), (2802, 2813), (2802, 2814), (2802, 2815), (2802, 2816), (2802, 2817), (2802, 2818), (2802, 2819), (2802, 2820), (2802, 2821), (2802, 2822), (2803, 2809), (2803, 2810), (2803, 2811), (2803, 2812), (2803, 2813), (2803, 2814), (2803, 2815), (2803, 2816), (2803, 2817), (2803, 2818), (2803, 2819), (2803, 2820), (2803, 2821), (2803, 2822), (2804, 2810), (2804, 2811), (2804, 2812), (2804, 2813), (2804, 2814), (2804, 2815), (2804, 2816), (2804, 2817), (2804, 2818), (2804, 2819), (2804, 2820), (2804, 2821), (2804, 2822), (2805, 2811), (2805, 2812), (2805, 2813), (2805, 2814), (2805, 2815), (2805, 2816), (2805, 2817), (2805, 2818), (2805, 2819), (2805, 2820), (2805, 2821), (2805, 2822), (2806, 2812), (2806, 2813), (2806, 2814), (2806, 2815), (2806, 2816), (2806, 2817), (2806, 2818), (2806, 2819), (2806, 2820), (2806, 2821), (2806, 2822), (2807, 2813), (2807, 2814), (2807, 2815), (2807, 2816), (2807, 2817), (2807, 2818), (2807, 2819), (2807, 2820), (2807, 2821), (2807, 2822), (2808, 2814), (2808, 2815), (2808, 2816), (2808, 2817), (2808, 2818), (2808, 2819), (2808, 2820), (2808, 2821), (2808, 2822), (2809, 2815), (2809, 2816), (2809, 2817), (2809, 2818), (2809, 2819), (2809, 2820), (2809, 2821), (2809, 2822), (2810, 2816), (2810, 2817), (2810, 2818), (2810, 2819), (2810, 2820), (2810, 2821), (2810, 2822), (2811, 2817), (2811, 2818), (2811, 2819), (2811, 2820), (2811, 2821), (2811, 2822), (2812, 2818), (2812, 2819), (2812, 2820), (2812, 2821), (2812, 2822), (2813, 2819), (2813, 2820), (2813, 2821), (2813, 2822), (2814, 2820), (2814, 2821), (2814, 2822), (2815, 2821), (2815, 2822), (2816, 2822)]"
37,40,40,2,False,[],[],"[[(4, 4), (7, 7), (0, 0), (32, 32), (3, 3), (2, 2), (24, 24)], [(32, 32), (7, 7), (0, 0)], [(8, 8), (7, 7), (9, 9), (25, 25), (13, 13), (10, 10), (12, 12), (11, 11)], [(32, 32), (5, 5), (0, 0)], [(32, 32), (3, 3), (0, 0)], [(32, 32), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd069a60>"": ""{\n  final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n  final T NO_OUTPUT = fst.outputs.getNoOutput();\n  T output = NO_OUTPUT;\n  for(int i=0;i<=term.length;i++) {\n    output = fst.outputs.add(output, arc.output);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd069070>"": ""{\n  for(int i=0;i<=term.length;i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd10f310>"": ""i++) {\n  final int label;\n  if (i == term.length) {\n    label = FST.END_LABEL;\n  } else {\n    label = term.ints[term.offset+i];\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd0693a0>"": ""{\n  final FST.BytesReader fstReader = fst.getBytesReader();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd0695b0>"": ""{\n  final T NO_OUTPUT = fst.outputs.getNoOutput();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d1c0>"": ""{\n  final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n}""}",2,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java,run,202,6.0,22.0,[],[],"[[(206, 206), (209, 209), (202, 202), (234, 234), (205, 205), (204, 204), (226, 226)], [(234, 234), (209, 209), (202, 202)], [(210, 210), (209, 209), (211, 211), (227, 227), (215, 215), (212, 212), (214, 214), (213, 213)], [(234, 234), (207, 207), (202, 202)], [(234, 234), (205, 205), (202, 202)], [(234, 234), (204, 204), (202, 202)]]","[(203, 227), (204, 227), (205, 227), (206, 227), (207, 227), (207, 231), (209, 227), (209, 231), (209, 233), (210, 216), (210, 225), (210, 226), (211, 225), (211, 226), (216, 225), (216, 226), (217, 225), (217, 226), (218, 224)]"
38,41,41,1,False,[],[],"[[(16, 16), (0, 0), (1, 1), (38, 38), (2, 2), (6, 6), (15, 15)], [(6, 6), (38, 38), (0, 0)], [(16, 16), (0, 0), (1, 1), (20, 20), (38, 38), (2, 2), (6, 6), (15, 15)], [(38, 38), (21, 21), (22, 22), (0, 0)], [(1, 1), (2, 2), (38, 38), (0, 0)], [(27, 27), (16, 16), (0, 0), (1, 1), (25, 25), (20, 20), (29, 29), (26, 26), (38, 38), (28, 28), (32, 32), (21, 21), (2, 2), (6, 6), (22, 22), (15, 15)], [(30, 30), (27, 27), (16, 16), (0, 0), (1, 1), (25, 25), (20, 20), (29, 29), (26, 26), (38, 38), (28, 28), (32, 32), (21, 21), (2, 2), (6, 6), (22, 22), (15, 15)], [(38, 38), (0, 0)], [(9, 9), (0, 0), (1, 1), (38, 38), (2, 2)], [(4, 4), (0, 0), (1, 1), (38, 38), (3, 3), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4acd10fa30>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  ClientDatanodeProtocol mockDN = mock(ClientDatanodeProtocol.class);\n  final Server server = RPC.getServer(mockDN,\n      ADDRESS, 0, 5, true, conf, sm);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcde640>"": ""{\n  ClientDatanodeProtocol mockDN = mock(ClientDatanodeProtocol.class);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d430>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  ClientDatanodeProtocol mockDN = mock(ClientDatanodeProtocol.class);\n  final Server server = RPC.getServer(mockDN,\n      ADDRESS, 0, 5, true, conf, sm);\n  final InetSocketAddress addr = NetUtils.getConnectAddress(server);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d190>"": ""{\n  final UserGroupInformation ticket = UserGroupInformation\n      .createRemoteUser(block3.toString());\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13dac0>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d0d0>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  ClientDatanodeProtocol mockDN = mock(ClientDatanodeProtocol.class);\n  final Server server = RPC.getServer(mockDN,\n      ADDRESS, 0, 5, true, conf, sm);\n  final InetSocketAddress addr = NetUtils.getConnectAddress(server);\n  final UserGroupInformation ticket = UserGroupInformation\n      .createRemoteUser(block3.toString());\n  ClientDatanodeProtocol proxy = null;\n  try {\n    proxy = (ClientDatanodeProtocol) RPC.getProxy(\n        ClientDatanodeProtocol.class, ClientDatanodeProtocol.versionID, addr,\n        ticket, conf, NetUtils.getDefaultSocketFactory(conf));\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9f532e0>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  ClientDatanodeProtocol mockDN = mock(ClientDatanodeProtocol.class);\n  final Server server = RPC.getServer(mockDN,\n      ADDRESS, 0, 5, true, conf, sm);\n  final InetSocketAddress addr = NetUtils.getConnectAddress(server);\n  final UserGroupInformation ticket = UserGroupInformation\n      .createRemoteUser(block3.toString());\n  ClientDatanodeProtocol proxy = null;\n  try {\n    proxy = (ClientDatanodeProtocol) RPC.getProxy(\n        ClientDatanodeProtocol.class, ClientDatanodeProtocol.versionID, addr,\n        ticket, conf, NetUtils.getDefaultSocketFactory(conf));\n    LocatedBlock lb = proxy.recoverBlock(block3, true, null);\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13dd60>"": ""public void testBlockTokenRpc() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd069190>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  BlockTokenIdentifier id = sm.createIdentifier();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4aca13d5b0>"": ""{\n  BlockTokenSecretManager sm = new BlockTokenSecretManager(true,\n      blockKeyUpdateInterval, blockTokenLifetime);\n  Token<BlockTokenIdentifier> token = sm.generateToken(block3,\n      EnumSet.allOf(BlockTokenSecretManager.AccessMode.class));\n}""}",0,0,1,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hadoop/hadoop-1.0.0/src/hadoop-1.0.0/src/test/org/apache/hadoop/hdfs/security/token/block/TestBlockToken.java,testBlockTokenRpc,189,2.0,21.0,[],[],"[[(205, 205), (189, 189), (190, 190), (227, 227), (191, 191), (195, 195), (204, 204)], [(195, 195), (227, 227), (189, 189)], [(205, 205), (189, 189), (190, 190), (209, 209), (227, 227), (191, 191), (195, 195), (204, 204)], [(227, 227), (210, 210), (211, 211), (189, 189)], [(190, 190), (191, 191), (227, 227), (189, 189)], [(216, 216), (205, 205), (189, 189), (190, 190), (214, 214), (209, 209), (218, 218), (215, 215), (227, 227), (217, 217), (221, 221), (210, 210), (191, 191), (195, 195), (211, 211), (204, 204)], [(219, 219), (216, 216), (205, 205), (189, 189), (190, 190), (214, 214), (209, 209), (218, 218), (215, 215), (227, 227), (217, 217), (221, 221), (210, 210), (191, 191), (195, 195), (211, 211), (204, 204)], [(227, 227), (189, 189)], [(198, 198), (189, 189), (190, 190), (227, 227), (191, 191)], [(193, 193), (189, 189), (190, 190), (227, 227), (192, 192), (191, 191)]]","[(190, 197), (190, 198), (190, 200), (190, 202), (190, 205), (190, 207), (190, 209), (190, 211), (190, 212), (190, 214), (192, 198), (192, 200), (192, 202), (192, 205), (192, 207), (192, 209), (192, 211), (192, 212), (192, 214), (195, 202), (195, 205), (195, 207), (195, 209), (195, 211), (195, 212), (195, 214), (196, 202), (196, 205), (196, 207), (196, 209), (196, 211), (196, 212), (196, 214), (198, 205), (198, 207), (198, 209), (198, 211), (198, 212), (198, 214), (198, 226), (199, 205), (199, 207), (199, 209), (199, 211), (199, 212), (199, 214), (199, 226), (201, 207), (201, 209), (201, 211), (201, 212), (201, 214), (201, 226), (204, 211), (204, 212), (204, 214), (204, 226), (207, 214), (207, 226), (209, 226), (210, 226), (212, 226), (214, 226), (215, 226)]"
39,42,42,2,False,[],[],"[[(20, 20), (29, 29), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (12, 12), (21, 21), (22, 22), (17, 17), (27, 27), (13, 13), (18, 18), (15, 15), (14, 14), (23, 23), (9, 9), (10, 10), (19, 19), (28, 28), (24, 24)], [(19, 19), (21, 21), (18, 18)], [(14, 14), (25, 25), (13, 13)], [(32, 32), (0, 0)], [(17, 17), (16, 16), (24, 24)], [(14, 14), (25, 25), (15, 15), (13, 13)], [(4, 4), (5, 5), (0, 0), (1, 1), (32, 32), (3, 3), (2, 2), (31, 31)], [(20, 20), (29, 29), (11, 11), (30, 30), (16, 16), (25, 25), (26, 26), (12, 12), (21, 21), (22, 22), (17, 17), (27, 27), (13, 13), (18, 18), (15, 15), (14, 14), (23, 23), (9, 9), (10, 10), (19, 19), (28, 28), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade670>"": ""synchronized (zip) {\n\tEnumeration<? extends ZipEntry> entries = zip.entries();\n\tString fileName = path.toString();\n\ttry {\n\t\twhile (entries.hasMoreElements()) {\n\t\t\tZipEntry entry = entries.nextElement();\n\t\t\tString entryName = entry.getName();\n\t\t\tif (entryName.endsWith(fileName)) {\n\t\t\t\tint rootLength = entryName.length() - fileName.length();\n\t\t\t\tif (rootLength > 0) {\n\t\t\t\t\tString root = entryName.substring(0, rootLength);\n\t\t\t\t\tsetRootPath(root);\n\t\t\t\t}\n\t\t\t\tfRootDetected = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} catch (IllegalStateException e) {\n\t\tthrow new CoreException(new Status(IStatus.ERROR, LaunchingPlugin.getUniqueIdentifier(), IJavaLaunchConfigurationConstants.ERR_INTERNAL_ERROR, \n\t\t\tNLS.bind(LaunchingMessages.ArchiveSourceLocation_Exception_occurred_while_detecting_root_source_directory_in_archive__0__2, new String[] {getName()}), e)); \n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a360a0>"": ""{\n\tString root = entryName.substring(0, rootLength);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade1f0>"": ""{\n\tZipEntry entry = entries.nextElement();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aeacd0>"": ""private void autoDetectRoot(IPath path) throws CoreException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a360d0>"": ""{\nint rootLength = entryName.length() - fileName.length();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade550>"": ""{\nZipEntry entry = entries.nextElement();\nString entryName = entry.getName();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aeafa0>"": ""{\nif (!fRootDetected) {\n\tZipFile zip = null;\n\ttry {\n\t\tzip = getArchive();\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade7f0>"": ""synchronized (zip) {\n\tEnumeration<? extends ZipEntry> entries = zip.entries();\n\tString fileName = path.toString();\n\ttry {\n\t\twhile (entries.hasMoreElements()) {\n\t\t\tZipEntry entry = entries.nextElement();\n\t\t\tString entryName = entry.getName();\n\t\t\tif (entryName.endsWith(fileName)) {\n\t\t\t\tint rootLength = entryName.length() - fileName.length();\n\t\t\t\tif (rootLength > 0) {\n\t\t\t\t\tString root = entryName.substring(0, rootLength);\n\t\t\t\t\tsetRootPath(root);\n\t\t\t\t}\n\t\t\t\tfRootDetected = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} catch (IllegalStateException e) {\n\t\tthrow new CoreException(new Status(IStatus.ERROR, LaunchingPlugin.getUniqueIdentifier(), IJavaLaunchConfigurationConstants.ERR_INTERNAL_ERROR, \n\t\t\tNLS.bind(LaunchingMessages.ArchiveSourceLocation_Exception_occurred_while_detecting_root_source_directory_in_archive__0__2, new String[] {getName()}), e)); \n\t}\n}""}",0,1,2,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/launching/sourcelookup/ArchiveSourceLocation.java,autoDetectRoot,194,9.0,21.0,[],[],"[[(214, 214), (223, 223), (205, 205), (224, 224), (210, 210), (219, 219), (220, 220), (206, 206), (215, 215), (216, 216), (211, 211), (221, 221), (207, 207), (212, 212), (209, 209), (208, 208), (217, 217), (203, 203), (204, 204), (213, 213), (222, 222), (218, 218)], [(213, 213), (215, 215), (212, 212)], [(208, 208), (219, 219), (207, 207)], [(226, 226), (194, 194)], [(211, 211), (210, 210), (218, 218)], [(208, 208), (219, 219), (209, 209), (207, 207)], [(198, 198), (199, 199), (194, 194), (195, 195), (226, 226), (197, 197), (196, 196), (225, 225)], [(214, 214), (223, 223), (205, 205), (224, 224), (210, 210), (219, 219), (220, 220), (206, 206), (215, 215), (216, 216), (211, 211), (221, 221), (207, 207), (212, 212), (209, 209), (208, 208), (217, 217), (203, 203), (204, 204), (213, 213), (222, 222), (218, 218)]]","[(196, 202), (203, 224), (204, 223), (205, 223), (206, 223), (207, 219), (208, 218), (209, 218), (210, 218), (211, 217)]"
40,43,43,2,False,[],[],"[[(30, 30), (1, 1), (0, 0)], [(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (8, 8), (17, 17), (27, 27), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (8, 8), (17, 17), (27, 27), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (8, 8), (17, 17), (27, 27), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (8, 8), (17, 17), (27, 27), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)], [(20, 20), (29, 29), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (21, 21), (22, 22), (8, 8), (17, 17), (27, 27), (13, 13), (18, 18), (4, 4), (5, 5), (14, 14), (23, 23), (0, 0), (9, 9), (1, 1), (24, 24), (10, 10), (19, 19), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbdc70>"": ""{\n    int n = diffs.length;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbd910>"": ""{\n    int n = diffs.length;\n    for(int i = 0; i < n; i++) {\n        Difference action = diffs[i];\n        int n1 = action.getFirstStart() + diffShifts[i][0];\n        int n2 = action.getFirstEnd() + diffShifts[i][0];\n        int n3 = action.getSecondStart() + diffShifts[i][1];\n        int n4 = action.getSecondEnd() + diffShifts[i][1];\n        //D.deb(\""Action: \""+action.getAction()+\"": (\""+n1+\"",\""+n2+\"",\""+n3+\"",\""+n4+\"")\""); // NOI18N\n        switch (action.getType()) {\n        case Difference.DELETE:\n            if (set) panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n            else panel.highlightRegion1(n1, n2, java.awt.Color.white);\n            break;\n        case Difference.ADD:\n            if (set) panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            else panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            break;\n        case Difference.CHANGE:\n            if (set) {\n                panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n                panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            } else {\n                panel.highlightRegion1(n1, n2, java.awt.Color.white);\n                panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            }\n            break;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbd940>"": ""{\n    int n = diffs.length;\n    for(int i = 0; i < n; i++) {\n        Difference action = diffs[i];\n        int n1 = action.getFirstStart() + diffShifts[i][0];\n        int n2 = action.getFirstEnd() + diffShifts[i][0];\n        int n3 = action.getSecondStart() + diffShifts[i][1];\n        int n4 = action.getSecondEnd() + diffShifts[i][1];\n        //D.deb(\""Action: \""+action.getAction()+\"": (\""+n1+\"",\""+n2+\"",\""+n3+\"",\""+n4+\"")\""); // NOI18N\n        switch (action.getType()) {\n        case Difference.DELETE:\n            if (set) panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n            else panel.highlightRegion1(n1, n2, java.awt.Color.white);\n            break;\n        case Difference.ADD:\n            if (set) panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            else panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            break;\n        case Difference.CHANGE:\n            if (set) {\n                panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n                panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            } else {\n                panel.highlightRegion1(n1, n2, java.awt.Color.white);\n                panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            }\n            break;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbdf70>"": ""{\n    int n = diffs.length;\n    for(int i = 0; i < n; i++) {\n        Difference action = diffs[i];\n        int n1 = action.getFirstStart() + diffShifts[i][0];\n        int n2 = action.getFirstEnd() + diffShifts[i][0];\n        int n3 = action.getSecondStart() + diffShifts[i][1];\n        int n4 = action.getSecondEnd() + diffShifts[i][1];\n        //D.deb(\""Action: \""+action.getAction()+\"": (\""+n1+\"",\""+n2+\"",\""+n3+\"",\""+n4+\"")\""); // NOI18N\n        switch (action.getType()) {\n        case Difference.DELETE:\n            if (set) panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n            else panel.highlightRegion1(n1, n2, java.awt.Color.white);\n            break;\n        case Difference.ADD:\n            if (set) panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            else panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            break;\n        case Difference.CHANGE:\n            if (set) {\n                panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n                panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            } else {\n                panel.highlightRegion1(n1, n2, java.awt.Color.white);\n                panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            }\n            break;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbd790>"": ""{\n    int n = diffs.length;\n    for(int i = 0; i < n; i++) {\n        Difference action = diffs[i];\n        int n1 = action.getFirstStart() + diffShifts[i][0];\n        int n2 = action.getFirstEnd() + diffShifts[i][0];\n        int n3 = action.getSecondStart() + diffShifts[i][1];\n        int n4 = action.getSecondEnd() + diffShifts[i][1];\n        //D.deb(\""Action: \""+action.getAction()+\"": (\""+n1+\"",\""+n2+\"",\""+n3+\"",\""+n4+\"")\""); // NOI18N\n        switch (action.getType()) {\n        case Difference.DELETE:\n            if (set) panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n            else panel.highlightRegion1(n1, n2, java.awt.Color.white);\n            break;\n        case Difference.ADD:\n            if (set) panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            else panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            break;\n        case Difference.CHANGE:\n            if (set) {\n                panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n                panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            } else {\n                panel.highlightRegion1(n1, n2, java.awt.Color.white);\n                panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            }\n            break;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbd1c0>"": ""{\n    int n = diffs.length;\n    for(int i = 0; i < n; i++) {\n        Difference action = diffs[i];\n        int n1 = action.getFirstStart() + diffShifts[i][0];\n        int n2 = action.getFirstEnd() + diffShifts[i][0];\n        int n3 = action.getSecondStart() + diffShifts[i][1];\n        int n4 = action.getSecondEnd() + diffShifts[i][1];\n        //D.deb(\""Action: \""+action.getAction()+\"": (\""+n1+\"",\""+n2+\"",\""+n3+\"",\""+n4+\"")\""); // NOI18N\n        switch (action.getType()) {\n        case Difference.DELETE:\n            if (set) panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n            else panel.highlightRegion1(n1, n2, java.awt.Color.white);\n            break;\n        case Difference.ADD:\n            if (set) panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            else panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            break;\n        case Difference.CHANGE:\n            if (set) {\n                panel.highlightRegion1(n1, n2, colorUnresolvedConflict);\n                panel.highlightRegion2(n3, n4, colorUnresolvedConflict);\n            } else {\n                panel.highlightRegion1(n1, n2, java.awt.Color.white);\n                panel.highlightRegion2(n3, n4, java.awt.Color.white);\n            }\n            break;\n        }\n    }\n}""}",2,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/diff/src/org/netbeans/modules/merge/builtin/visualizer/MergeControl.java,setDiffHighlight,185,8.0,29.0,[],[],"[[(215, 215), (186, 186), (185, 185)], [(205, 205), (214, 214), (196, 196), (215, 215), (192, 192), (201, 201), (210, 210), (211, 211), (188, 188), (197, 197), (206, 206), (207, 207), (193, 193), (202, 202), (212, 212), (198, 198), (203, 203), (189, 189), (190, 190), (199, 199), (208, 208), (185, 185), (194, 194), (186, 186), (209, 209), (195, 195), (204, 204), (213, 213), (191, 191), (200, 200)], [(205, 205), (214, 214), (196, 196), (215, 215), (192, 192), (201, 201), (210, 210), (211, 211), (188, 188), (197, 197), (206, 206), (207, 207), (193, 193), (202, 202), (212, 212), (198, 198), (203, 203), (189, 189), (190, 190), (199, 199), (208, 208), (185, 185), (194, 194), (186, 186), (209, 209), (195, 195), (204, 204), (213, 213), (191, 191), (200, 200)], [(205, 205), (214, 214), (196, 196), (215, 215), (192, 192), (201, 201), (210, 210), (211, 211), (188, 188), (197, 197), (206, 206), (207, 207), (193, 193), (202, 202), (212, 212), (198, 198), (203, 203), (189, 189), (190, 190), (199, 199), (208, 208), (185, 185), (194, 194), (186, 186), (209, 209), (195, 195), (204, 204), (213, 213), (191, 191), (200, 200)], [(205, 205), (214, 214), (196, 196), (215, 215), (192, 192), (201, 201), (210, 210), (211, 211), (188, 188), (197, 197), (206, 206), (207, 207), (193, 193), (202, 202), (212, 212), (198, 198), (203, 203), (189, 189), (190, 190), (199, 199), (208, 208), (185, 185), (194, 194), (186, 186), (209, 209), (195, 195), (204, 204), (213, 213), (191, 191), (200, 200)], [(205, 205), (214, 214), (196, 196), (215, 215), (192, 192), (201, 201), (210, 210), (211, 211), (188, 188), (197, 197), (206, 206), (207, 207), (193, 193), (202, 202), (212, 212), (198, 198), (203, 203), (189, 189), (190, 190), (199, 199), (208, 208), (185, 185), (194, 194), (186, 186), (209, 209), (195, 195), (204, 204), (213, 213), (191, 191), (200, 200)]]",
41,44,44,2,False,"[(1, 10), (19, 28), (5, 10)]","[(10, 10)]","[[(30, 30), (32, 32), (29, 29)], [(17, 17), (13, 13), (35, 35), (10, 10), (19, 19), (18, 18)], [(17, 17), (23, 23), (24, 24), (25, 25), (35, 35), (10, 10), (12, 12), (18, 18), (15, 15)], [(17, 17), (23, 23), (24, 24), (35, 35), (10, 10), (18, 18), (15, 15)], [(10, 10), (17, 17)], [(17, 17), (14, 14), (20, 20), (35, 35), (10, 10), (21, 21), (18, 18)], [(17, 17), (14, 14), (20, 20), (35, 35), (10, 10), (21, 21), (18, 18), (22, 22), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea820>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);"", ""<program_slicing.graph.statement.Statement object at 0x7f4acd069040>"": ""{\n  String[] result = inpMsg.split(\""\\\\s+\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea250>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nint exitValue = -1;\nProcess process = Runtime.getRuntime().exec(cmd);\ntry {\n  exitValue = process.waitFor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea490>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nString errMsg = null;\nBufferedReader err = null;\nProcess process = Runtime.getRuntime().exec(cmd);\ntry {\n  err = new BufferedReader(new InputStreamReader(\n                               process.getErrorStream()));\n  errMsg = err.readLine();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea1f0>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nBufferedReader err = null;\nProcess process = Runtime.getRuntime().exec(cmd);\ntry {\n  err = new BufferedReader(new InputStreamReader(\n                               process.getErrorStream()));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea130>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nProcess process = Runtime.getRuntime().exec(cmd);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea370>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nBufferedReader in = null;\nProcess process = Runtime.getRuntime().exec(cmd);\ntry {\n  in = new BufferedReader(new InputStreamReader(\n                              process.getInputStream()));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aeadf0>"": ""String[] cmd = getHardLinkCommand.linkCount(fileName);\nString inpMsg = null;\nBufferedReader in = null;\nProcess process = Runtime.getRuntime().exec(cmd);\ntry {\n  in = new BufferedReader(new InputStreamReader(\n                              process.getInputStream()));\n  inpMsg = in.readLine();\n}""}",0,0,1,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hadoop/hadoop-1.0.0/src/hadoop-1.0.0/src/core/org/apache/hadoop/fs/HardLink.java,getLinkCount,531,15.0,34.0,"[(532, 541), (550, 559), (536, 541)]","[(541, 541)]","[[(561, 561), (563, 563), (560, 560)], [(548, 548), (544, 544), (566, 566), (541, 541), (550, 550), (549, 549)], [(548, 548), (554, 554), (555, 555), (556, 556), (566, 566), (541, 541), (543, 543), (549, 549), (546, 546)], [(548, 548), (554, 554), (555, 555), (566, 566), (541, 541), (549, 549), (546, 546)], [(541, 541), (548, 548)], [(548, 548), (545, 545), (551, 551), (566, 566), (541, 541), (552, 552), (549, 549)], [(548, 548), (545, 545), (551, 551), (566, 566), (541, 541), (552, 552), (549, 549), (553, 553), (542, 542)]]","[(532, 538), (532, 540), (532, 541), (532, 542), (532, 543), (532, 544), (532, 545), (532, 546), (532, 548), (536, 542), (536, 543), (536, 544), (536, 545), (536, 546), (536, 548), (540, 546), (540, 548), (540, 574), (541, 548), (541, 574), (542, 548), (542, 574), (543, 574), (544, 574), (545, 574), (546, 574), (548, 574), (549, 574), (550, 556), (550, 559), (550, 565), (551, 559), (551, 565), (553, 559), (553, 565), (554, 565), (556, 565), (557, 565)]"
42,45,45,2,False,"[(6, 11)]",[],"[[(17, 17), (20, 20), (18, 18), (19, 19)], [(34, 34), (35, 35), (33, 33)], [(27, 27), (25, 25), (26, 26), (28, 28), (31, 31)], [(17, 17), (18, 18)], [(6, 6), (7, 7), (11, 11)], [(45, 45), (46, 46)], [(30, 30), (23, 23), (27, 27), (25, 25), (26, 26), (28, 28), (21, 21), (31, 31), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbda00>"": ""NumberType factorType = NumberType.getNumberType(Types.SQL_DECIMAL,\n    40, maxFractionPrecision);\nBigDecimal factor = (BigDecimal) factorType.convertToDefaultType(null,\n    b);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aeafd0>"": ""BigDecimal result = divide\n                    ? (BigDecimal) factorType.divide(units, factor)\n                    : (BigDecimal) factorType.multiply(units, factor);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea4f0>"": "" else {\n    long value =\n        ((IntervalSecondData) a).units * DTIType.nanoScaleFactors[0]\n        + ((IntervalSecondData) a).nanos;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4acdcded00>"": ""NumberType factorType = NumberType.getNumberType(Types.SQL_DECIMAL,\n    40, maxFractionPrecision);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8abe580>"": ""{\n    Object temp = a;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36fa0>"": ""int nanos = (int) NumberType.scaledDecimal(result,\n    DTIType.maxFractionPrecision);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac8dbdfd0>"": ""BigDecimal units;\nif (isYearMonth) {\n    units = BigDecimal.valueOf(((IntervalMonthData) a).units);\n} else {\n    long value =\n        ((IntervalSecondData) a).units * DTIType.nanoScaleFactors[0]\n        + ((IntervalSecondData) a).nanos;\n    units = BigDecimal.valueOf(value, 9);\n}""}",0,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/hsqldb/hsqldb-2.0.0/src/hsqldb-2.0.0/hsqldb/src/org/hsqldb/types/IntervalType.java,multiplyOrDivide,871,12.0,24.0,"[(877, 882)]",[],"[[(888, 888), (891, 891), (889, 889), (890, 890)], [(905, 905), (906, 906), (904, 904)], [(898, 898), (896, 896), (897, 897), (899, 899), (902, 902)], [(888, 888), (889, 889)], [(877, 877), (878, 878), (882, 882)], [(916, 916), (917, 917)], [(901, 901), (894, 894), (898, 898), (896, 896), (897, 897), (899, 899), (892, 892), (902, 902), (895, 895)]]","[(873, 882), (873, 886), (873, 889), (873, 891), (873, 892), (873, 902), (873, 906), (873, 910), (877, 886), (877, 889), (877, 891), (877, 892), (877, 902), (877, 906), (877, 910), (877, 914), (884, 891), (884, 892), (884, 902), (884, 906), (884, 910), (884, 914), (884, 917), (884, 919), (888, 902), (888, 906), (888, 910), (888, 914), (888, 917), (888, 919), (890, 902), (890, 906), (890, 910), (890, 914), (890, 917), (890, 919), (892, 902), (892, 906), (892, 910), (892, 914), (892, 917), (892, 919), (894, 902), (894, 906), (894, 910), (894, 914), (894, 917), (894, 919), (904, 910), (904, 914), (904, 917), (904, 919), (908, 914), (908, 917), (908, 919), (912, 919)]"
43,46,46,2,False,[],"[(32, 32), (25, 25)]","[[(43, 43), (36, 36), (35, 35), (39, 39), (47, 47), (32, 32), (40, 40), (37, 37), (41, 41), (34, 34), (31, 31), (33, 33)], [(34, 34), (47, 47), (33, 33)], [(1, 1), (49, 49), (0, 0)], [(4, 4), (49, 49), (0, 0)], [(4, 4), (8, 8), (0, 0), (9, 9), (25, 25), (20, 20), (13, 13), (10, 10), (19, 19), (3, 3), (12, 12), (18, 18), (28, 28), (6, 6), (49, 49), (11, 11), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36400>"": ""boolean writtenSep = false;\nfor (Iterator i = logicalLines.subList(skipLines, totalLines).iterator();\n     i.hasNext(); ) {\n    LogicalLine line = (LogicalLine) i.next();\n    if (line instanceof Pair) {\n        if (((Pair)line).isNew()) {\n            if (!writtenSep) {\n                writtenSep = true;\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36c40>"": ""{\n    LogicalLine line = (LogicalLine) i.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9adeca0>"": ""java.text.ParseException pe"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11ee0>"": ""{\n    OutputStreamWriter osw = new OutputStreamWriter(out, ResourceUtils.ISO_8859_1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11d00>"": ""{\n    int totalLines = logicalLines.size();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36d30>"": ""Iterator i = logicalLines.subList(skipLines, totalLines).iterator();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11d60>"": ""{\n    int skipLines = 0;\n    int totalLines = logicalLines.size();\n    if (header != null) {\n        if (totalLines > 0\n            && logicalLines.get(0) instanceof Comment\n            && header.equals(logicalLines.get(0).toString().substring(1))) {\n            skipLines = 1;\n        }\n    }\n    if (totalLines > skipLines\n        && logicalLines.get(skipLines) instanceof Comment) {\n        try {\n            skipLines++;\n        }\n    }\n}""}",2,0,1,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/libsrc/org/apache/tools/ant/util/LayoutPreservingProperties.java,store,254,13.0,26.0,[],"[(286, 286), (279, 279)]","[[(297, 297), (290, 290), (289, 289), (293, 293), (301, 301), (286, 286), (294, 294), (291, 291), (295, 295), (288, 288), (285, 285), (287, 287)], [(288, 288), (301, 301), (287, 287)], [(255, 255), (303, 303), (254, 254)], [(258, 258), (303, 303), (254, 254)], [(258, 258), (262, 262), (254, 254), (263, 263), (279, 279), (274, 274), (267, 267), (264, 264), (273, 273), (257, 257), (266, 266), (272, 272), (282, 282), (260, 260), (303, 303), (265, 265), (278, 278)]]","[(255, 267), (255, 269), (255, 270), (255, 271), (255, 282), (255, 283), (255, 285), (257, 267), (257, 269), (257, 270), (257, 271), (257, 282), (257, 283), (257, 285), (258, 267), (258, 269), (258, 270), (258, 271), (258, 282), (258, 283), (258, 285), (260, 267), (260, 269), (260, 270), (260, 271), (260, 282), (260, 283), (260, 285), (269, 282), (269, 283), (269, 285), (269, 301), (269, 302), (270, 282), (270, 283), (270, 285), (270, 301), (270, 302), (271, 282), (271, 283), (271, 285), (271, 301), (271, 302), (272, 282), (272, 283), (272, 285), (272, 301), (272, 302), (274, 281), (283, 301), (283, 302), (285, 301), (285, 302), (286, 301), (286, 302), (288, 300), (289, 300), (290, 296)]"
44,47,47,1,False,[],[],"[[(1, 1), (31, 31), (0, 0)], [(4, 4), (31, 31), (0, 0)], [(2, 2), (31, 31), (0, 0)], [(3, 3), (31, 31), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade400>"": ""{\r\n    IdentityMap map = new IdentityMap();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9adeeb0>"": ""{\r\n    Object key3 = new Integer(123);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade340>"": ""{\r\n    Object key1 = new Integer(123);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9ade160>"": ""{\r\n    Object key2 = new Integer(123);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/castor/castor-1.3.1/src/castor-1.3.1/src/test/java/org/castor/util/TestIdentityMap.java,testRemove,142,1.0,27.0,[],[],"[[(143, 143), (173, 173), (142, 142)], [(146, 146), (173, 173), (142, 142)], [(144, 144), (173, 173), (142, 142)], [(145, 145), (173, 173), (142, 142)]]","[(143, 149), (143, 150), (143, 151), (143, 152), (143, 153), (143, 154), (143, 156), (143, 157), (143, 158), (143, 159), (143, 160), (143, 162), (143, 163), (143, 164), (143, 165), (143, 166), (144, 150), (144, 151), (144, 152), (144, 153), (144, 154), (144, 156), (144, 157), (144, 158), (144, 159), (144, 160), (144, 162), (144, 163), (144, 164), (144, 165), (144, 166), (145, 151), (145, 152), (145, 153), (145, 154), (145, 156), (145, 157), (145, 158), (145, 159), (145, 160), (145, 162), (145, 163), (145, 164), (145, 165), (145, 166), (145, 168), (146, 152), (146, 153), (146, 154), (146, 156), (146, 157), (146, 158), (146, 159), (146, 160), (146, 162), (146, 163), (146, 164), (146, 165), (146, 166), (146, 168), (146, 169), (148, 154), (148, 156), (148, 157), (148, 158), (148, 159), (148, 160), (148, 162), (148, 163), (148, 164), (148, 165), (148, 166), (148, 168), (148, 169), (148, 170), (148, 171), (149, 156), (149, 157), (149, 158), (149, 159), (149, 160), (149, 162), (149, 163), (149, 164), (149, 165), (149, 166), (149, 168), (149, 169), (149, 170), (149, 171), (149, 172), (150, 156), (150, 157), (150, 158), (150, 159), (150, 160), (150, 162), (150, 163), (150, 164), (150, 165), (150, 166), (150, 168), (150, 169), (150, 170), (150, 171), (150, 172), (151, 157), (151, 158), (151, 159), (151, 160), (151, 162), (151, 163), (151, 164), (151, 165), (151, 166), (151, 168), (151, 169), (151, 170), (151, 171), (151, 172), (152, 158), (152, 159), (152, 160), (152, 162), (152, 163), (152, 164), (152, 165), (152, 166), (152, 168), (152, 169), (152, 170), (152, 171), (152, 172), (153, 159), (153, 160), (153, 162), (153, 163), (153, 164), (153, 165), (153, 166), (153, 168), (153, 169), (153, 170), (153, 171), (153, 172), (154, 160), (154, 162), (154, 163), (154, 164), (154, 165), (154, 166), (154, 168), (154, 169), (154, 170), (154, 171), (154, 172), (156, 162), (156, 163), (156, 164), (156, 165), (156, 166), (156, 168), (156, 169), (156, 170), (156, 171), (156, 172), (157, 163), (157, 164), (157, 165), (157, 166), (157, 168), (157, 169), (157, 170), (157, 171), (157, 172), (158, 164), (158, 165), (158, 166), (158, 168), (158, 169), (158, 170), (158, 171), (158, 172), (159, 165), (159, 166), (159, 168), (159, 169), (159, 170), (159, 171), (159, 172), (160, 166), (160, 168), (160, 169), (160, 170), (160, 171), (160, 172), (162, 168), (162, 169), (162, 170), (162, 171), (162, 172), (163, 169), (163, 170), (163, 171), (163, 172), (164, 170), (164, 171), (164, 172), (165, 171), (165, 172), (166, 172)]"
45,48,48,2,False,[],[],"[[(12, 12), (14, 14), (21, 21), (13, 13)], [(8, 8), (23, 23), (10, 10)], [(4, 4), (34, 34), (3, 3), (2, 2)], [(8, 8), (23, 23), (9, 9)], [(6, 6), (7, 7), (24, 24)], [(12, 12), (21, 21), (13, 13)], [(34, 34), (3, 3), (2, 2)], [(25, 25), (31, 31), (26, 26)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36220>"": ""{\nEntry<String, String> entry = iterator.next();\nString key = entry.getKey();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36c40>"": ""{\nIterator<Entry<String, String>> iterator = map.entrySet().iterator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac77fc070>"": ""{\nIVMInstall2 vm = (IVMInstall2) fVMInstance;\nString javaVersion = vm.getJavaVersion();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9aea310>"": ""{\nString[] env2 = new String[map.size()];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac77f8f40>"": ""{\nMap<String, String> map = DebugPlugin.getDefault().getLaunchManager().getNativeEnvironmentCasePreserved();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac9a36760>"": ""{\nEntry<String, String> entry = iterator.next();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac77f8fa0>"": ""{\nIVMInstall2 vm = (IVMInstall2) fVMInstance;\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11bb0>"": ""i++) {\n\tString string = env[i];\n}""}",2,1,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/launching/StandardVMRunner.java,prependJREPath,535,10.0,28.0,[],[],"[[(547, 547), (549, 549), (556, 556), (548, 548)], [(543, 543), (558, 558), (545, 545)], [(539, 539), (569, 569), (538, 538), (537, 537)], [(543, 543), (558, 558), (544, 544)], [(541, 541), (542, 542), (559, 559)], [(547, 547), (556, 556), (548, 548)], [(569, 569), (538, 538), (537, 537)], [(560, 560), (566, 566), (561, 561)]]","[(540, 568), (541, 567), (542, 558), (543, 558), (544, 556), (544, 557), (545, 556), (545, 557), (546, 556), (546, 557), (547, 556), (547, 557), (548, 554), (548, 555), (549, 555), (560, 566)]"
46,49,49,1,False,"[(6, 19), (20, 37), (26, 33)]",[],"[[(28, 28), (32, 32), (30, 30)], [(28, 28), (32, 32), (29, 29)], [(1, 1), (38, 38), (0, 0)], [(6, 6), (38, 38), (0, 0)], [(38, 38), (0, 0)], [(28, 28), (32, 32), (30, 30)], [(28, 28), (32, 32), (29, 29)], [(6, 6), (38, 38), (7, 7), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11d00>"": ""{\n\tint i = producer.getPriority();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f11370>"": ""{\nboolean b = session.getTransacted();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cba30>"": ""{\n\tJmsTemplate102 template = createTemplate();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb460>"": ""{\n\tMockControl queueSenderControl = MockControl.createControl(QueueSender.class);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cba90>"": ""public void testQueueProducerCallback() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cb1c0>"": ""{\nMockControl queueSenderControl = MockControl.createControl(QueueSender.class);\nQueueSender mockQueueSender = (QueueSender) queueSenderControl.getMock();\n""}",0,0,0,0,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/springframework/springframework-3.0.5/src/spring-framework-3.0.5.RELEASE/projects/org.springframework.jms/src/test/java/org/springframework/jms/core/JmsTemplate102Tests.java,testQueueProducerCallback,341,1.0,23.0,"[(347, 360), (361, 378), (367, 374)]",[],"[[(369, 369), (373, 373), (371, 371)], [(369, 369), (373, 373), (370, 370)], [(342, 342), (379, 379), (341, 341)], [(347, 347), (379, 379), (341, 341)], [(379, 379), (341, 341)], [(369, 369), (373, 373), (371, 371)], [(369, 369), (373, 373), (370, 370)], [(347, 347), (379, 379), (348, 348), (341, 341)]]","[(342, 348), (342, 350), (342, 351), (342, 353), (342, 354), (342, 356), (342, 357), (342, 358), (342, 359), (342, 360), (342, 361), (342, 363), (342, 364), (342, 365), (343, 350), (343, 351), (343, 353), (343, 354), (343, 356), (343, 357), (343, 358), (343, 359), (343, 360), (343, 361), (343, 363), (343, 364), (343, 365), (344, 350), (344, 351), (344, 353), (344, 354), (344, 356), (344, 357), (344, 358), (344, 359), (344, 360), (344, 361), (344, 363), (344, 364), (344, 365), (345, 351), (345, 353), (345, 354), (345, 356), (345, 357), (345, 358), (345, 359), (345, 360), (345, 361), (345, 363), (345, 364), (345, 365), (345, 374), (347, 353), (347, 354), (347, 356), (347, 357), (347, 358), (347, 359), (347, 360), (347, 361), (347, 363), (347, 364), (347, 365), (347, 374), (347, 376), (348, 354), (348, 356), (348, 357), (348, 358), (348, 359), (348, 360), (348, 361), (348, 363), (348, 364), (348, 365), (348, 374), (348, 376), (348, 377), (350, 356), (350, 357), (350, 358), (350, 359), (350, 360), (350, 361), (350, 363), (350, 364), (350, 365), (350, 374), (350, 376), (350, 377), (350, 378), (351, 357), (351, 358), (351, 359), (351, 360), (351, 361), (351, 363), (351, 364), (351, 365), (351, 374), (351, 376), (351, 377), (351, 378), (353, 359), (353, 360), (353, 361), (353, 363), (353, 364), (353, 365), (353, 374), (353, 376), (353, 377), (353, 378), (354, 360), (354, 361), (354, 363), (354, 364), (354, 365), (354, 374), (354, 376), (354, 377), (354, 378), (356, 363), (356, 364), (356, 365), (356, 374), (356, 376), (356, 377), (356, 378), (357, 363), (357, 364), (357, 365), (357, 374), (357, 376), (357, 377), (357, 378), (358, 364), (358, 365), (358, 374), (358, 376), (358, 377), (358, 378), (359, 365), (359, 374), (359, 376), (359, 377), (359, 378), (360, 374), (360, 376), (360, 377), (360, 378), (361, 374), (361, 376), (361, 377), (361, 378), (363, 374), (363, 376), (363, 377), (363, 378), (364, 374), (364, 376), (364, 377), (364, 378), (365, 374), (365, 376), (365, 377), (365, 378), (367, 374), (367, 376), (367, 377), (367, 378)]"
47,50,50,2,False,"[(43, 49)]",[],"[[(52, 52), (2, 2), (0, 0)], [(9, 9), (0, 0), (52, 52), (10, 10), (2, 2)], [(6, 6), (52, 52), (0, 0)], [(30, 30), (9, 9), (0, 0), (52, 52), (29, 29), (10, 10), (28, 28), (2, 2), (11, 11)], [(17, 17), (5, 5), (16, 16), (9, 9), (0, 0), (52, 52), (25, 25), (20, 20), (13, 13), (10, 10), (19, 19), (12, 12), (18, 18), (2, 2), (11, 11)], [(52, 52), (29, 29), (38, 38), (39, 39), (2, 2), (11, 11), (30, 30), (25, 25), (35, 35), (12, 12), (31, 31), (40, 40), (36, 36), (13, 13), (32, 32), (4, 4), (9, 9), (0, 0), (10, 10), (28, 28), (37, 37)], [(23, 23), (16, 16), (9, 9), (0, 0), (52, 52), (25, 25), (20, 20), (13, 13), (10, 10), (3, 3), (12, 12), (21, 21), (2, 2), (22, 22), (11, 11), (24, 24)], [(28, 28), (29, 29)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98c70>"": ""{\nfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98280>"": ""{\nfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\nfinal IConfigurationElement[] commandsExtensionPoint = registry\n\t\t.getConfigurationElementsFor(EXTENSION_COMMANDS);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d984c0>"": ""{\nfinal IConfigurationElement[][] indexedConfigurationElements = new IConfigurationElement[3][];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac72cbf40>"": ""{\n\tfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\n\tfinal IConfigurationElement[] commandsExtensionPoint = registry\n\t\t\t.getConfigurationElementsFor(EXTENSION_COMMANDS);\n\tfor (int i = 0; i < commandsExtensionPoint.length; i++) {\n\tfinal IConfigurationElement[] handlersExtensionPoint = registry\n\t\t\t.getConfigurationElementsFor(EXTENSION_HANDLERS);\n\tfor (int i = 0; i < handlersExtensionPoint.length; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d98970>"": ""{\nfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\nint handlerSubmissionCount = 0;\nfinal IConfigurationElement[] commandsExtensionPoint = registry\n\t\t.getConfigurationElementsFor(EXTENSION_COMMANDS);\nfor (int i = 0; i < commandsExtensionPoint.length; i++) {\n\tfinal IConfigurationElement configurationElement = commandsExtensionPoint[i];\n\tfinal String name = configurationElement.getName();\n\tif (TAG_HANDLER_SUBMISSION.equals(name)) {\n\t\taddElementToIndexedArray(configurationElement,\n\t\t\t\tindexedConfigurationElements,\n\t\t\t\tINDEX_HANDLER_SUBMISSIONS, handlerSubmissionCount++);\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d989a0>"": ""{\n\tfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\n\tint handlerDefinitionCount = 0;\n\tfinal IConfigurationElement[] commandsExtensionPoint = registry\n\t\t\t.getConfigurationElementsFor(EXTENSION_COMMANDS);\n\tfor (int i = 0; i < commandsExtensionPoint.length; i++) {\n\t\tfinal IConfigurationElement configurationElement = commandsExtensionPoint[i];\n\t\tfinal String name = configurationElement.getName();\n\t}\n\tfinal IConfigurationElement[] handlersExtensionPoint = registry\n\t\t\t.getConfigurationElementsFor(EXTENSION_HANDLERS);\n\tfor (int i = 0; i < handlersExtensionPoint.length; i++) {\n\t\tfinal IConfigurationElement configurationElement = handlersExtensionPoint[i];\n\t\tfinal String name = configurationElement.getName();\n\t\tif (TAG_HANDLER.equals(name)) {\n\t\t\taddElementToIndexedArray(configurationElement,\n\t\t\t\t\tindexedConfigurationElements,\n\t\t\t\t\tINDEX_HANDLER_DEFINITIONS, handlerDefinitionCount++);\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac6d985b0>"": ""{\n\tfinal IExtensionRegistry registry = Platform.getExtensionRegistry();\n\tint commandDefinitionCount = 0;\n\tfinal IConfigurationElement[] commandsExtensionPoint = registry\n\t\t\t.getConfigurationElementsFor(EXTENSION_COMMANDS);\n\tfor (int i = 0; i < commandsExtensionPoint.length; i++) {\n\t\tfinal IConfigurationElement configurationElement = commandsExtensionPoint[i];\n\t\tfinal String name = configurationElement.getName();\n\t\tif (TAG_HANDLER_SUBMISSION.equals(name)) {\n\t\t} else if (TAG_COMMAND.equals(name)) {\n\t\t\taddElementToIndexedArray(configurationElement,\n\t\t\t\t\tindexedConfigurationElements,\n\t\t\t\t\tINDEX_COMMAND_DEFINITIONS, commandDefinitionCount++);\n\t\t}\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac7f117f0>"": ""final IConfigurationElement[] handlersExtensionPoint = registry\n\t\t.getConfigurationElementsFor(EXTENSION_HANDLERS);""}",4,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/ui/internal/handlers/HandlerPersistence.java,reRead,170,6.0,25.0,"[(213, 219)]",[],"[[(222, 222), (172, 172), (170, 170)], [(179, 179), (170, 170), (222, 222), (180, 180), (172, 172)], [(176, 176), (222, 222), (170, 170)], [(200, 200), (179, 179), (170, 170), (222, 222), (199, 199), (180, 180), (198, 198), (172, 172), (181, 181)], [(187, 187), (175, 175), (186, 186), (179, 179), (170, 170), (222, 222), (195, 195), (190, 190), (183, 183), (180, 180), (189, 189), (182, 182), (188, 188), (172, 172), (181, 181)], [(222, 222), (199, 199), (208, 208), (209, 209), (172, 172), (181, 181), (200, 200), (195, 195), (205, 205), (182, 182), (201, 201), (210, 210), (206, 206), (183, 183), (202, 202), (174, 174), (179, 179), (170, 170), (180, 180), (198, 198), (207, 207)], [(193, 193), (186, 186), (179, 179), (170, 170), (222, 222), (195, 195), (190, 190), (183, 183), (180, 180), (173, 173), (182, 182), (191, 191), (172, 172), (192, 192), (181, 181), (194, 194)], [(198, 198), (199, 199)]]","[(171, 178), (171, 180), (171, 195), (171, 197), (171, 199), (171, 210), (172, 178), (172, 180), (172, 195), (172, 197), (172, 199), (172, 210), (172, 212), (173, 180), (173, 195), (173, 197), (173, 199), (173, 210), (173, 212), (174, 180), (174, 195), (174, 197), (174, 199), (174, 210), (174, 212), (175, 195), (175, 197), (175, 199), (175, 210), (175, 212), (175, 215), (176, 195), (176, 197), (176, 199), (176, 210), (176, 212), (176, 215), (178, 195), (178, 197), (178, 199), (178, 210), (178, 212), (178, 215), (178, 218), (179, 195), (179, 197), (179, 199), (179, 210), (179, 212), (179, 215), (179, 218), (181, 195), (181, 197), (181, 199), (181, 210), (181, 212), (181, 215), (181, 218), (181, 221), (182, 194), (183, 194), (185, 194), (186, 194), (197, 210), (197, 212), (197, 215), (197, 218), (197, 221), (198, 210), (198, 212), (198, 215), (198, 218), (198, 221), (200, 210), (200, 212), (200, 215), (200, 218), (200, 221), (201, 209), (202, 209), (212, 218), (212, 221), (213, 221)]"
48,51,51,1,False,[],[],"[[(59, 59), (0, 0)], [(4, 4), (5, 5), (16, 16), (0, 0), (1, 1), (3, 3), (59, 59), (56, 56)], [(4, 4), (5, 5), (0, 0), (1, 1), (3, 3), (59, 59), (56, 56)], [(4, 4), (0, 0), (1, 1), (3, 3), (59, 59), (56, 56)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac5f24d00>"": ""public void testStepOut () throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f84f10>"": ""{\n    try {\n        Utils.BreakPositions bp = Utils.getBreakPositions(sourceRoot + \n                \""org/netbeans/api/debugger/jpda/testapps/StepApp.java\"");\n        LineBreakpoint lb = bp.getLineBreakpoints().get(0);\n        int line = lb.getLineNumber();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f84640>"": ""{\n    try {\n        Utils.BreakPositions bp = Utils.getBreakPositions(sourceRoot + \n                \""org/netbeans/api/debugger/jpda/testapps/StepApp.java\"");\n        LineBreakpoint lb = bp.getLineBreakpoints().get(0);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f24940>"": ""{\n    try {\n        Utils.BreakPositions bp = Utils.getBreakPositions(sourceRoot + \n                \""org/netbeans/api/debugger/jpda/testapps/StepApp.java\"");\n    }\n}""}",0,0,1,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/debugger.jpda/test/unit/src/org/netbeans/api/debugger/jpda/JPDAStepTest.java,testStepOut,202,1.0,21.0,[],[],"[[(261, 261), (202, 202)], [(206, 206), (207, 207), (218, 218), (202, 202), (203, 203), (205, 205), (261, 261), (258, 258)], [(206, 206), (207, 207), (202, 202), (203, 203), (205, 205), (261, 261), (258, 258)], [(206, 206), (202, 202), (203, 203), (205, 205), (261, 261), (258, 258)]]","[(204, 210), (204, 211), (204, 212), (204, 217), (204, 218), (204, 223), (204, 228), (204, 233), (204, 238), (204, 243), (204, 248), (205, 211), (205, 212), (205, 217), (205, 218), (205, 223), (205, 228), (205, 233), (205, 238), (205, 243), (205, 248), (207, 217), (207, 218), (207, 223), (207, 228), (207, 233), (207, 238), (207, 243), (207, 248), (207, 253), (208, 217), (208, 218), (208, 223), (208, 228), (208, 233), (208, 238), (208, 243), (208, 248), (208, 253), (209, 217), (209, 218), (209, 223), (209, 228), (209, 233), (209, 238), (209, 243), (209, 248), (209, 253), (209, 255), (211, 217), (211, 218), (211, 223), (211, 228), (211, 233), (211, 238), (211, 243), (211, 248), (211, 253), (211, 255), (211, 256), (211, 257), (212, 218), (212, 223), (212, 228), (212, 233), (212, 238), (212, 243), (212, 248), (212, 253), (212, 255), (212, 256), (212, 257), (213, 223), (213, 228), (213, 233), (213, 238), (213, 243), (213, 248), (213, 253), (213, 255), (213, 256), (213, 257), (218, 228), (218, 233), (218, 238), (218, 243), (218, 248), (218, 253), (218, 255), (218, 256), (218, 257), (219, 228), (219, 233), (219, 238), (219, 243), (219, 248), (219, 253), (219, 255), (219, 256), (219, 257), (224, 233), (224, 238), (224, 243), (224, 248), (224, 253), (224, 255), (224, 256), (224, 257), (229, 238), (229, 243), (229, 248), (229, 253), (229, 255), (229, 256), (229, 257), (234, 243), (234, 248), (234, 253), (234, 255), (234, 256), (234, 257), (239, 248), (239, 253), (239, 255), (239, 256), (239, 257), (244, 253), (244, 255), (244, 256), (244, 257), (249, 255), (249, 256), (249, 257)]"
49,52,52,2,False,"[(19, 28), (9, 17)]",[],"[[(1, 1), (29, 29), (0, 0)], [(2, 2), (29, 29), (0, 0)], [(17, 17), (12, 12), (13, 13)], [(20, 20), (29, 29), (2, 2), (11, 11), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (12, 12), (22, 22), (8, 8), (17, 17), (13, 13), (18, 18), (5, 5), (14, 14), (0, 0), (9, 9), (24, 24), (10, 10), (28, 28), (6, 6), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac5e93490>"": ""{\n    int lineNumber = getBreakpoint().getLineNumber();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5e93910>"": ""{\nString bppath = getBreakpoint().getPath();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5f24910>"": "" else {\nint pos = lastPath.lastIndexOf('/');\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5e936a0>"": ""{\nString bppath = getBreakpoint().getPath();\nString path = null;\nif (lastPath == null && bppath.indexOf(' ') == -1) {\n    path = debugger.getPathMap().getRemotePath(bppath,true);\n} else if (lastPath == null) {\n    path = debugger.getBestPath(bppath);\n} else if (lastPath.length() > 0) {\n    if (lastPath.equals(bppath)) {\n\tpath = debugger.getBestPath(bppath);\n    } else {\n\tint pos = lastPath.lastIndexOf('/');\n\tif (pos >= 0) {\n\t    path = lastPath.substring(pos + 1);\n\t}\n    }\n}\nif (path == null) {\n} else {\n           if (debugger.isCygwin()) {\n               path = WindowsSupport.getInstance().convertToCygwinPath(path);\n           }\n}\n   }""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.debugger.gdb/src/org/netbeans/modules/cnd/debugger/gdb/breakpoints/LineBreakpointImpl.java,getBreakpointCommand,67,9.0,24.0,"[(86, 95), (76, 84)]",[],"[[(68, 68), (96, 96), (67, 67)], [(69, 69), (96, 96), (67, 67)], [(84, 84), (79, 79), (80, 80)], [(87, 87), (96, 96), (69, 69), (78, 78), (74, 74), (83, 83), (92, 92), (93, 93), (70, 70), (79, 79), (89, 89), (75, 75), (84, 84), (80, 80), (85, 85), (72, 72), (81, 81), (67, 67), (76, 76), (91, 91), (77, 77), (95, 95), (73, 73), (82, 82)]]","[(68, 85), (68, 86), (69, 85), (69, 86), (70, 85), (70, 86), (72, 85), (72, 86), (74, 85), (74, 85), (76, 85), (76, 85), (76, 85), (77, 84), (86, 95), (87, 95)]"
50,53,53,2,False,"[(20, 26)]",[],"[[(2, 2), (55, 55), (0, 0)], [(1, 1), (55, 55), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac55dcc10>"": ""{\r\n    for(int type = 0; type < BombType.B_NUM; type++) {\r\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dce20>"": ""{\r\n    int loc = LOC_NOSE;\n}""}",6,0,5,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/megamek/megamek-0.35.18/src/src/megamek/common/Aero.java,applyBombs,2740,20.0,25.0,"[(2760, 2766)]",[],"[[(2742, 2742), (2795, 2795), (2740, 2740)], [(2741, 2741), (2795, 2795), (2740, 2740)]]","[(2741, 2768), (2741, 2769), (2741, 2770), (2741, 2777), (2742, 2768), (2742, 2769), (2742, 2770), (2742, 2777), (2743, 2767), (2769, 2777), (2769, 2791), (2769, 2793), (2769, 2794), (2770, 2777), (2770, 2791), (2770, 2793), (2770, 2794), (2771, 2777), (2771, 2791), (2771, 2793), (2771, 2794), (2778, 2791), (2778, 2793), (2778, 2794), (2779, 2790), (2784, 2790)]"
51,54,54,1,False,"[(16, 34), (16, 24), (1, 8), (3, 8), (26, 34), (19, 24)]",[],"[[(6, 6), (3, 3), (35, 35), (0, 0)], [(17, 17), (16, 16), (0, 0), (20, 20), (26, 26), (35, 35), (19, 19), (21, 21), (31, 31)], [(14, 14), (35, 35), (0, 0)], [(17, 17), (16, 16), (0, 0), (20, 20), (35, 35), (19, 19)], [(17, 17), (16, 16), (0, 0), (20, 20), (35, 35), (19, 19), (21, 21)], [(1, 1), (35, 35), (0, 0)], [(3, 3), (35, 35), (0, 0)], [(19, 19), (35, 35), (0, 0)], [(17, 17), (23, 23), (16, 16), (0, 0), (20, 20), (35, 35), (19, 19), (21, 21)], [(17, 17), (16, 16), (35, 35), (0, 0)], [(35, 35), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac55dca00>"": ""{\nTestBean target = new TestBean();\nBeanPropertyBindingResult errors = new BeanPropertyBindingResult(target, COMMAND_NAME);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57e8670>"": ""{\nString output = getOutput();\noutput = \""<doc>\"" + output + \""</doc>\"";\nSAXReader reader = new SAXReader();\nDocument document = reader.read(new StringReader(output));\nElement rootElement = document.getRootElement();\nElement element = (Element) rootElement.selectSingleNode(\""option[text() = '12.34f']\"");\nelement = (Element) rootElement.selectSingleNode(\""option[text() = '12.35f']\"");\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3280>"": ""{\n\tint result = this.tag.doStartTag();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57928b0>"": ""{\nString output = getOutput();\noutput = \""<doc>\"" + output + \""</doc>\"";\nSAXReader reader = new SAXReader();\nDocument document = reader.read(new StringReader(output));\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5792ac0>"": ""{\nString output = getOutput();\noutput = \""<doc>\"" + output + \""</doc>\"";\nSAXReader reader = new SAXReader();\nDocument document = reader.read(new StringReader(output));\nElement rootElement = document.getRootElement();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dcd00>"": ""{\n\tPropertyEditor propertyEditor = new SimpleFloatEditor();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dcb50>"": ""{\n\tTestBean target = new TestBean();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5792580>"": ""{\nSAXReader reader = new SAXReader();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5792d90>"": ""{\nString output = getOutput();\noutput = \""<doc>\"" + output + \""</doc>\"";\nSAXReader reader = new SAXReader();\nDocument document = reader.read(new StringReader(output));\nElement rootElement = document.getRootElement();\nList children = rootElement.elements();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e39a0>"": ""{\nString output = getOutput();\noutput = \""<doc>\"" + output + \""</doc>\"";\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5792dc0>"": ""public void testWithCollectionAndCustomEditor() throws Exception {\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/springframework/springframework-3.0.5/src/spring-framework-3.0.5.RELEASE/projects/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/OptionsTagTests.java,testWithCollectionAndCustomEditor,139,1.0,26.0,"[(155, 173), (155, 163), (140, 147), (142, 147), (165, 173), (158, 163)]",[],"[[(145, 145), (142, 142), (174, 174), (139, 139)], [(156, 156), (155, 155), (139, 139), (159, 159), (165, 165), (174, 174), (158, 158), (160, 160), (170, 170)], [(153, 153), (174, 174), (139, 139)], [(156, 156), (155, 155), (139, 139), (159, 159), (174, 174), (158, 158)], [(156, 156), (155, 155), (139, 139), (159, 159), (174, 174), (158, 158), (160, 160)], [(140, 140), (174, 174), (139, 139)], [(142, 142), (174, 174), (139, 139)], [(158, 158), (174, 174), (139, 139)], [(156, 156), (162, 162), (155, 155), (139, 139), (159, 159), (174, 174), (158, 158), (160, 160)], [(156, 156), (155, 155), (174, 174), (139, 139)], [(174, 174), (139, 139)]]","[(140, 146), (140, 147), (140, 150), (140, 152), (140, 153), (140, 154), (140, 155), (140, 156), (140, 158), (140, 159), (140, 160), (140, 162), (140, 163), (140, 165), (140, 166), (140, 167), (142, 150), (142, 152), (142, 153), (142, 154), (142, 155), (142, 156), (142, 158), (142, 159), (142, 160), (142, 162), (142, 163), (142, 165), (142, 166), (142, 167), (142, 168), (143, 150), (143, 152), (143, 153), (143, 154), (143, 155), (143, 156), (143, 158), (143, 159), (143, 160), (143, 162), (143, 163), (143, 165), (143, 166), (143, 167), (143, 168), (143, 170), (145, 152), (145, 153), (145, 154), (145, 155), (145, 156), (145, 158), (145, 159), (145, 160), (145, 162), (145, 163), (145, 165), (145, 166), (145, 167), (145, 168), (145, 170), (145, 171), (145, 172), (146, 152), (146, 153), (146, 154), (146, 155), (146, 156), (146, 158), (146, 159), (146, 160), (146, 162), (146, 163), (146, 165), (146, 166), (146, 167), (146, 168), (146, 170), (146, 171), (146, 172), (146, 173), (147, 153), (147, 154), (147, 155), (147, 156), (147, 158), (147, 159), (147, 160), (147, 162), (147, 163), (147, 165), (147, 166), (147, 167), (147, 168), (147, 170), (147, 171), (147, 172), (147, 173), (149, 155), (149, 156), (149, 158), (149, 159), (149, 160), (149, 162), (149, 163), (149, 165), (149, 166), (149, 167), (149, 168), (149, 170), (149, 171), (149, 172), (149, 173), (152, 158), (152, 159), (152, 160), (152, 162), (152, 163), (152, 165), (152, 166), (152, 167), (152, 168), (152, 170), (152, 171), (152, 172), (152, 173), (153, 159), (153, 160), (153, 162), (153, 163), (153, 165), (153, 166), (153, 167), (153, 168), (153, 170), (153, 171), (153, 172), (153, 173), (154, 160), (154, 162), (154, 163), (154, 165), (154, 166), (154, 167), (154, 168), (154, 170), (154, 171), (154, 172), (154, 173), (155, 162), (155, 163), (155, 165), (155, 166), (155, 167), (155, 168), (155, 170), (155, 171), (155, 172), (155, 173), (156, 162), (156, 163), (156, 165), (156, 166), (156, 167), (156, 168), (156, 170), (156, 171), (156, 172), (156, 173), (158, 165), (158, 166), (158, 167), (158, 168), (158, 170), (158, 171), (158, 172), (158, 173), (159, 165), (159, 166), (159, 167), (159, 168), (159, 170), (159, 171), (159, 172), (159, 173), (160, 166), (160, 167), (160, 168), (160, 170), (160, 171), (160, 172), (160, 173), (162, 168), (162, 170), (162, 171), (162, 172), (162, 173), (163, 170), (163, 171), (163, 172), (163, 173), (165, 171), (165, 172), (165, 173), (166, 172), (166, 173), (167, 173)]"
52,55,55,2,False,[],[],"[[(17, 17), (14, 14), (16, 16), (19, 19), (18, 18), (40, 40), (15, 15)], [(41, 41), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc880>"": "" else if (ELEMENT_PASSWORD.equals(qName)) {\n    // reading old settings\n    byte[] bytes = null;\n    try {\n        bytes = org.netbeans.modules.db.util.Base64.base64ToByteArray(value);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b92ee0>"": ""{\n    String value = attrs.getValue(ATTR_PROPERTY_VALUE);\n}""}",0,0,2,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/db/src/org/netbeans/modules/db/explorer/DatabaseConnectionConvertor.java,startElement,449,11.0,30.0,[],[],"[[(466, 466), (463, 463), (465, 465), (468, 468), (467, 467), (489, 489), (464, 464)], [(490, 490), (450, 450), (449, 449)]]","[(459, 489), (459, 489), (459, 489), (461, 489), (461, 489), (461, 489), (463, 489), (463, 489), (463, 489), (464, 474), (464, 488), (465, 474), (465, 488), (466, 474), (466, 488), (475, 488), (476, 487)]"
53,56,56,2,False,[],[],"[[(8, 8), (5, 5), (23, 23), (16, 16), (9, 9), (0, 0), (10, 10), (28, 28), (2, 2), (15, 15)], [(28, 28), (1, 1), (0, 0)], [(8, 8), (23, 23), (7, 7), (16, 16), (9, 9), (0, 0), (13, 13), (10, 10), (28, 28), (2, 2)], [(4, 4), (8, 8), (14, 14), (23, 23), (16, 16), (9, 9), (0, 0), (10, 10), (28, 28), (2, 2)], [(8, 8), (23, 23), (9, 9), (0, 0), (28, 28), (2, 2)], [(8, 8), (23, 23), (16, 16), (9, 9), (0, 0), (10, 10), (28, 28), (12, 12), (2, 2), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9a00>"": ""{\n    Token<JavaTokenId> t = ts.token();\n    int lastCommentIndex = ts.index();\n    while (ts.moveNext()) {\n        t = ts.token();\n        if (isComment(t.id())) {\n            lastCommentIndex = ts.index();\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac38cde80>"": ""{\n    CommentsCollection result = new CommentsCollection();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9ee0>"": ""{\n    Token<JavaTokenId> t = ts.token();\n    int end = ts.offset() + ts.token().length();\n    while (ts.moveNext()) {\n        t = ts.token();\n        if (isComment(t.id())) {\n            end = Math.max(ts.offset() + t.length(), end);\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac38cdb20>"": ""{\n    Token<JavaTokenId> t = ts.token();\n    boolean isLC = t.id() == JavaTokenId.LINE_COMMENT;\n    while (ts.moveNext()) {\n        t = ts.token();\n        if (isComment(t.id())) {\n            isLC = t.id() == JavaTokenId.LINE_COMMENT;\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac38cdd30>"": ""{\n    Token<JavaTokenId> t = ts.token();\n    while (ts.moveNext()) {\n        t = ts.token();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44e9f40>"": ""{\n    Token<JavaTokenId> t = ts.token();\n    int start = ts.offset();\n    while (ts.moveNext()) {\n        t = ts.token();\n        if (isComment(t.id())) {\n            start = Math.min(ts.offset(), start);\n        }\n    }\n}""}",0,1,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/java.source/src/org/netbeans/api/java/source/CommentCollector.java,getCommentsCollection,321,6.0,26.0,[],[],"[[(329, 329), (326, 326), (344, 344), (337, 337), (330, 330), (321, 321), (331, 331), (349, 349), (323, 323), (336, 336)], [(349, 349), (322, 322), (321, 321)], [(329, 329), (344, 344), (328, 328), (337, 337), (330, 330), (321, 321), (334, 334), (331, 331), (349, 349), (323, 323)], [(325, 325), (329, 329), (335, 335), (344, 344), (337, 337), (330, 330), (321, 321), (331, 331), (349, 349), (323, 323)], [(329, 329), (344, 344), (330, 330), (321, 321), (349, 349), (323, 323)], [(329, 329), (344, 344), (337, 337), (330, 330), (321, 321), (331, 331), (349, 349), (333, 333), (323, 323), (327, 327)]]",exception_happened
54,57,57,2,False,"[(22, 30)]","[(33, 33)]","[[(30, 30), (23, 23), (22, 22)], [(20, 20), (29, 29), (37, 37), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (22, 22), (31, 31), (8, 8), (17, 17), (27, 27), (13, 13), (32, 32), (15, 15), (5, 5), (14, 14), (23, 23), (10, 10), (6, 6), (24, 24)], [(20, 20), (11, 11), (30, 30), (7, 7), (16, 16), (31, 31), (22, 22), (8, 8), (17, 17), (13, 13), (32, 32), (18, 18), (15, 15), (5, 5), (14, 14), (23, 23), (10, 10), (19, 19), (28, 28), (37, 37), (24, 24)], [(31, 31), (11, 11), (13, 13)], [(20, 20), (29, 29), (33, 33), (37, 37), (34, 34), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (35, 35), (22, 22), (31, 31), (8, 8), (17, 17), (27, 27), (36, 36), (13, 13), (32, 32), (15, 15), (4, 4), (5, 5), (14, 14), (23, 23), (10, 10), (28, 28), (6, 6), (24, 24)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac38cd430>"": ""{ \n    int colon = host.indexOf(':');\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac36501c0>"": ""{\n    int port = uri.getPort(); // may be overridden later\n    String host = uri.getHost();\n    if (host == null) { // normal parse failed; let's do it ourselves\n        host = uri.getAuthority();\n        if (host != null) {\n            int at = host.indexOf('@');\n            if (at >= 0) {\n                if (host.length() > at+1 ) {\n                    host = host.substring(at+1);\n                }\n            }\n            if (host != null) { \n                int colon = host.indexOf(':');\n                if (colon >= 0) {\n                    if (colon+1 < host.length()) {\n                        port = Integer.parseInt(host.substring(colon+1));\n                    }\n                }\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3650310>"": ""{\n    String host = uri.getHost();\n    if (host == null) { // normal parse failed; let's do it ourselves\n        host = uri.getAuthority();\n        if (host != null) {\n            int at = host.indexOf('@');\n            if (at >= 0) {\n                if (host.length() > at+1 ) {\n                    host = host.substring(at+1);\n                } else {\n                    host = null; // @ on its own\n                }\n            }\n            if (host != null) { \n                int colon = host.indexOf(':');\n                if (colon >= 0) {\n                    host = host.substring(0,colon);\n            }\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac38cd940>"": ""String scheme = uri.getScheme();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364c160>"": ""{\n    int at = host.indexOf('@');\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364cdc0>"": ""HttpHost target = null;\nif (uri.isAbsolute()) {\n    int port = uri.getPort(); // may be overridden later\n    String host = uri.getHost();\n    if (host == null) { // normal parse failed; let's do it ourselves\n        host = uri.getAuthority();\n        if (host != null) {\n            int at = host.indexOf('@');\n            if (at >= 0) {\n                if (host.length() > at+1 ) {\n                    host = host.substring(at+1);\n                }\n            }\n            if (host != null) { \n                int colon = host.indexOf(':');\n                if (colon >= 0) {\n                    if (colon+1 < host.length()) {\n                        port = Integer.parseInt(host.substring(colon+1));\n                    }\n                    host = host.substring(0,colon);\n                }\n            }\n        }\n    }\n    String scheme = uri.getScheme();\n    if (host != null) {\n        target = new HttpHost(host, port, scheme);\n    }\n}""}",0,0,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/apache/http/client/utils/URIUtils.java,extractHost,284,11.0,26.0,"[(306, 314)]","[(317, 317)]","[[(314, 314), (307, 307), (306, 306)], [(304, 304), (313, 313), (321, 321), (295, 295), (314, 314), (291, 291), (300, 300), (309, 309), (310, 310), (306, 306), (315, 315), (292, 292), (301, 301), (311, 311), (297, 297), (316, 316), (299, 299), (289, 289), (298, 298), (307, 307), (294, 294), (290, 290), (308, 308)], [(304, 304), (295, 295), (314, 314), (291, 291), (300, 300), (315, 315), (306, 306), (292, 292), (301, 301), (297, 297), (316, 316), (302, 302), (299, 299), (289, 289), (298, 298), (307, 307), (294, 294), (303, 303), (312, 312), (321, 321), (308, 308)], [(315, 315), (295, 295), (297, 297)], [(304, 304), (313, 313), (317, 317), (321, 321), (318, 318), (295, 295), (314, 314), (291, 291), (300, 300), (309, 309), (310, 310), (319, 319), (306, 306), (315, 315), (292, 292), (301, 301), (311, 311), (320, 320), (297, 297), (316, 316), (299, 299), (288, 288), (289, 289), (298, 298), (307, 307), (294, 294), (312, 312), (290, 290), (308, 308)]]","[(290, 316), (290, 316), (290, 317), (290, 317), (290, 320), (290, 320), (291, 316), (291, 317), (291, 320), (292, 315), (292, 316), (292, 317), (292, 320), (293, 315), (294, 315), (295, 315), (296, 304), (296, 305), (296, 314), (297, 304), (297, 305), (297, 314), (298, 304), (298, 305), (298, 314), (305, 314), (306, 314), (307, 313)]"
55,58,58,1,False,"[(13, 26)]",[],"[[(14, 14), (18, 18), (22, 22)], [(19, 19), (14, 14), (18, 18), (22, 22)], [(30, 30), (0, 0)], [(14, 14), (18, 18), (22, 22)], [(30, 30), (3, 3), (0, 0)], [(30, 30), (7, 7), (0, 0)], [(8, 8), (17, 17), (14, 14), (23, 23), (7, 7), (16, 16), (0, 0), (30, 30), (20, 20), (13, 13), (19, 19), (21, 21), (18, 18), (22, 22), (15, 15)], [(19, 19), (14, 14), (18, 18), (22, 22)], [(30, 30), (1, 1), (0, 0)], [(4, 4), (30, 30), (3, 3), (0, 0)], [(8, 8), (30, 30), (7, 7), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac364c820>"": ""{\n\tListenerExecutionFailedException lefx = (ListenerExecutionFailedException) ex;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364c8b0>"": ""{\n\tListenerExecutionFailedException lefx = (ListenerExecutionFailedException) ex;\n\tThrowable cause = lefx.getCause();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc610>"": ""public void testThatAnExceptionThrownFromTheHandlingMethodIsSimplySwallowedByDefault() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac350a040>"": ""{\n\tMockControl mockTextMessage = MockControl.createControl(TextMessage.class);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac350a460>"": ""{\n\tMockControl mockDelegate = MockControl.createControl(MessageDelegate.class);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac3b928b0>"": ""{\nMockControl mockDelegate = MockControl.createControl(MessageDelegate.class);\nMessageDelegate delegate = (MessageDelegate) mockDelegate.getMock();\nMessageListenerAdapter adapter = new MessageListenerAdapter(delegate) {\n\tprotected void handleListenerException(Throwable ex) {\n\t\tassertNotNull(\""The Throwable passed to the handleListenerException(..) method must never be null.\"", ex);\n\t\tassertTrue(\""The Throwable passed to the handleListenerException(..) method must be of type [ListenerExecutionFailedException].\"",\n\t\t\t\tex instanceof ListenerExecutionFailedException);\n\t\tListenerExecutionFailedException lefx = (ListenerExecutionFailedException) ex;\n\t\tThrowable cause = lefx.getCause();\n\t\tassertNotNull(\""The cause of a ListenerExecutionFailedException must be preserved.\"", cause);\n\t\tassertSame(exception, cause);\n\t}\n};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac44cc550>"": ""{\nfinal IllegalArgumentException exception = new IllegalArgumentException();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac350a160>"": ""{\nMockControl mockTextMessage = MockControl.createControl(TextMessage.class);\nTextMessage textMessage = (TextMessage) mockTextMessage.getMock();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac350a550>"": ""{\nMockControl mockDelegate = MockControl.createControl(MessageDelegate.class);\nMessageDelegate delegate = (MessageDelegate) mockDelegate.getMock();\n""}",0,0,0,0,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/springframework/springframework-3.0.5/src/spring-framework-3.0.5.RELEASE/projects/org.springframework.jms/src/test/java/org/springframework/jms/listener/adapter/MessageListenerAdapterTests.java,testThatAnExceptionThrownFromTheHandlingMethodIsSimplySwallowedByDefault,206,1.0,22.0,"[(219, 232)]",[],"[[(220, 220), (224, 224), (228, 228)], [(225, 225), (220, 220), (224, 224), (228, 228)], [(236, 236), (206, 206)], [(220, 220), (224, 224), (228, 228)], [(236, 236), (209, 209), (206, 206)], [(236, 236), (213, 213), (206, 206)], [(214, 214), (223, 223), (220, 220), (229, 229), (213, 213), (222, 222), (206, 206), (236, 236), (226, 226), (219, 219), (225, 225), (227, 227), (224, 224), (228, 228), (221, 221)], [(225, 225), (220, 220), (224, 224), (228, 228)], [(236, 236), (207, 207), (206, 206)], [(210, 210), (236, 236), (209, 209), (206, 206)], [(214, 214), (236, 236), (213, 213), (206, 206)]]","[(207, 213), (207, 214), (207, 215), (207, 216), (207, 217), (207, 229), (207, 230), (209, 215), (209, 216), (209, 217), (209, 229), (209, 230), (209, 231), (209, 232), (210, 216), (210, 217), (210, 229), (210, 230), (210, 231), (210, 232), (211, 217), (211, 229), (211, 230), (211, 231), (211, 232), (211, 234), (213, 229), (213, 230), (213, 231), (213, 232), (213, 234), (213, 235), (214, 229), (214, 230), (214, 231), (214, 232), (214, 234), (214, 235), (215, 229), (215, 230), (215, 231), (215, 232), (215, 234), (215, 235), (216, 229), (216, 230), (216, 231), (216, 232), (216, 234), (216, 235), (217, 229), (217, 230), (217, 231), (217, 232), (217, 234), (217, 235), (219, 229), (219, 230), (219, 231), (219, 232), (219, 234), (219, 235), (221, 227)]"
56,59,59,2,False,[],[],"[[(5, 5), (7, 7), (0, 0), (9, 9), (1, 1), (10, 10), (6, 6), (11, 11), (24, 24)], [(17, 17), (21, 21), (16, 16)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac364cfa0>"": ""{\n\tASTNode selectedNode= problem.getCoveringNode(root);\n\tif (selectedNode.getNodeType() == ASTNode.ANONYMOUS_CLASS_DECLARATION) { // bug 200016\n\t\tselectedNode= selectedNode.getParent();\n\t}\n\tif (selectedNode.getLocationInParent() == EnumConstantDeclaration.NAME_PROPERTY) {\n\t\tselectedNode= selectedNode.getParent();\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364c4f0>"": ""{\nEnumConstantDeclaration enumConst= (EnumConstantDeclaration) selectedNode;\n""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/corext/fix/UnimplementedCodeFix.java,getSelectedTypeNode,176,9.0,21.0,[],[],"[[(181, 181), (183, 183), (176, 176), (185, 185), (177, 177), (186, 186), (182, 182), (187, 187), (200, 200)], [(193, 193), (197, 197), (192, 192)]]","[(177, 183), (177, 187), (178, 187), (181, 187), (181, 199), (185, 199), (188, 199), (190, 199), (190, 199), (192, 199), (192, 199), (192, 199)]"
57,60,60,2,False,[],"[(14, 14), (15, 15)]","[[(4, 4), (8, 8), (5, 5), (7, 7), (0, 0), (9, 9), (1, 1), (29, 29), (10, 10), (3, 3), (12, 12), (2, 2), (6, 6), (11, 11)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac2fabb20>"": ""{\n\tImageDescriptor type;\n\tif (Flags.isAnnotation(flags)) {\n\t\ttype= JavaPluginImages.DESC_OVR_ANNOTATION;\n\t} else if (Flags.isEnum(flags)) {\n\t\ttype= JavaPluginImages.DESC_OVR_ENUM;\n\t} else if (Flags.isInterface(flags)) {\n\t\ttype= JavaPluginImages.DESC_OVR_INTERFACE;\n\t} else if (/* is class */ Flags.isAbstract(flags)) {\n\t\ttype= JavaPluginImages.DESC_OVR_ABSTRACT_CLASS;\n\t} else {\n\t\ttype= null;\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab520>"": ""boolean deprecated= Flags.isDeprecated(flags);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2fab160>"": ""boolean packageDefault= Flags.isPackageDefault(flags);""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/InterfaceIndicatorLabelDecorator.java,addOverlaysFromFlags,155,14.0,25.0,[],"[(169, 169), (170, 170)]","[[(159, 159), (163, 163), (160, 160), (162, 162), (155, 155), (164, 164), (156, 156), (184, 184), (165, 165), (158, 158), (167, 167), (157, 157), (161, 161), (166, 166)]]","[(156, 167), (156, 169), (156, 170), (156, 173), (157, 167), (157, 169), (157, 170), (157, 173), (159, 167), (159, 167), (161, 167), (161, 167), (161, 167), (169, 183), (170, 183), (172, 183), (175, 183)]"
58,61,61,1,False,[],[],"[[(52, 52), (7, 7), (0, 0)], [(52, 52), (29, 29), (2, 2), (7, 7), (25, 25), (3, 3), (21, 21), (49, 49), (8, 8), (17, 17), (45, 45), (6, 6), (13, 13), (41, 41), (4, 4), (5, 5), (0, 0), (10, 10), (37, 37), (33, 33)], [(52, 52), (2, 2), (0, 0)], [(52, 52), (3, 3), (0, 0)], [(6, 6), (52, 52), (0, 0)], [(52, 52), (5, 5), (0, 0)], [(4, 4), (52, 52), (0, 0)], [(8, 8), (52, 52), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb220>"": ""{\ndouble[] c6 = new double[]{10, 150.00000000001};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2d8d640>"": ""{\ndouble[] c1 = new double[]{10, 30};\ndouble[] c2 = new double[]{150, 150};\ndouble[] c3 = new double[]{70, 10};\ndouble[] c4 = new double[]{200, 140};\ndouble[] c5 = new double[]{10, 150};\ndouble[] c6 = new double[]{10, 150.00000000001};\ndouble[] c7 = new double[]{100, 70};\nboolean b = false;\nb = AlgoRectangleND.contains(c1, c2, c7);\nb = AlgoRectangleND.contains(c1, c2, c3);\nb = AlgoRectangleND.contains(c1, c2, c4);\nb = AlgoRectangleND.contains(c3, c4, c7);\nb = AlgoRectangleND.contains(c3, c4, c1);\nb = AlgoRectangleND.contains(c3, c4, c2);\nb = AlgoRectangleND.contains(c1, c2, c1);\nb = AlgoRectangleND.contains(c1, c2, c2);\nb = AlgoRectangleND.contains(c1, c2, c5);\nb = AlgoRectangleND.contains(c1, c2, c6);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf8b0>"": ""{\ndouble[] c1 = new double[]{10, 30};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bbac0>"": ""{\ndouble[] c2 = new double[]{150, 150};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb4c0>"": ""{\ndouble[] c5 = new double[]{10, 150};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb910>"": ""{\ndouble[] c4 = new double[]{200, 140};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb940>"": ""{\ndouble[] c3 = new double[]{70, 10};\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2d8ddf0>"": ""{\ndouble[] c7 = new double[]{100, 70};\n""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/unsupported/geometry/src/test/java/org/geotools/geometry/iso/util/algorithmND/AlgoRectangleNDTest.java,_testContainsND,39,1.0,29.0,[],[],"[[(91, 91), (46, 46), (39, 39)], [(91, 91), (68, 68), (41, 41), (46, 46), (64, 64), (42, 42), (60, 60), (88, 88), (47, 47), (56, 56), (84, 84), (45, 45), (52, 52), (80, 80), (43, 43), (44, 44), (39, 39), (49, 49), (76, 76), (72, 72)], [(91, 91), (41, 41), (39, 39)], [(91, 91), (42, 42), (39, 39)], [(45, 45), (91, 91), (39, 39)], [(91, 91), (44, 44), (39, 39)], [(43, 43), (91, 91), (39, 39)], [(47, 47), (91, 91), (39, 39)]]","[(41, 47), (41, 49), (41, 51), (41, 52), (41, 53), (41, 55), (41, 56), (41, 57), (41, 59), (41, 60), (41, 61), (41, 63), (41, 64), (41, 65), (41, 67), (41, 68), (41, 69), (41, 71), (41, 72), (41, 73), (41, 75), (41, 76), (41, 77), (41, 79), (41, 80), (41, 81), (42, 49), (42, 51), (42, 52), (42, 53), (42, 55), (42, 56), (42, 57), (42, 59), (42, 60), (42, 61), (42, 63), (42, 64), (42, 65), (42, 67), (42, 68), (42, 69), (42, 71), (42, 72), (42, 73), (42, 75), (42, 76), (42, 77), (42, 79), (42, 80), (42, 81), (43, 49), (43, 51), (43, 52), (43, 53), (43, 55), (43, 56), (43, 57), (43, 59), (43, 60), (43, 61), (43, 63), (43, 64), (43, 65), (43, 67), (43, 68), (43, 69), (43, 71), (43, 72), (43, 73), (43, 75), (43, 76), (43, 77), (43, 79), (43, 80), (43, 81), (43, 83), (44, 51), (44, 52), (44, 53), (44, 55), (44, 56), (44, 57), (44, 59), (44, 60), (44, 61), (44, 63), (44, 64), (44, 65), (44, 67), (44, 68), (44, 69), (44, 71), (44, 72), (44, 73), (44, 75), (44, 76), (44, 77), (44, 79), (44, 80), (44, 81), (44, 83), (44, 84), (45, 51), (45, 52), (45, 53), (45, 55), (45, 56), (45, 57), (45, 59), (45, 60), (45, 61), (45, 63), (45, 64), (45, 65), (45, 67), (45, 68), (45, 69), (45, 71), (45, 72), (45, 73), (45, 75), (45, 76), (45, 77), (45, 79), (45, 80), (45, 81), (45, 83), (45, 84), (45, 85), (46, 52), (46, 53), (46, 55), (46, 56), (46, 57), (46, 59), (46, 60), (46, 61), (46, 63), (46, 64), (46, 65), (46, 67), (46, 68), (46, 69), (46, 71), (46, 72), (46, 73), (46, 75), (46, 76), (46, 77), (46, 79), (46, 80), (46, 81), (46, 83), (46, 84), (46, 85), (47, 53), (47, 55), (47, 56), (47, 57), (47, 59), (47, 60), (47, 61), (47, 63), (47, 64), (47, 65), (47, 67), (47, 68), (47, 69), (47, 71), (47, 72), (47, 73), (47, 75), (47, 76), (47, 77), (47, 79), (47, 80), (47, 81), (47, 83), (47, 84), (47, 85), (47, 87), (49, 55), (49, 56), (49, 57), (49, 59), (49, 60), (49, 61), (49, 63), (49, 64), (49, 65), (49, 67), (49, 68), (49, 69), (49, 71), (49, 72), (49, 73), (49, 75), (49, 76), (49, 77), (49, 79), (49, 80), (49, 81), (49, 83), (49, 84), (49, 85), (49, 87), (49, 88), (49, 89), (51, 57), (51, 59), (51, 60), (51, 61), (51, 63), (51, 64), (51, 65), (51, 67), (51, 68), (51, 69), (51, 71), (51, 72), (51, 73), (51, 75), (51, 76), (51, 77), (51, 79), (51, 80), (51, 81), (51, 83), (51, 84), (51, 85), (51, 87), (51, 88), (51, 89), (52, 59), (52, 60), (52, 61), (52, 63), (52, 64), (52, 65), (52, 67), (52, 68), (52, 69), (52, 71), (52, 72), (52, 73), (52, 75), (52, 76), (52, 77), (52, 79), (52, 80), (52, 81), (52, 83), (52, 84), (52, 85), (52, 87), (52, 88), (52, 89), (53, 59), (53, 60), (53, 61), (53, 63), (53, 64), (53, 65), (53, 67), (53, 68), (53, 69), (53, 71), (53, 72), (53, 73), (53, 75), (53, 76), (53, 77), (53, 79), (53, 80), (53, 81), (53, 83), (53, 84), (53, 85), (53, 87), (53, 88), (53, 89), (55, 61), (55, 63), (55, 64), (55, 65), (55, 67), (55, 68), (55, 69), (55, 71), (55, 72), (55, 73), (55, 75), (55, 76), (55, 77), (55, 79), (55, 80), (55, 81), (55, 83), (55, 84), (55, 85), (55, 87), (55, 88), (55, 89), (56, 63), (56, 64), (56, 65), (56, 67), (56, 68), (56, 69), (56, 71), (56, 72), (56, 73), (56, 75), (56, 76), (56, 77), (56, 79), (56, 80), (56, 81), (56, 83), (56, 84), (56, 85), (56, 87), (56, 88), (56, 89), (57, 63), (57, 64), (57, 65), (57, 67), (57, 68), (57, 69), (57, 71), (57, 72), (57, 73), (57, 75), (57, 76), (57, 77), (57, 79), (57, 80), (57, 81), (57, 83), (57, 84), (57, 85), (57, 87), (57, 88), (57, 89), (59, 65), (59, 67), (59, 68), (59, 69), (59, 71), (59, 72), (59, 73), (59, 75), (59, 76), (59, 77), (59, 79), (59, 80), (59, 81), (59, 83), (59, 84), (59, 85), (59, 87), (59, 88), (59, 89), (60, 67), (60, 68), (60, 69), (60, 71), (60, 72), (60, 73), (60, 75), (60, 76), (60, 77), (60, 79), (60, 80), (60, 81), (60, 83), (60, 84), (60, 85), (60, 87), (60, 88), (60, 89), (61, 67), (61, 68), (61, 69), (61, 71), (61, 72), (61, 73), (61, 75), (61, 76), (61, 77), (61, 79), (61, 80), (61, 81), (61, 83), (61, 84), (61, 85), (61, 87), (61, 88), (61, 89), (63, 69), (63, 71), (63, 72), (63, 73), (63, 75), (63, 76), (63, 77), (63, 79), (63, 80), (63, 81), (63, 83), (63, 84), (63, 85), (63, 87), (63, 88), (63, 89), (64, 71), (64, 72), (64, 73), (64, 75), (64, 76), (64, 77), (64, 79), (64, 80), (64, 81), (64, 83), (64, 84), (64, 85), (64, 87), (64, 88), (64, 89), (65, 71), (65, 72), (65, 73), (65, 75), (65, 76), (65, 77), (65, 79), (65, 80), (65, 81), (65, 83), (65, 84), (65, 85), (65, 87), (65, 88), (65, 89), (67, 73), (67, 75), (67, 76), (67, 77), (67, 79), (67, 80), (67, 81), (67, 83), (67, 84), (67, 85), (67, 87), (67, 88), (67, 89), (68, 75), (68, 76), (68, 77), (68, 79), (68, 80), (68, 81), (68, 83), (68, 84), (68, 85), (68, 87), (68, 88), (68, 89), (69, 75), (69, 76), (69, 77), (69, 79), (69, 80), (69, 81), (69, 83), (69, 84), (69, 85), (69, 87), (69, 88), (69, 89), (71, 77), (71, 79), (71, 80), (71, 81), (71, 83), (71, 84), (71, 85), (71, 87), (71, 88), (71, 89), (72, 79), (72, 80), (72, 81), (72, 83), (72, 84), (72, 85), (72, 87), (72, 88), (72, 89), (73, 79), (73, 80), (73, 81), (73, 83), (73, 84), (73, 85), (73, 87), (73, 88), (73, 89), (75, 81), (75, 83), (75, 84), (75, 85), (75, 87), (75, 88), (75, 89), (76, 83), (76, 84), (76, 85), (76, 87), (76, 88), (76, 89), (77, 83), (77, 84), (77, 85), (77, 87), (77, 88), (77, 89), (79, 85), (79, 87), (79, 88), (79, 89), (80, 87), (80, 88), (80, 89), (81, 87), (81, 88), (81, 89), (83, 89)]"
59,62,62,1,False,"[(5, 19), (5, 14)]",[],"[[(33, 33), (1, 1), (5, 5), (0, 0)], [(0, 0), (29, 29), (28, 28), (3, 3), (2, 2), (33, 33)], [(33, 33), (28, 28), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3790>"": ""{\n  Vector        result;\n  result = new Vector();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3940>"": ""{\n  String[]      options;\n  int           i;\n  options = super.getOptions();\n  for (i = 0; i < options.length; i++)\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3610>"": ""{\n  String[]      options;\n  options = super.getOptions();\n}""}",2,0,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/weka/weka-3.7.9/src/src/main/java/weka/classifiers/trees/RandomForest.java,getOptions,435,4.0,23.0,"[(440, 454), (440, 449)]",[],"[[(468, 468), (436, 436), (440, 440), (435, 435)], [(435, 435), (464, 464), (463, 463), (438, 438), (437, 437), (468, 468)], [(468, 468), (463, 463), (437, 437), (435, 435)]]","[(436, 442), (436, 443), (436, 445), (436, 446), (436, 448), (436, 449), (436, 454), (436, 458), (436, 460), (436, 461), (437, 443), (437, 445), (437, 446), (437, 448), (437, 449), (437, 454), (437, 458), (437, 460), (437, 461), (438, 445), (438, 446), (438, 448), (438, 449), (438, 454), (438, 458), (438, 460), (438, 461), (438, 463), (440, 446), (440, 448), (440, 449), (440, 454), (440, 458), (440, 460), (440, 461), (440, 463), (440, 465), (442, 448), (442, 449), (442, 454), (442, 458), (442, 460), (442, 461), (442, 463), (442, 465), (442, 467), (443, 449), (443, 454), (443, 458), (443, 460), (443, 461), (443, 463), (443, 465), (443, 467), (445, 454), (445, 458), (445, 460), (445, 461), (445, 463), (445, 465), (445, 467), (446, 454), (446, 458), (446, 460), (446, 461), (446, 463), (446, 465), (446, 467), (448, 454), (448, 458), (448, 460), (448, 461), (448, 463), (448, 465), (448, 467), (449, 458), (449, 460), (449, 461), (449, 463), (449, 465), (449, 467), (451, 458), (451, 460), (451, 461), (451, 463), (451, 465), (451, 467), (456, 463), (456, 465), (456, 467), (460, 467), (461, 467)]"
60,63,63,1,False,"[(22, 30), (25, 30)]",[],"[[(10, 10), (36, 36), (0, 0)], [(5, 5), (0, 0), (1, 1), (36, 36), (6, 6)], [(36, 36), (2, 2), (22, 22), (0, 0)], [(36, 36), (0, 0)], [(5, 5), (0, 0), (1, 1), (36, 36), (25, 25), (18, 18), (6, 6)], [(10, 10), (14, 14), (36, 36), (0, 0)], [(5, 5), (14, 14), (27, 27), (0, 0), (1, 1), (36, 36), (25, 25), (10, 10), (18, 18), (2, 2), (6, 6), (22, 22)], [(36, 36), (2, 2), (0, 0)], [(1, 1), (36, 36), (0, 0)], [(8, 8), (36, 36), (2, 2), (0, 0)], [(5, 5), (0, 0), (1, 1), (36, 36), (18, 18), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac2d8da00>"": ""{\n  Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364c850>"": ""{\n  Directory indexDir = newDirectory();\n  RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf250>"": ""{\n  Directory taxoDir = newDirectory();\n  TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3c70>"": ""public void testSomeSameSomeDifferent() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf670>"": ""{\n  Directory indexDir = newDirectory();\n  RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n  IndexReader ir = iw.getReader();\n  IndexSearcher searcher = newSearcher(ir);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3490>"": ""{\n  Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n  PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2427070>"": ""{\n  Directory indexDir = newDirectory();\n  Directory taxoDir = newDirectory();\n  RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n  Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n  PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n  IndexReader ir = iw.getReader();\n  TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n  IndexSearcher searcher = newSearcher(ir);\n  FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3ac0>"": ""{\n  Directory taxoDir = newDirectory();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e38e0>"": ""{\n  Directory indexDir = newDirectory();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac2d8d310>"": ""{\n  Directory taxoDir = newDirectory();\n  TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bf970>"": ""{\n  Directory indexDir = newDirectory();\n  RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n  IndexReader ir = iw.getReader();\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists.java,testSomeSameSomeDifferent,232,1.0,21.0,"[(254, 262), (257, 262)]",[],"[[(242, 242), (268, 268), (232, 232)], [(237, 237), (232, 232), (233, 233), (268, 268), (238, 238)], [(268, 268), (234, 234), (254, 254), (232, 232)], [(268, 268), (232, 232)], [(237, 237), (232, 232), (233, 233), (268, 268), (257, 257), (250, 250), (238, 238)], [(242, 242), (246, 246), (268, 268), (232, 232)], [(237, 237), (246, 246), (259, 259), (232, 232), (233, 233), (268, 268), (257, 257), (242, 242), (250, 250), (234, 234), (238, 238), (254, 254)], [(268, 268), (234, 234), (232, 232)], [(233, 233), (268, 268), (232, 232)], [(240, 240), (268, 268), (234, 234), (232, 232)], [(237, 237), (232, 232), (233, 233), (268, 268), (250, 250), (238, 238)]]","[(233, 239), (233, 240), (233, 242), (233, 243), (233, 244), (233, 245), (233, 246), (233, 248), (233, 250), (233, 251), (233, 253), (233, 254), (233, 256), (233, 257), (233, 259), (234, 240), (234, 242), (234, 243), (234, 244), (234, 245), (234, 246), (234, 248), (234, 250), (234, 251), (234, 253), (234, 254), (234, 256), (234, 257), (234, 259), (234, 261), (236, 242), (236, 243), (236, 244), (236, 245), (236, 246), (236, 248), (236, 250), (236, 251), (236, 253), (236, 254), (236, 256), (236, 257), (236, 259), (236, 261), (236, 262), (236, 263), (237, 243), (237, 244), (237, 245), (237, 246), (237, 248), (237, 250), (237, 251), (237, 253), (237, 254), (237, 256), (237, 257), (237, 259), (237, 261), (237, 262), (237, 263), (237, 264), (239, 245), (239, 246), (239, 248), (239, 250), (239, 251), (239, 253), (239, 254), (239, 256), (239, 257), (239, 259), (239, 261), (239, 262), (239, 263), (239, 264), (239, 266), (240, 246), (240, 248), (240, 250), (240, 251), (240, 253), (240, 254), (240, 256), (240, 257), (240, 259), (240, 261), (240, 262), (240, 263), (240, 264), (240, 266), (240, 267), (242, 248), (242, 250), (242, 251), (242, 253), (242, 254), (242, 256), (242, 257), (242, 259), (242, 261), (242, 262), (242, 263), (242, 264), (242, 266), (242, 267), (243, 250), (243, 251), (243, 253), (243, 254), (243, 256), (243, 257), (243, 259), (243, 261), (243, 262), (243, 263), (243, 264), (243, 266), (243, 267), (244, 250), (244, 251), (244, 253), (244, 254), (244, 256), (244, 257), (244, 259), (244, 261), (244, 262), (244, 263), (244, 264), (244, 266), (244, 267), (245, 251), (245, 253), (245, 254), (245, 256), (245, 257), (245, 259), (245, 261), (245, 262), (245, 263), (245, 264), (245, 266), (245, 267), (246, 253), (246, 254), (246, 256), (246, 257), (246, 259), (246, 261), (246, 262), (246, 263), (246, 264), (246, 266), (246, 267), (248, 254), (248, 256), (248, 257), (248, 259), (248, 261), (248, 262), (248, 263), (248, 264), (248, 266), (248, 267), (250, 256), (250, 257), (250, 259), (250, 261), (250, 262), (250, 263), (250, 264), (250, 266), (250, 267), (251, 257), (251, 259), (251, 261), (251, 262), (251, 263), (251, 264), (251, 266), (251, 267), (253, 259), (253, 261), (253, 262), (253, 263), (253, 264), (253, 266), (253, 267), (254, 261), (254, 262), (254, 263), (254, 264), (254, 266), (254, 267), (256, 262), (256, 263), (256, 264), (256, 266), (256, 267), (257, 263), (257, 264), (257, 266), (257, 267), (259, 266), (259, 267), (261, 267)]"
61,64,64,1,False,"[(24, 38), (1, 22)]","[(24, 24)]","[[(27, 27), (29, 29), (38, 38), (28, 28), (34, 34), (24, 24)], [(27, 27), (20, 20), (29, 29), (38, 38), (28, 28), (34, 34), (24, 24)], [(28, 28), (38, 38)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3850>"": ""java.util.List<Stock.Industry> sortedIndustries = stockInfoDatabase.getIndustries();\nint count = 0;\nfor (Stock.Industry industry : sortedIndustries) {\n    if (count >= industryCheckBoxes.size()) {\n    javax.swing.JCheckBox checkBox = industryCheckBoxes.get(count++);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac22c74f0>"": ""JCheckBox checkBox : industryCheckBoxes\njava.util.List<Stock.Industry> sortedIndustries = stockInfoDatabase.getIndustries();\nint count = 0;\nfor (Stock.Industry industry : sortedIndustries) {\n    if (count >= industryCheckBoxes.size()) {\n    javax.swing.JCheckBox checkBox = industryCheckBoxes.get(count++);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3100>"": ""java.util.List<Stock.Industry> sortedIndustries = stockInfoDatabase.getIndustries();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3370>"": ""Stock.Industry industry : sortedIndustries) {\n}""}",2,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jstock/jstock-1.0.7c/src/jstock/src/org/yccheok/jstock/gui/WizardSelectStockJPanel.java,initIndustryCheckBoxes,597,4.0,34.0,"[(621, 635), (598, 619)]","[(621, 621)]","[[(624, 624), (626, 626), (635, 635), (625, 625), (631, 631), (621, 621)], [(624, 624), (617, 617), (626, 626), (635, 635), (625, 625), (631, 631), (621, 621)], [(625, 625), (635, 635)]]","[(598, 604), (598, 605), (598, 606), (598, 607), (598, 608), (598, 609), (598, 610), (598, 611), (598, 612), (598, 613), (598, 614), (598, 615), (598, 619), (598, 621), (598, 622), (598, 624), (599, 605), (599, 606), (599, 607), (599, 608), (599, 609), (599, 610), (599, 611), (599, 612), (599, 613), (599, 614), (599, 615), (599, 619), (599, 621), (599, 622), (599, 624), (600, 606), (600, 607), (600, 608), (600, 609), (600, 610), (600, 611), (600, 612), (600, 613), (600, 614), (600, 615), (600, 619), (600, 621), (600, 622), (600, 624), (601, 607), (601, 608), (601, 609), (601, 610), (601, 611), (601, 612), (601, 613), (601, 614), (601, 615), (601, 619), (601, 621), (601, 622), (601, 624), (602, 608), (602, 609), (602, 610), (602, 611), (602, 612), (602, 613), (602, 614), (602, 615), (602, 619), (602, 621), (602, 622), (602, 624), (603, 609), (603, 610), (603, 611), (603, 612), (603, 613), (603, 614), (603, 615), (603, 619), (603, 621), (603, 622), (603, 624), (604, 610), (604, 611), (604, 612), (604, 613), (604, 614), (604, 615), (604, 619), (604, 621), (604, 622), (604, 624), (605, 611), (605, 612), (605, 613), (605, 614), (605, 615), (605, 619), (605, 621), (605, 622), (605, 624), (605, 635), (606, 612), (606, 613), (606, 614), (606, 615), (606, 619), (606, 621), (606, 622), (606, 624), (606, 635), (607, 613), (607, 614), (607, 615), (607, 619), (607, 621), (607, 622), (607, 624), (607, 635), (608, 614), (608, 615), (608, 619), (608, 621), (608, 622), (608, 624), (608, 635), (609, 615), (609, 619), (609, 621), (609, 622), (609, 624), (609, 635), (610, 619), (610, 621), (610, 622), (610, 624), (610, 635), (611, 619), (611, 621), (611, 622), (611, 624), (611, 635), (612, 619), (612, 621), (612, 622), (612, 624), (612, 635), (613, 619), (613, 621), (613, 622), (613, 624), (613, 635), (614, 621), (614, 622), (614, 624), (614, 635), (615, 621), (615, 622), (615, 624), (615, 635), (617, 624), (617, 635), (621, 635), (622, 635), (624, 635), (625, 635)]"
62,65,65,1,False,"[(22, 30), (13, 19), (33, 38)]",[],"[[(41, 41), (13, 13), (0, 0)], [(41, 41), (5, 5), (2, 2), (0, 0)], [(41, 41), (2, 2), (0, 0)], [(0, 0), (10, 10), (3, 3), (2, 2), (41, 41)], [(41, 41), (3, 3), (2, 2), (0, 0)], [(4, 4), (0, 0), (29, 29), (26, 26), (2, 2), (41, 41), (22, 22)], [(4, 4), (30, 30), (31, 31), (0, 0), (29, 29), (26, 26), (35, 35), (39, 39), (32, 32), (2, 2), (41, 41), (34, 34), (22, 22), (33, 33)], [(41, 41), (22, 22), (0, 0)], [(5, 5), (0, 0), (13, 13), (19, 19), (2, 2), (41, 41)], [(4, 4), (41, 41), (2, 2), (0, 0)], [(9, 9), (0, 0), (3, 3), (2, 2), (41, 41)], [(4, 4), (30, 30), (0, 0), (29, 29), (26, 26), (2, 2), (41, 41), (22, 22)], [(8, 8), (0, 0), (3, 3), (2, 2), (41, 41)], [(4, 4), (0, 0), (26, 26), (2, 2), (41, 41), (22, 22)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7a00>"": ""{\nArrayList<Position> positions = new ArrayList<Position>();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc070>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nGeometryFactory geomF = builder.getGeometryFactory();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57e8070>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc6d0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPositionFactory posF = builder.getPositionFactory();\nDirectPosition end = posF.createDirectPosition(new double[]{ 46.5, -121.5 });\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e38e0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPositionFactory posF = builder.getPositionFactory();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae70d0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPrimitiveFactory primF = builder.getPrimitiveFactory();\nArrayList<CurveSegment> segs = new ArrayList<CurveSegment>();\nCurve curve = primF.createCurve(segs);\nList<? extends CurveSegment> segs2 = curve.getSegments();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac5792730>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPrimitiveFactory primF = builder.getPrimitiveFactory();\nArrayList<CurveSegment> segs = new ArrayList<CurveSegment>();\nCurve curve = primF.createCurve(segs);\nList<? extends CurveSegment> segs2 = curve.getSegments();\nIterator<? extends CurveSegment> iter = segs2.iterator();\nPointArray samplePoints = null;\nwhile (iter.hasNext()) {\n\tif (samplePoints == null) {\n\t\tsamplePoints = iter.next().getSamplePoints();\n\t}\n}\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7190>"": ""{\nArrayList<CurveSegment> segs = new ArrayList<CurveSegment>();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae7f70>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nGeometryFactory geomF = builder.getGeometryFactory();\nArrayList<Position> positions = new ArrayList<Position>();\nLineString line = geomF.createLineString(positions);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55e3b80>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPrimitiveFactory primF = builder.getPrimitiveFactory();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc790>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPositionFactory posF = builder.getPositionFactory();\nDirectPosition middle = posF.createDirectPosition(new double[]{ 47, -122 });\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac57923a0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPrimitiveFactory primF = builder.getPrimitiveFactory();\nArrayList<CurveSegment> segs = new ArrayList<CurveSegment>();\nCurve curve = primF.createCurve(segs);\nList<? extends CurveSegment> segs2 = curve.getSegments();\nIterator<? extends CurveSegment> iter = segs2.iterator();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac55dc7c0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPositionFactory posF = builder.getPositionFactory();\nDirectPosition start = posF.createDirectPosition(new double[]{ 48.44, -123.37 });\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac1ae73d0>"": ""{\nGeometryBuilder builder = new GeometryBuilder(DefaultGeographicCRS.WGS84);\nPrimitiveFactory primF = builder.getPrimitiveFactory();\nArrayList<CurveSegment> segs = new ArrayList<CurveSegment>();\nCurve curve = primF.createCurve(segs);\n""}",0,1,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/unsupported/geometry/src/test/java/org/geotools/geometry/iso/primitive/PicoCurveTest.java,testCurveAgain,359,3.0,24.0,"[(381, 389), (372, 378), (392, 397)]",[],"[[(400, 400), (372, 372), (359, 359)], [(400, 400), (364, 364), (361, 361), (359, 359)], [(400, 400), (361, 361), (359, 359)], [(359, 359), (369, 369), (362, 362), (361, 361), (400, 400)], [(400, 400), (362, 362), (361, 361), (359, 359)], [(363, 363), (359, 359), (388, 388), (385, 385), (361, 361), (400, 400), (381, 381)], [(363, 363), (389, 389), (390, 390), (359, 359), (388, 388), (385, 385), (394, 394), (398, 398), (391, 391), (361, 361), (400, 400), (393, 393), (381, 381), (392, 392)], [(400, 400), (381, 381), (359, 359)], [(364, 364), (359, 359), (372, 372), (378, 378), (361, 361), (400, 400)], [(363, 363), (400, 400), (361, 361), (359, 359)], [(368, 368), (359, 359), (362, 362), (361, 361), (400, 400)], [(363, 363), (389, 389), (359, 359), (388, 388), (385, 385), (361, 361), (400, 400), (381, 381)], [(367, 367), (359, 359), (362, 362), (361, 361), (400, 400)], [(363, 363), (359, 359), (385, 385), (361, 361), (400, 400), (381, 381)]]","[(361, 367), (361, 368), (361, 369), (361, 371), (361, 372), (361, 373), (361, 374), (361, 375), (361, 377), (361, 378), (361, 380), (361, 381), (361, 382), (361, 384), (361, 385), (361, 387), (361, 388), (361, 389), (361, 390), (362, 368), (362, 369), (362, 371), (362, 372), (362, 373), (362, 374), (362, 375), (362, 377), (362, 378), (362, 380), (362, 381), (362, 382), (362, 384), (362, 385), (362, 387), (362, 388), (362, 389), (362, 390), (363, 369), (363, 371), (363, 372), (363, 373), (363, 374), (363, 375), (363, 377), (363, 378), (363, 380), (363, 381), (363, 382), (363, 384), (363, 385), (363, 387), (363, 388), (363, 389), (363, 390), (364, 371), (364, 372), (364, 373), (364, 374), (364, 375), (364, 377), (364, 378), (364, 380), (364, 381), (364, 382), (364, 384), (364, 385), (364, 387), (364, 388), (364, 389), (364, 390), (366, 372), (366, 373), (366, 374), (366, 375), (366, 377), (366, 378), (366, 380), (366, 381), (366, 382), (366, 384), (366, 385), (366, 387), (366, 388), (366, 389), (366, 390), (367, 373), (367, 374), (367, 375), (367, 377), (367, 378), (367, 380), (367, 381), (367, 382), (367, 384), (367, 385), (367, 387), (367, 388), (367, 389), (367, 390), (367, 398), (368, 374), (368, 375), (368, 377), (368, 378), (368, 380), (368, 381), (368, 382), (368, 384), (368, 385), (368, 387), (368, 388), (368, 389), (368, 390), (368, 398), (369, 375), (369, 377), (369, 378), (369, 380), (369, 381), (369, 382), (369, 384), (369, 385), (369, 387), (369, 388), (369, 389), (369, 390), (369, 398), (371, 377), (371, 378), (371, 380), (371, 381), (371, 382), (371, 384), (371, 385), (371, 387), (371, 388), (371, 389), (371, 390), (371, 398), (372, 378), (372, 380), (372, 381), (372, 382), (372, 384), (372, 385), (372, 387), (372, 388), (372, 389), (372, 390), (372, 398), (373, 380), (373, 381), (373, 382), (373, 384), (373, 385), (373, 387), (373, 388), (373, 389), (373, 390), (373, 398), (374, 380), (374, 381), (374, 382), (374, 384), (374, 385), (374, 387), (374, 388), (374, 389), (374, 390), (374, 398), (375, 381), (375, 382), (375, 384), (375, 385), (375, 387), (375, 388), (375, 389), (375, 390), (375, 398), (377, 384), (377, 385), (377, 387), (377, 388), (377, 389), (377, 390), (377, 398), (378, 384), (378, 385), (378, 387), (378, 388), (378, 389), (378, 390), (378, 398), (380, 387), (380, 388), (380, 389), (380, 390), (380, 398), (381, 387), (381, 388), (381, 389), (381, 390), (381, 398), (382, 388), (382, 389), (382, 390), (382, 398), (384, 390), (384, 398), (385, 398), (387, 398), (388, 398), (389, 398), (390, 398), (391, 398)]"
63,66,66,2,False,"[(29, 35)]","[(4, 4), (8, 8), (20, 20)]","[[(8, 8), (9, 9), (20, 20), (13, 13), (10, 10), (12, 12), (21, 21)], [(22, 22), (15, 15), (13, 13)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3250>"": ""int index = name.lastIndexOf('.');\nchar[] scannedID;\nif (index == -1) {\n\tscannedID = scannedIdentifier(name, sourceLevel, complianceLevel);\n}\n\tString type = name.substring(index + 1).trim();\n\tscannedID = scannedIdentifier(type, sourceLevel, complianceLevel);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac364c070>"": ""String type = name.substring(index + 1).trim();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e34f0>"": ""int index = name.lastIndexOf('.');"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db7730>"": ""String trimmed = name.trim();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac26e3f40>"": "" else {\nString pkg = name.substring(0, index).trim();\n""}",0,0,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/core/JavaConventions.java,validateJavaTypeName,411,10.0,28.0,"[(440, 446)]","[(415, 415), (419, 419), (431, 431)]","[[(419, 419), (420, 420), (431, 431), (424, 424), (421, 421), (423, 423), (432, 432)], [(433, 433), (426, 426), (424, 424)]]","[(412, 418), (412, 419), (412, 420), (412, 433), (415, 433), (416, 433), (419, 433), (419, 449), (420, 433), (420, 449), (421, 433), (421, 449), (425, 431), (425, 432), (426, 432), (435, 449), (436, 442), (436, 445), (436, 446), (437, 445), (437, 446), (440, 446)]"
64,67,67,1,False,[],"[(6, 6), (8, 8), (7, 7)]","[[(1, 1), (27, 27), (0, 0)], [(10, 10), (19, 19), (13, 13)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb040>"": ""Object source = evt.getSource();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db7670>"": ""{\n    String property = evt.getPropertyName();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bbf40>"": ""State oldState = (State)evt.getOldValue();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0db7f70>"": ""{\n    AXIDocument doc = model.getRoot();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac28bb5b0>"": ""State newState = (State)evt.getNewValue();""}",0,0,0,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/xml.axi/test/unit/src/org/netbeans/modules/xml/axi/sync/StateChangeTest.java,propertyChange,142,4.0,22.0,[],"[(148, 148), (150, 150), (149, 149)]","[[(143, 143), (169, 169), (142, 142)], [(152, 152), (161, 161), (155, 155)]]","[(143, 149), (143, 150), (143, 151), (143, 161), (144, 150), (144, 151), (144, 161), (148, 161), (148, 168), (149, 161), (149, 168), (150, 161), (150, 168), (151, 161), (151, 168), (152, 161), (152, 168), (153, 159), (153, 160), (154, 160)]"
65,68,68,1,False,[],[],"[[(1, 1), (21, 21), (0, 0)], [(21, 21), (0, 0)], [(1, 1), (21, 21), (2, 2), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac0a66880>"": ""{\n    File myFile = new File(dataRootDir + \""/SvnWcParser/file-copied1/testapp/AnotherMain.java\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0a66c40>"": ""public void testGetSingleStatusFileCopied1() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0a661f0>"": ""{\n    File myFile = new File(dataRootDir + \""/SvnWcParser/file-copied1/testapp/AnotherMain.java\"");\n    ISVNStatus parsedStatus = svnWcParser.getSingleStatus(myFile);\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/subversion/test/unit/src/org/netbeans/modules/subversion/client/parser/SvnWcParserTest.java,testGetSingleStatusFileCopied1,420,1.0,21.0,[],[],"[[(421, 421), (441, 441), (420, 420)], [(441, 441), (420, 420)], [(421, 421), (441, 441), (422, 422), (420, 420)]]","[(421, 427), (421, 428), (421, 429), (421, 430), (421, 431), (421, 432), (421, 433), (421, 434), (421, 435), (421, 436), (422, 428), (422, 429), (422, 430), (422, 431), (422, 432), (422, 433), (422, 434), (422, 435), (422, 436), (422, 437), (423, 429), (423, 430), (423, 431), (423, 432), (423, 433), (423, 434), (423, 435), (423, 436), (423, 437), (423, 438), (424, 430), (424, 431), (424, 432), (424, 433), (424, 434), (424, 435), (424, 436), (424, 437), (424, 438), (424, 439), (425, 431), (425, 432), (425, 433), (425, 434), (425, 435), (425, 436), (425, 437), (425, 438), (425, 439), (425, 440), (426, 432), (426, 433), (426, 434), (426, 435), (426, 436), (426, 437), (426, 438), (426, 439), (426, 440), (427, 433), (427, 434), (427, 435), (427, 436), (427, 437), (427, 438), (427, 439), (427, 440), (428, 434), (428, 435), (428, 436), (428, 437), (428, 438), (428, 439), (428, 440), (429, 435), (429, 436), (429, 437), (429, 438), (429, 439), (429, 440), (430, 436), (430, 437), (430, 438), (430, 439), (430, 440), (431, 437), (431, 438), (431, 439), (431, 440), (432, 438), (432, 439), (432, 440), (433, 439), (433, 440), (434, 440)]"
66,69,69,2,False,"[(84, 92)]","[(7, 7)]","[[(76, 76), (69, 69), (71, 71), (68, 68), (52, 52), (65, 65), (45, 45), (39, 39), (67, 67), (66, 66), (56, 56)], [(8, 8), (13, 13), (7, 7), (9, 9)], [(76, 76), (69, 69), (71, 71), (84, 84), (68, 68), (52, 52), (65, 65), (45, 45), (20, 20), (39, 39), (19, 19), (21, 21), (67, 67), (18, 18), (66, 66), (56, 56)], [(69, 69), (65, 65), (67, 67), (66, 66)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac00e5c70>"": ""TypeQualifierAnnotation tqa;\ntqa = getDirectTypeQualifierAnnotation(xmethod, parameter, typeQualifierValue);\nif (tqa == null && !xmethod.isStatic() \t&& !xmethod.isPrivate() && !xmethod.getName().equals(\""<init>\"")) {\n\ttqa = getInheritedTypeQualifierAnnotation(xmethod, parameter, typeQualifierValue);\nboolean overriddenMethod = false;\nif (tqa == TypeQualifierAnnotation.OVERRIDES_BUT_NO_ANNOTATION) {\n\toverriddenMethod = true;\n\ttqa = null;\n}\nif (tqa == null) {\n\ttqa = getDefaultTypeQualifierAnnotationForParameters(xmethod, typeQualifierValue, overriddenMethod);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac00d2af0>"": ""Map<TypeQualifierValue, DualKeyHashMap<XMethod, Integer, TypeQualifierAnnotation>> effectiveParameterAnnotations = getEffectiveParameterAnnotations();\nDualKeyHashMap<XMethod, Integer, TypeQualifierAnnotation> map = effectiveParameterAnnotations.get(typeQualifierValue);\nif (map == null) {\n\tmap = new DualKeyHashMap<XMethod, Integer, TypeQualifierAnnotation>();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac00d0d30>"": ""Map<TypeQualifierValue, DualKeyHashMap<XMethod, Integer, TypeQualifierAnnotation>> effectiveParameterAnnotations = getEffectiveParameterAnnotations();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac00d2f70>"": ""TypeQualifierAnnotation result;\nif (map.containsKey(xmethod, parameter)) {\n\tresult = map.get(xmethod, parameter);\n}\n\tTypeQualifierAnnotation tqa;\n\ttqa = getDirectTypeQualifierAnnotation(xmethod, parameter, typeQualifierValue);\n\tif (tqa == null && !xmethod.isStatic() \t&& !xmethod.isPrivate() && !xmethod.getName().equals(\""<init>\"")) {\n\t\ttqa = getInheritedTypeQualifierAnnotation(xmethod, parameter, typeQualifierValue);\n\tboolean overriddenMethod = false;\n\tif (tqa == TypeQualifierAnnotation.OVERRIDES_BUT_NO_ANNOTATION) {\n\t\toverriddenMethod = true;\n\t\ttqa = null;\n\t}\n\tif (tqa == null) {\n\t\ttqa = getDefaultTypeQualifierAnnotationForParameters(xmethod, typeQualifierValue, overriddenMethod);\n\tresult = tqa;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac008cd90>"": ""boolean overriddenMethod = false;\nif (tqa == TypeQualifierAnnotation.OVERRIDES_BUT_NO_ANNOTATION) {\n\toverriddenMethod = true;\n}""}",0,0,0,21,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/findbugs/findbugs-1.3.9/src/findbugs-1.3.9/src/java/edu/umd/cs/findbugs/ba/jsr305/TypeQualifierApplications.java,computeEffectiveTypeQualifierAnnotation,523,13.0,26.0,"[(607, 615)]","[(530, 530)]","[[(599, 599), (592, 592), (594, 594), (591, 591), (575, 575), (588, 588), (568, 568), (562, 562), (590, 590), (589, 589), (579, 579)], [(531, 531), (536, 536), (530, 530), (532, 532)], [(599, 599), (592, 592), (594, 594), (607, 607), (591, 591), (575, 575), (588, 588), (568, 568), (543, 543), (562, 562), (542, 542), (544, 544), (590, 590), (541, 541), (589, 589), (579, 579)], [(592, 592), (588, 588), (590, 590), (589, 589)]]","[(525, 531), (525, 532), (526, 532), (531, 570), (532, 570), (534, 570), (534, 572), (534, 573), (537, 544), (537, 545), (537, 547), (537, 551), (537, 553), (537, 557), (537, 558), (537, 561), (537, 563), (537, 564), (537, 565), (537, 568), (541, 547), (541, 551), (541, 553), (541, 557), (541, 558), (541, 561), (541, 563), (541, 564), (541, 565), (541, 568), (542, 551), (542, 553), (542, 557), (542, 558), (542, 561), (542, 563), (542, 564), (542, 565), (542, 568), (544, 551), (544, 553), (544, 557), (544, 558), (544, 561), (544, 563), (544, 564), (544, 565), (544, 568), (545, 551), (545, 553), (545, 557), (545, 558), (545, 561), (545, 563), (545, 564), (545, 565), (545, 568), (547, 553), (547, 557), (547, 558), (547, 561), (547, 563), (547, 564), (547, 565), (547, 568), (548, 557), (548, 558), (548, 561), (548, 563), (548, 564), (548, 565), (548, 568), (553, 561), (553, 563), (553, 564), (553, 565), (553, 568), (554, 561), (554, 563), (554, 564), (554, 565), (554, 568), (558, 564), (558, 565), (558, 568), (559, 565), (559, 568)]"
67,70,70,2,False,[],[],"[[(45, 45), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ac0513fa0>"": ""public void testMalformedManifest() throws Exception {\n}""}",0,0,11,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/apisupport.project/test/unit/src/org/netbeans/modules/apisupport/project/api/EditableManifestTest.java,testMalformedManifest,100,12.0,34.0,[],[],"[[(145, 145), (100, 100)]]","[(101, 108), (101, 112), (101, 116), (101, 120), (101, 124), (101, 128), (101, 132), (101, 136), (105, 112), (105, 116), (105, 120), (105, 124), (105, 128), (105, 132), (105, 136), (105, 140), (109, 116), (109, 120), (109, 124), (109, 128), (109, 132), (109, 136), (109, 140), (109, 144), (113, 120), (113, 124), (113, 128), (113, 132), (113, 136), (113, 140), (113, 144), (117, 124), (117, 128), (117, 132), (117, 136), (117, 140), (117, 144), (121, 128), (121, 132), (121, 136), (121, 140), (121, 144), (125, 132), (125, 136), (125, 140), (125, 144), (129, 136), (129, 140), (129, 144), (133, 140), (133, 144), (137, 144)]"
68,71,71,2,False,[],[],"[[(39, 39), (2, 2), (0, 0)], [(4, 4), (0, 0), (1, 1), (39, 39), (3, 3), (37, 37)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abfe94940>"": ""{\n    StringBuffer n = new StringBuffer();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abfe94760>"": ""{\n    char c;\n    for (int i = 0; i < text.length(); i++) {\n        c = text.charAt(i);\n    }\n}""}",2,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/cnd.antlr/src/org/netbeans/modules/cnd/antlr/BaseAST.java,encode,407,7.0,25.0,[],[],"[[(446, 446), (409, 409), (407, 407)], [(411, 411), (407, 407), (408, 408), (446, 446), (410, 410), (444, 444)]]",
69,72,72,2,False,"[(16, 22)]","[(13, 13)]","[[(17, 17), (16, 16), (22, 22)], [(2, 2), (35, 35), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abfe94a00>"": ""{\n    final java.util.Calendar cal = java.util.Calendar.getInstance();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf9469a0>"": ""{\n    File f = getFile();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf950160>"": ""long stamp = f.lastModified();""}",0,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/utilities/src/org/netbeans/modules/search/MatchingObject.java,getInvalidityStatus,526,7.0,24.0,"[(542, 548)]","[(539, 539)]","[[(543, 543), (542, 542), (548, 548)], [(528, 528), (561, 561), (526, 526)]]","[(527, 537), (527, 537), (527, 539), (527, 539), (527, 550), (527, 550), (527, 554), (527, 554), (528, 537), (528, 539), (528, 550), (528, 554), (529, 537), (529, 539), (529, 550), (529, 554), (534, 550), (534, 554), (534, 558), (534, 560), (539, 550), (539, 554), (539, 558), (539, 560), (540, 550), (540, 554), (540, 558), (540, 560), (541, 548), (541, 549), (542, 548), (542, 549), (552, 558), (552, 560)]"
70,73,73,2,False,[],[],"[[(4, 4), (5, 5), (3, 3), (2, 2), (40, 40)], [(37, 37), (12, 12), (14, 14)], [(39, 39), (5, 5), (7, 7)], [(10, 10), (38, 38), (9, 9)], [(19, 19), (18, 18), (35, 35)], [(41, 41), (1, 1), (0, 0)], [(26, 26), (34, 34), (24, 24)], [(17, 17), (36, 36), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abf8736a0>"": ""while (atoms.hasNext()) {\n\tIAtom atomi = atoms.next();\n\tif(reactant.getConnectedSingleElectronsCount(atomi) == 1 &&\n\t\t\tatomi.getFormalCharge() == 1)\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac05134c0>"": ""{\nIAtom atomj = bondi.getConnectedAtom(atomi);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0513100>"": ""{\n\tIterator<IBond> bondis = reactant.getConnectedBondsList(atomi).iterator();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ac0513910>"": ""{\n          IBond bondi = bondis.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946700>"": ""{\n          IBond bondj = bondjs.next();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf873b50>"": ""{\n\tIterator<IAtom> atoms = reactant.atoms().iterator();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf946d60>"": ""{\n\tIAtom atomk = bondj.getConnectedAtom(atomj);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf9467c0>"": ""{\nIterator<IBond> bondjs = reactant.getConnectedBondsList(atomj).iterator();\n""}",0,3,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jchempaint/jchempaint-3.0.1/src/cdk/src/main/org/openscience/cdk/reaction/type/RadicalChargeSiteInitiationHReaction.java,setActiveCenters,202,12.0,24.0,[],[],"[[(206, 206), (207, 207), (205, 205), (204, 204), (242, 242)], [(239, 239), (214, 214), (216, 216)], [(241, 241), (207, 207), (209, 209)], [(212, 212), (240, 240), (211, 211)], [(221, 221), (220, 220), (237, 237)], [(243, 243), (203, 203), (202, 202)], [(228, 228), (236, 236), (226, 226)], [(219, 219), (238, 238), (217, 217)]]","[(209, 240), (211, 240), (212, 239), (214, 239), (216, 238), (217, 238), (219, 237), (220, 237), (228, 235), (229, 235)]"
71,74,74,1,False,"[(7, 17), (10, 17), (26, 33), (38, 56)]",[],"[[(72, 72), (27, 27), (0, 0)], [(72, 72), (11, 11), (0, 0)], [(72, 72), (38, 38), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abf2170d0>"": ""{\n    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf8736d0>"": ""{\n    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abf217970>"": ""{\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());\n}""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/form/test/unit/src/org/netbeans/modules/form/layoutdesign/ALT_Bug66919.java,initComponents,16,1.0,25.0,"[(23, 33), (26, 33), (42, 49), (54, 72)]",[],"[[(88, 88), (43, 43), (16, 16)], [(88, 88), (27, 27), (16, 16)], [(88, 88), (54, 54), (16, 16)]]","[(17, 23), (17, 24), (17, 26), (17, 27), (17, 28), (17, 32), (17, 36), (17, 38), (17, 40), (17, 42), (17, 43), (17, 44), (17, 48), (17, 52), (17, 54), (17, 55), (17, 71), (18, 24), (18, 26), (18, 27), (18, 28), (18, 32), (18, 36), (18, 38), (18, 40), (18, 42), (18, 43), (18, 44), (18, 48), (18, 52), (18, 54), (18, 55), (18, 71), (19, 26), (19, 27), (19, 28), (19, 32), (19, 36), (19, 38), (19, 40), (19, 42), (19, 43), (19, 44), (19, 48), (19, 52), (19, 54), (19, 55), (19, 71), (20, 26), (20, 27), (20, 28), (20, 32), (20, 36), (20, 38), (20, 40), (20, 42), (20, 43), (20, 44), (20, 48), (20, 52), (20, 54), (20, 55), (20, 71), (21, 27), (21, 28), (21, 32), (21, 36), (21, 38), (21, 40), (21, 42), (21, 43), (21, 44), (21, 48), (21, 52), (21, 54), (21, 55), (21, 71), (23, 32), (23, 36), (23, 38), (23, 40), (23, 42), (23, 43), (23, 44), (23, 48), (23, 52), (23, 54), (23, 55), (23, 71), (24, 32), (24, 36), (24, 38), (24, 40), (24, 42), (24, 43), (24, 44), (24, 48), (24, 52), (24, 54), (24, 55), (24, 71), (26, 32), (26, 36), (26, 38), (26, 40), (26, 42), (26, 43), (26, 44), (26, 48), (26, 52), (26, 54), (26, 55), (26, 71), (27, 36), (27, 38), (27, 40), (27, 42), (27, 43), (27, 44), (27, 48), (27, 52), (27, 54), (27, 55), (27, 71), (28, 36), (28, 38), (28, 40), (28, 42), (28, 43), (28, 44), (28, 48), (28, 52), (28, 54), (28, 55), (28, 71), (29, 36), (29, 38), (29, 40), (29, 42), (29, 43), (29, 44), (29, 48), (29, 52), (29, 54), (29, 55), (29, 71), (33, 40), (33, 42), (33, 43), (33, 44), (33, 48), (33, 52), (33, 54), (33, 55), (33, 71), (33, 86), (33, 87), (38, 44), (38, 48), (38, 52), (38, 54), (38, 55), (38, 71), (38, 86), (38, 87), (40, 48), (40, 52), (40, 54), (40, 55), (40, 71), (40, 86), (40, 87), (42, 48), (42, 52), (42, 54), (42, 55), (42, 71), (42, 86), (42, 87), (43, 52), (43, 54), (43, 55), (43, 71), (43, 86), (43, 87), (44, 52), (44, 54), (44, 55), (44, 71), (44, 86), (44, 87), (45, 52), (45, 54), (45, 55), (45, 71), (45, 86), (45, 87), (49, 55), (49, 71), (49, 86), (49, 87), (54, 71), (54, 86), (54, 87), (55, 71), (55, 86), (55, 87), (56, 71), (56, 86), (56, 87), (72, 86), (72, 87)]"
72,75,75,1,False,"[(8, 14)]",[],"[[(8, 8), (5, 5), (0, 0), (38, 38), (15, 15)], [(28, 28), (21, 21), (15, 15)], [(8, 8), (5, 5), (0, 0), (38, 38), (12, 12), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abef5b280>"": ""{\n    try {\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef5b4c0>"": ""catch (javax.xml.parsers.ParserConfigurationException ex) {\n} catch (SAXException ex) {\n} catch (IOException ex"", ""<program_slicing.graph.statement.Statement object at 0x7f4abef5b3d0>"": ""{\n    try {\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        SAXParser saxParser = factory.newSAXParser();\n    }\n}""}",0,0,1,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/columba/columba-1.0/src/columba-1.0-src/src/columba/core/org/columba/core/xml/XmlIO.java,load,166,4.0,23.0,"[(174, 180)]",[],"[[(174, 174), (171, 171), (166, 166), (204, 204), (181, 181)], [(194, 194), (187, 187), (181, 181)], [(174, 174), (171, 171), (166, 166), (204, 204), (178, 178), (181, 181)]]","[(171, 200), (172, 178), (172, 180), (173, 180), (174, 180)]"
73,76,76,2,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/gt2/gt2-2.7-M3/src/geotools-2.7-M3/modules/extension/brewer/src/main/java/org/geotools/brewer/color/ColorBrewer.java,loadPalettes,277,6.0,23.0,[],[],[],"[(278, 291), (278, 295), (278, 297), (278, 298), (278, 299), (278, 301), (282, 291), (282, 291), (293, 299), (293, 301), (293, 309), (293, 311), (297, 309), (297, 311), (298, 309), (298, 311), (299, 309), (299, 311), (301, 309), (301, 311), (303, 309), (303, 311)]"
74,77,77,2,False,"[(2, 15), (19, 32), (20, 29), (21, 28)]",[],[],{},0,0,0,6,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jface/text/contentassist/ContextInformationPopup.java,internalShowContextFrame,348,7.0,21.0,"[(350, 363), (367, 380), (368, 377), (369, 376)]",[],[],"[(350, 357), (350, 359), (350, 361), (350, 363), (350, 364), (352, 359), (352, 361), (352, 363), (352, 364), (359, 383), (361, 383), (362, 383), (364, 383), (366, 383), (367, 380), (368, 377), (368, 378), (368, 379), (369, 375), (369, 376)]"
75,78,78,2,False,"[(1, 10)]",[],[],{},0,0,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/trove/trove-2.1.0/src/trove-2.1.0/src/gnu/trove/TLinkedList.java,remove,403,7.0,29.0,"[(404, 413)]",[],[],"[(405, 433), (406, 433), (408, 433), (408, 435), (408, 435), (408, 436), (409, 433), (409, 435), (409, 435), (409, 436), (411, 417), (411, 433), (411, 435), (411, 435), (411, 436), (418, 433), (418, 433), (423, 433), (423, 433), (423, 433)]"
76,79,79,2,False,[],[],"[[(33, 33), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe3e9cd0>"": ""{\r\n   String token = forToken.image;\n}""}",0,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/jrefactory/jrefactory-2.9.19/src/src/org/acm/seguin/pretty/JavadocDescriptionPrinter.java,endMode,242,7.0,26.0,[],[],"[[(275, 275), (243, 243), (242, 242)]]","[(243, 254), (243, 259), (243, 262), (243, 267), (244, 254), (244, 259), (244, 262), (244, 267), (249, 259), (249, 262), (249, 267), (249, 272), (249, 274), (255, 262), (255, 267), (255, 272), (255, 274), (260, 267), (260, 272), (260, 274), (263, 272), (263, 274), (268, 274)]"
77,80,80,1,False,"[(6, 12), (17, 28), (50, 60), (39, 47)]",[],"[[(56, 56), (54, 54), (55, 55), (57, 57)], [(4, 4), (17, 17), (20, 20), (29, 29), (19, 19), (18, 18)], [(61, 61), (1, 1), (0, 0)], [(61, 61), (2, 2), (0, 0)], [(4, 4), (8, 8), (7, 7), (9, 9), (29, 29), (6, 6)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abc741130>"": ""final int processingInstruction =\r\n    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,\r\n\t\t\t      \""processingInstruction\"", \r\n\t\t\t      \""(\"" + STRING_SIG + STRING_SIG + \"")V\"");"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe96a550>"": ""{\r\n    final int check = cpg.addMethodref(BASIS_LIBRARY_CLASS, \""checkNCName\"",\r\n                        \""(\""\r\n                        +STRING_SIG\r\n                        +\"")V\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e89d0>"": ""{\r\nfinal ConstantPoolGen cpg = classGen.getConstantPool();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8fa0>"": ""{\r\nfinal InstructionList il = methodGen.getInstructionList();\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e93d0>"": ""{\r\n    LocalVariableGen nameValue =\r\n            methodGen.addLocalVariable2(\""nameValue\"",\r\n                                        Util.getJCRefType(STRING_SIG),\r\n                                        null);\n}""}",0,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/xalan/xalan-2.7.1/src/xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/ProcessingInstruction.java,translate,78,2.0,26.0,"[(84, 90), (95, 106), (128, 138), (117, 125)]",[],"[[(134, 134), (132, 132), (133, 133), (135, 135)], [(82, 82), (95, 95), (98, 98), (107, 107), (97, 97), (96, 96)], [(139, 139), (79, 79), (78, 78)], [(139, 139), (80, 80), (78, 78)], [(82, 82), (86, 86), (85, 85), (87, 87), (107, 107), (84, 84)]]","[(79, 115), (79, 117), (79, 120), (79, 121), (79, 122), (79, 124), (79, 125), (80, 115), (80, 117), (80, 120), (80, 121), (80, 122), (80, 124), (80, 125), (80, 127), (82, 115), (82, 117), (82, 120), (82, 121), (82, 122), (82, 124), (82, 125), (82, 127), (83, 89), (83, 90), (83, 91), (83, 92), (83, 94), (83, 98), (83, 99), (83, 101), (83, 102), (83, 103), (83, 103), (83, 105), (83, 106), (84, 90), (84, 91), (84, 92), (84, 94), (84, 98), (84, 99), (84, 101), (84, 102), (84, 103), (84, 103), (84, 105), (84, 106), (89, 98), (89, 99), (89, 101), (89, 102), (89, 103), (89, 103), (89, 105), (89, 106), (90, 98), (90, 99), (90, 101), (90, 102), (90, 103), (90, 103), (90, 105), (90, 106), (91, 98), (91, 99), (91, 101), (91, 102), (91, 103), (91, 103), (91, 105), (91, 106), (92, 98), (92, 99), (92, 101), (92, 102), (92, 103), (92, 103), (92, 105), (92, 106), (94, 101), (94, 102), (94, 103), (94, 103), (94, 105), (94, 106), (95, 101), (95, 102), (95, 103), (95, 103), (95, 105), (95, 106), (99, 105), (99, 106), (117, 124), (117, 125), (117, 127), (117, 130), (117, 131), (117, 135), (117, 136), (117, 137), (117, 138), (118, 124), (118, 125), (118, 127), (118, 130), (118, 131), (118, 135), (118, 136), (118, 137), (118, 138), (121, 127), (121, 130), (121, 131), (121, 135), (121, 136), (121, 137), (121, 138), (122, 130), (122, 131), (122, 135), (122, 136), (122, 137), (122, 138), (124, 130), (124, 131), (124, 135), (124, 136), (124, 137), (124, 138), (125, 131), (125, 135), (125, 136), (125, 137), (125, 138), (127, 135), (127, 136), (127, 137), (127, 138), (128, 135), (128, 136), (128, 137), (128, 138), (131, 137), (131, 138), (132, 138)]"
78,81,81,1,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/castor/castor-1.3.1/src/castor-1.3.1/cpa/src/test/java/org/castor/cpa/persistence/sql/query/TestQueryConstants.java,testConstants,28,1.0,23.0,[],[],[],"[(29, 35), (29, 36), (29, 37), (29, 38), (29, 39), (29, 40), (29, 41), (29, 42), (29, 43), (29, 44), (29, 45), (29, 46), (30, 36), (30, 37), (30, 38), (30, 39), (30, 40), (30, 41), (30, 42), (30, 43), (30, 44), (30, 45), (30, 46), (30, 47), (31, 37), (31, 38), (31, 39), (31, 40), (31, 41), (31, 42), (31, 43), (31, 44), (31, 45), (31, 46), (31, 47), (31, 48), (32, 38), (32, 39), (32, 40), (32, 41), (32, 42), (32, 43), (32, 44), (32, 45), (32, 46), (32, 47), (32, 48), (32, 49), (33, 39), (33, 40), (33, 41), (33, 42), (33, 43), (33, 44), (33, 45), (33, 46), (33, 47), (33, 48), (33, 49), (33, 50), (34, 40), (34, 41), (34, 42), (34, 43), (34, 44), (34, 45), (34, 46), (34, 47), (34, 48), (34, 49), (34, 50), (35, 41), (35, 42), (35, 43), (35, 44), (35, 45), (35, 46), (35, 47), (35, 48), (35, 49), (35, 50), (36, 42), (36, 43), (36, 44), (36, 45), (36, 46), (36, 47), (36, 48), (36, 49), (36, 50), (37, 43), (37, 44), (37, 45), (37, 46), (37, 47), (37, 48), (37, 49), (37, 50), (38, 44), (38, 45), (38, 46), (38, 47), (38, 48), (38, 49), (38, 50), (39, 45), (39, 46), (39, 47), (39, 48), (39, 49), (39, 50), (40, 46), (40, 47), (40, 48), (40, 49), (40, 50), (41, 47), (41, 48), (41, 49), (41, 50), (42, 48), (42, 49), (42, 50), (43, 49), (43, 50), (44, 50)]"
79,82,82,2,False,"[(11, 18), (28, 34)]","[(5, 5)]","[[(26, 26), (5, 5), (9, 9)], [(5, 5), (11, 11), (26, 26)], [(5, 5), (7, 7), (26, 26)], [(12, 12), (18, 18), (11, 11)], [(6, 6), (5, 5), (26, 26)], [(17, 17), (5, 5), (13, 13), (26, 26), (10, 10), (12, 12), (18, 18), (6, 6), (11, 11), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abcb08610>"": ""{\nIPreferenceStore store= JavaPlugin.getDefault().getPreferenceStore();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25610>"": ""for (int i= 0; i < propertyKeys.length; i++) {"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb082b0>"": ""{\n\tfor (int j= 0; j < fFilterActions.length; j++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb08b20>"": ""i++) {\nboolean set= propertyValues[i];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb08340>"": ""j++) {\nint currProperty= fFilterActions[j].getFilterProperty();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb08b50>"": ""i++) {\nint filterProperty= propertyKeys[i];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb08790>"": ""i++) {\nint filterProperty= propertyKeys[i];\nboolean found= false;\nfor (int j= 0; j < fFilterActions.length; j++) {\n\tint currProperty= fFilterActions[j].getFilterProperty();\n\tif (currProperty == filterProperty) {\n\t\tfound= true;\n\t}\n}\n""}",4,0,0,5,1,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/ui/actions/MemberFilterActionGroup.java,setMemberFilters,218,8.0,24.0,"[(229, 236), (246, 252)]","[(223, 223)]","[[(244, 244), (223, 223), (227, 227)], [(223, 223), (229, 229), (244, 244)], [(223, 223), (225, 225), (244, 244)], [(230, 230), (236, 236), (229, 229)], [(224, 224), (223, 223), (244, 244)], [(235, 235), (223, 223), (231, 231), (244, 244), (228, 228), (230, 230), (236, 236), (224, 224), (229, 229), (233, 233)]]","[(219, 244), (221, 244), (223, 244), (224, 236), (224, 243), (225, 236), (225, 243), (227, 236), (227, 243), (228, 236), (228, 243), (229, 236), (229, 243), (237, 243), (245, 253), (246, 252)]"
80,83,83,2,False,[],[],"[[(1, 1), (36, 36), (0, 0)], [(4, 4), (5, 5), (0, 0), (1, 1), (36, 36), (26, 26), (35, 35), (10, 10), (3, 3), (21, 21), (2, 2), (6, 6), (31, 31), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8190>"": ""{\n\tIFileTransferProtocolToFactoryMapper mapper = getProtocolToFactoryMapper();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8310>"": ""{\nIFileTransferProtocolToFactoryMapper mapper = getProtocolToFactoryMapper();\nif (mapper != null) {\n\t// remove http\n\t// Remove browse provider\n\tString providerId = mapper.getBrowseFileTransferFactoryId(HTTP);\n\tif (providerId != null) {\n\tproviderId = mapper.getRetrieveFileTransferFactoryId(HTTP);\n\tproviderId = mapper.getSendFileTransferFactoryId(HTTP);\n\tproviderId = mapper.getBrowseFileTransferFactoryId(HTTPS);\n\tproviderId = mapper.getRetrieveFileTransferFactoryId(HTTPS);\n\tproviderId = mapper.getSendFileTransferFactoryId(HTTPS);\n}\n""}",0,0,0,7,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/equinox/internal/p2/transport/ecf/Activator.java,useJREHttpClient,85,8.0,21.0,[],[],"[[(86, 86), (121, 121), (85, 85)], [(89, 89), (90, 90), (85, 85), (86, 86), (121, 121), (111, 111), (120, 120), (95, 95), (88, 88), (106, 106), (87, 87), (91, 91), (116, 116), (100, 100)]]","[(88, 94), (88, 95), (88, 98), (88, 99), (88, 100), (88, 103), (88, 104), (88, 105), (88, 106), (88, 109), (88, 110), (88, 111), (88, 114), (88, 115), (89, 95), (89, 98), (89, 99), (89, 100), (89, 103), (89, 104), (89, 105), (89, 106), (89, 109), (89, 110), (89, 111), (89, 114), (89, 115), (89, 116), (90, 98), (90, 99), (90, 100), (90, 103), (90, 104), (90, 105), (90, 106), (90, 109), (90, 110), (90, 111), (90, 114), (90, 115), (90, 116), (91, 98), (91, 99), (91, 100), (91, 103), (91, 104), (91, 105), (91, 106), (91, 109), (91, 110), (91, 111), (91, 114), (91, 115), (91, 116), (94, 100), (94, 103), (94, 104), (94, 105), (94, 106), (94, 109), (94, 110), (94, 111), (94, 114), (94, 115), (94, 116), (94, 119), (95, 103), (95, 104), (95, 105), (95, 106), (95, 109), (95, 110), (95, 111), (95, 114), (95, 115), (95, 116), (95, 119), (96, 103), (96, 104), (96, 105), (96, 106), (96, 109), (96, 110), (96, 111), (96, 114), (96, 115), (96, 116), (96, 119), (99, 105), (99, 106), (99, 109), (99, 110), (99, 111), (99, 114), (99, 115), (99, 116), (99, 119), (100, 106), (100, 109), (100, 110), (100, 111), (100, 114), (100, 115), (100, 116), (100, 119), (101, 109), (101, 110), (101, 111), (101, 114), (101, 115), (101, 116), (101, 119), (104, 110), (104, 111), (104, 114), (104, 115), (104, 116), (104, 119), (105, 111), (105, 114), (105, 115), (105, 116), (105, 119), (106, 114), (106, 115), (106, 116), (106, 119), (107, 114), (107, 115), (107, 116), (107, 119), (110, 116), (110, 119), (111, 119), (112, 119)]"
81,84,84,1,False,"[(21, 26)]","[(23, 23)]","[[(33, 33), (1, 1), (0, 0)], [(8, 8), (14, 14), (0, 0), (9, 9), (1, 1), (20, 20), (13, 13), (33, 33), (3, 3), (12, 12), (18, 18), (2, 2), (15, 15)], [(8, 8), (14, 14), (0, 0), (9, 9), (1, 1), (13, 13), (33, 33), (3, 3), (12, 12), (18, 18), (2, 2), (15, 15)], [(21, 21), (22, 22), (26, 26)], [(33, 33), (19, 19), (0, 0)], [(14, 14), (0, 0), (13, 13), (12, 12), (33, 33)], [(8, 8), (14, 14), (16, 16), (0, 0), (9, 9), (1, 1), (13, 13), (33, 33), (3, 3), (12, 12), (2, 2), (15, 15)], [(33, 33), (0, 0)], [(8, 8), (0, 0), (9, 9), (1, 1), (3, 3), (2, 2), (33, 33)], [(33, 33), (5, 5), (0, 0)], [(14, 14), (0, 0), (13, 13), (33, 33), (12, 12), (15, 15)], [(33, 33), (13, 13), (0, 0)], [(0, 0), (1, 1), (3, 3), (2, 2), (33, 33)], [(8, 8), (0, 0), (1, 1), (3, 3), (2, 2), (33, 33)], [(33, 33), (12, 12), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abcb25400>"": ""{\n  Directory directory = newDirectory();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25610>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n  IndexReader reader = writer.getReader();\n  IndexSearcher is = newSearcher(reader);\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n  SpanQuery[] sqs = { stq1, stq2 };\n  SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n  TopDocs topDocs = is.search(snq, 1);\n  for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25220>"": ""final byte[] payload : payloads"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8c70>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n  IndexReader reader = writer.getReader();\n  IndexSearcher is = newSearcher(reader);\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n  SpanQuery[] sqs = { stq1, stq2 };\n  SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n  TopDocs topDocs = is.search(snq, 1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25880>"": ""{\n  Collection<byte[]> payloads = spans.getPayload();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8a90>"": ""{\n  Set<String> payloadSet = new HashSet<String>();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e94c0>"": ""{\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n  SpanQuery[] sqs = { stq1, stq2 };\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8ee0>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n  IndexReader reader = writer.getReader();\n  IndexSearcher is = newSearcher(reader);\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n  SpanQuery[] sqs = { stq1, stq2 };\n  SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n  Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25700>"": ""public void testShrinkToAfterShortestMatch2() throws IOException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e9520>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n  IndexReader reader = writer.getReader();\n  IndexSearcher is = newSearcher(reader);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8d75940>"": ""{\n  Document doc = new Document();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e8370>"": ""{\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n  SpanQuery[] sqs = { stq1, stq2 };\n  SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e9160>"": ""{\n  SpanTermQuery stq2 = new SpanTermQuery(new Term(\""content\"", \""k\""));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8d75970>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab8d75b80>"": ""{\n  Directory directory = newDirectory();\n  RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                   newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n  IndexReader reader = writer.getReader();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abe3e91f0>"": ""{\n  SpanTermQuery stq1 = new SpanTermQuery(new Term(\""content\"", \""a\""));\n}""}",3,1,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/lucene/lucene-4.3.0/src/lucene-4.3.0/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java,testShrinkToAfterShortestMatch2,290,4.0,27.0,"[(311, 316)]","[(313, 313)]","[[(323, 323), (291, 291), (290, 290)], [(298, 298), (304, 304), (290, 290), (299, 299), (291, 291), (310, 310), (303, 303), (323, 323), (293, 293), (302, 302), (308, 308), (292, 292), (305, 305)], [(298, 298), (304, 304), (290, 290), (299, 299), (291, 291), (303, 303), (323, 323), (293, 293), (302, 302), (308, 308), (292, 292), (305, 305)], [(311, 311), (312, 312), (316, 316)], [(323, 323), (309, 309), (290, 290)], [(304, 304), (290, 290), (303, 303), (302, 302), (323, 323)], [(298, 298), (304, 304), (306, 306), (290, 290), (299, 299), (291, 291), (303, 303), (323, 323), (293, 293), (302, 302), (292, 292), (305, 305)], [(323, 323), (290, 290)], [(298, 298), (290, 290), (299, 299), (291, 291), (293, 293), (292, 292), (323, 323)], [(323, 323), (295, 295), (290, 290)], [(304, 304), (290, 290), (303, 303), (323, 323), (302, 302), (305, 305)], [(323, 323), (303, 303), (290, 290)], [(290, 290), (291, 291), (293, 293), (292, 292), (323, 323)], [(298, 298), (290, 290), (291, 291), (293, 293), (292, 292), (323, 323)], [(323, 323), (302, 302), (290, 290)]]","[(291, 297), (291, 298), (291, 299), (291, 300), (291, 302), (291, 303), (291, 304), (291, 305), (291, 306), (291, 308), (291, 309), (292, 298), (292, 299), (292, 300), (292, 302), (292, 303), (292, 304), (292, 305), (292, 306), (292, 308), (292, 309), (292, 317), (295, 302), (295, 303), (295, 304), (295, 305), (295, 306), (295, 308), (295, 309), (295, 317), (295, 318), (295, 319), (295, 320), (296, 302), (296, 303), (296, 304), (296, 305), (296, 306), (296, 308), (296, 309), (296, 317), (296, 318), (296, 319), (296, 320), (296, 321), (297, 303), (297, 304), (297, 305), (297, 306), (297, 308), (297, 309), (297, 317), (297, 318), (297, 319), (297, 320), (297, 321), (297, 322), (298, 304), (298, 305), (298, 306), (298, 308), (298, 309), (298, 317), (298, 318), (298, 319), (298, 320), (298, 321), (298, 322), (299, 305), (299, 306), (299, 308), (299, 309), (299, 317), (299, 318), (299, 319), (299, 320), (299, 321), (299, 322), (300, 306), (300, 308), (300, 309), (300, 317), (300, 318), (300, 319), (300, 320), (300, 321), (300, 322), (302, 308), (302, 309), (302, 317), (302, 318), (302, 319), (302, 320), (302, 321), (302, 322), (303, 309), (303, 317), (303, 318), (303, 319), (303, 320), (303, 321), (303, 322), (304, 317), (304, 318), (304, 319), (304, 320), (304, 321), (304, 322), (305, 317), (305, 318), (305, 319), (305, 320), (305, 321), (305, 322), (306, 317), (306, 318), (306, 319), (306, 320), (306, 321), (306, 322), (308, 317), (308, 318), (308, 319), (308, 320), (308, 321), (308, 322), (309, 317), (309, 318), (309, 319), (309, 320), (309, 321), (309, 322), (310, 317), (310, 318), (310, 319), (310, 320), (310, 321), (310, 322)]"
82,85,85,1,False,"[(30, 40), (16, 27)]","[(34, 34), (31, 31), (36, 36)]","[[(17, 17), (16, 16), (0, 0), (1, 1), (25, 25), (20, 20), (10, 10), (19, 19), (42, 42), (11, 11), (24, 24)], [(16, 16), (0, 0), (1, 1), (10, 10), (19, 19), (42, 42), (11, 11), (24, 24)], [(30, 30), (42, 42), (0, 0)], [(1, 1), (42, 42), (0, 0)], [(0, 0), (1, 1), (10, 10), (11, 11), (42, 42)], [(36, 36), (38, 38)], [(42, 42), (0, 0)], [(10, 10), (1, 1), (42, 42), (0, 0)], [(0, 0), (1, 1), (10, 10), (12, 12), (42, 42)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4abcb25220>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\nSlideShow ppt = new SlideShow(hslf);\n      Slide[] slides = ppt.getSlides();\nPicture pict;\nPictureData pdata;\n      pict = (Picture)slides[6].getShapes()[13];\n      pdata = pict.getPictureData();\n      pict = (Picture)slides[7].getShapes()[13];\n      pdata = pict.getPictureData();\n  }"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25070>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\nSlideShow ppt = new SlideShow(hslf);\n      Slide[] slides = ppt.getSlides();\nPicture pict;\n      pict = (Picture)slides[6].getShapes()[13];\n      pict = (Picture)slides[7].getShapes()[13];\n  }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77bf880>"": ""int streamSize = out.size();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77bf490>"": ""{\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7785ca0>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\n  }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77852b0>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\nSlideShow ppt = new SlideShow(hslf);\n      Slide[] slides = ppt.getSlides();\n  }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77bfca0>"": ""PictureData data = PictureData.create(Picture.JPEG);\nint offset = hslf.addPicture(data);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77854f0>"": ""public void testZeroPictureLength() throws Exception {\n   }"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77bf910>"": ""PictureData data = PictureData.create(Picture.JPEG);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77bf340>"": ""for(PictureData p : pictures) p.write(out);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab77855e0>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\nSlideShow ppt = new SlideShow(hslf);\n  }"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb081f0>"": ""{\nHSLFSlideShow hslf = new HSLFSlideShow(slTests.openResourceAsStream(\""PictureLengthZero.ppt\""));\nSlideShow ppt = new SlideShow(hslf);\n      PictureData[] pictures = ppt.getPictureData();\n  }""}",1,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/poi/poi-3.6/src/poi-3.6/src/scratchpad/testcases/org/apache/poi/hslf/usermodel/TestPictures.java,testZeroPictureLength,389,2.0,31.0,"[(419, 429), (405, 416)]","[(423, 423), (420, 420), (425, 425)]","[[(406, 406), (405, 405), (389, 389), (390, 390), (414, 414), (409, 409), (399, 399), (408, 408), (431, 431), (400, 400), (413, 413)], [(405, 405), (389, 389), (390, 390), (399, 399), (408, 408), (431, 431), (400, 400), (413, 413)], [(419, 419), (431, 431), (389, 389)], [(390, 390), (431, 431), (389, 389)], [(389, 389), (390, 390), (399, 399), (400, 400), (431, 431)], [(425, 425), (427, 427)], [(431, 431), (389, 389)], [(399, 399), (390, 390), (431, 431), (389, 389)], [(389, 389), (390, 390), (399, 399), (401, 401), (431, 431)]]","[(390, 396), (390, 398), (390, 399), (390, 400), (390, 401), (390, 402), (390, 403), (390, 405), (390, 406), (390, 408), (390, 409), (390, 410), (390, 411), (390, 413), (390, 414), (390, 415), (390, 416), (390, 418), (390, 419), (390, 420), (390, 421), (392, 398), (392, 399), (392, 400), (392, 401), (392, 402), (392, 403), (392, 405), (392, 406), (392, 408), (392, 409), (392, 410), (392, 411), (392, 413), (392, 414), (392, 415), (392, 416), (392, 418), (392, 419), (392, 420), (392, 421), (392, 423), (393, 399), (393, 400), (393, 401), (393, 402), (393, 403), (393, 405), (393, 406), (393, 408), (393, 409), (393, 410), (393, 411), (393, 413), (393, 414), (393, 415), (393, 416), (393, 418), (393, 419), (393, 420), (393, 421), (393, 423), (393, 425), (394, 400), (394, 401), (394, 402), (394, 403), (394, 405), (394, 406), (394, 408), (394, 409), (394, 410), (394, 411), (394, 413), (394, 414), (394, 415), (394, 416), (394, 418), (394, 419), (394, 420), (394, 421), (394, 423), (394, 425), (394, 426), (395, 401), (395, 402), (395, 403), (395, 405), (395, 406), (395, 408), (395, 409), (395, 410), (395, 411), (395, 413), (395, 414), (395, 415), (395, 416), (395, 418), (395, 419), (395, 420), (395, 421), (395, 423), (395, 425), (395, 426), (395, 427), (396, 402), (396, 403), (396, 405), (396, 406), (396, 408), (396, 409), (396, 410), (396, 411), (396, 413), (396, 414), (396, 415), (396, 416), (396, 418), (396, 419), (396, 420), (396, 421), (396, 423), (396, 425), (396, 426), (396, 427), (396, 428), (398, 405), (398, 406), (398, 408), (398, 409), (398, 410), (398, 411), (398, 413), (398, 414), (398, 415), (398, 416), (398, 418), (398, 419), (398, 420), (398, 421), (398, 423), (398, 425), (398, 426), (398, 427), (398, 428), (398, 429), (399, 405), (399, 406), (399, 408), (399, 409), (399, 410), (399, 411), (399, 413), (399, 414), (399, 415), (399, 416), (399, 418), (399, 419), (399, 420), (399, 421), (399, 423), (399, 425), (399, 426), (399, 427), (399, 428), (399, 429), (400, 406), (400, 408), (400, 409), (400, 410), (400, 411), (400, 413), (400, 414), (400, 415), (400, 416), (400, 418), (400, 419), (400, 420), (400, 421), (400, 423), (400, 425), (400, 426), (400, 427), (400, 428), (400, 429), (401, 408), (401, 409), (401, 410), (401, 411), (401, 413), (401, 414), (401, 415), (401, 416), (401, 418), (401, 419), (401, 420), (401, 421), (401, 423), (401, 425), (401, 426), (401, 427), (401, 428), (401, 429), (402, 408), (402, 409), (402, 410), (402, 411), (402, 413), (402, 414), (402, 415), (402, 416), (402, 418), (402, 419), (402, 420), (402, 421), (402, 423), (402, 425), (402, 426), (402, 427), (402, 428), (402, 429), (403, 409), (403, 410), (403, 411), (403, 413), (403, 414), (403, 415), (403, 416), (403, 418), (403, 419), (403, 420), (403, 421), (403, 423), (403, 425), (403, 426), (403, 427), (403, 428), (403, 429), (405, 411), (405, 413), (405, 414), (405, 415), (405, 416), (405, 418), (405, 419), (405, 420), (405, 421), (405, 423), (405, 425), (405, 426), (405, 427), (405, 428), (405, 429), (406, 413), (406, 414), (406, 415), (406, 416), (406, 418), (406, 419), (406, 420), (406, 421), (406, 423), (406, 425), (406, 426), (406, 427), (406, 428), (406, 429), (408, 414), (408, 415), (408, 416), (408, 418), (408, 419), (408, 420), (408, 421), (408, 423), (408, 425), (408, 426), (408, 427), (408, 428), (408, 429), (409, 415), (409, 416), (409, 418), (409, 419), (409, 420), (409, 421), (409, 423), (409, 425), (409, 426), (409, 427), (409, 428), (409, 429), (410, 416), (410, 418), (410, 419), (410, 420), (410, 421), (410, 423), (410, 425), (410, 426), (410, 427), (410, 428), (410, 429), (411, 418), (411, 419), (411, 420), (411, 421), (411, 423), (411, 425), (411, 426), (411, 427), (411, 428), (411, 429), (413, 419), (413, 420), (413, 421), (413, 423), (413, 425), (413, 426), (413, 427), (413, 428), (413, 429), (414, 420), (414, 421), (414, 423), (414, 425), (414, 426), (414, 427), (414, 428), (414, 429), (415, 421), (415, 423), (415, 425), (415, 426), (415, 427), (415, 428), (415, 429), (416, 423), (416, 425), (416, 426), (416, 427), (416, 428), (416, 429), (418, 425), (418, 426), (418, 427), (418, 428), (418, 429), (419, 425), (419, 426), (419, 427), (419, 428), (419, 429), (420, 426), (420, 427), (420, 428), (420, 429), (421, 427), (421, 428), (421, 429), (423, 429)]"
83,86,86,1,False,"[(4, 19), (21, 30), (12, 19), (4, 10)]","[(21, 21)]","[[(12, 12), (31, 31), (0, 0)], [(19, 19), (14, 14), (13, 13)], [(2, 2), (31, 31), (0, 0)], [(25, 25), (22, 22), (29, 29)], [(23, 23), (22, 22), (29, 29)], [(4, 4), (31, 31), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab744ca30>"": ""{\n\tImage image= getMessageImage();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab744cc40>"": ""{\nLabel label= new Label(result, SWT.NULL);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab7401880>"": ""{\n\tComposite result= new Composite(parent, SWT.NONE);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb258e0>"": ""{\n\tGridData data= new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_BEGINNING);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4abcb25f40>"": ""{\n\tLabel messageLabel= new Label(result, SWT.WRAP);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab744c3d0>"": ""String message= getMessageString();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab74017f0>"": ""{\n\tGridLayout layout= new GridLayout();\n}""}",0,0,0,2,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/refactoring/MessageWizardPage.java,createControl,61,3.0,26.0,"[(65, 80), (82, 91), (73, 80), (65, 71)]","[(82, 82)]","[[(73, 73), (92, 92), (61, 61)], [(80, 80), (75, 75), (74, 74)], [(63, 63), (92, 92), (61, 61)], [(86, 86), (83, 83), (90, 90)], [(84, 84), (83, 83), (90, 90)], [(65, 65), (92, 92), (61, 61)]]","[(62, 68), (62, 69), (62, 70), (62, 71), (62, 73), (62, 80), (62, 82), (63, 69), (63, 70), (63, 71), (63, 73), (63, 80), (63, 82), (64, 70), (64, 71), (64, 73), (64, 80), (64, 82), (65, 71), (65, 73), (65, 80), (65, 82), (66, 73), (66, 80), (66, 82), (67, 73), (67, 80), (67, 82), (67, 90), (68, 80), (68, 82), (68, 90), (68, 91), (69, 80), (69, 82), (69, 90), (69, 91), (70, 80), (70, 82), (70, 90), (70, 91), (71, 80), (71, 82), (71, 90), (71, 91), (73, 80), (73, 82), (73, 90), (73, 91), (74, 80), (74, 82), (74, 90), (74, 91), (82, 90), (82, 91), (83, 90), (83, 91)]"
84,87,87,2,False,[],"[(19, 19)]","[[(8, 8), (5, 5), (9, 9), (13, 13), (3, 3), (2, 2), (11, 11)], [(21, 21), (22, 22), (24, 24)], [(5, 5), (7, 7), (9, 9), (13, 13), (3, 3), (12, 12), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab744cc10>"": ""final IRegion region= super.match(document, offset);"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab58780a0>"": ""char prevChar= document.getChar(Math.max(offset - 1, 0));\nchar currChar= (offset != document.getLength()) ? document.getChar(offset) : Character.MIN_VALUE;\nif (prevChar == '>' && currChar != '>') { //https://bugs.eclipse.org/bugs/show_bug.cgi?id=372516\n\tprevChar= document.getChar(Math.max(offset - 1, 0));\n} else if (currChar == '<' && (prevChar != '>' && prevChar != '<')) {\n\tprevChar= currChar;\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab744cf10>"": ""{\nfinal int peer= region.getOffset();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab58781f0>"": ""char prevChar= document.getChar(Math.max(offset - 1, 0));\nchar currChar= (offset != document.getLength()) ? document.getChar(offset) : Character.MIN_VALUE;\nif (prevChar == '>' && currChar != '>') { //https://bugs.eclipse.org/bugs/show_bug.cgi?id=372516\n\tcurrChar= prevChar;\n} else if (currChar == '<' && (prevChar != '>' && prevChar != '<')) {\n\tcurrChar= document.getChar(offset);\n}""}",0,0,0,8,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/ui/text/JavaPairMatcher.java,performMatch,53,17.0,26.0,[],"[(72, 72)]","[[(61, 61), (58, 58), (62, 62), (66, 66), (56, 56), (55, 55), (64, 64)], [(74, 74), (75, 75), (77, 77)], [(58, 58), (60, 60), (62, 62), (66, 66), (56, 56), (65, 65), (55, 55)]]","[(54, 66), (54, 69), (54, 71), (54, 72), (54, 73), (55, 66), (55, 69), (55, 71), (55, 72), (55, 73), (56, 66), (56, 69), (56, 71), (56, 72), (56, 73), (58, 66), (58, 69), (58, 71), (58, 72), (58, 73), (58, 77), (68, 77), (68, 78), (70, 77), (70, 78), (72, 78)]"
85,88,88,2,False,"[(29, 45), (40, 45), (29, 38)]","[(40, 40)]","[[(1, 1), (51, 51), (0, 0)], [(43, 43), (45, 45), (42, 42)], [(46, 46), (25, 25), (38, 38), (35, 35), (37, 37), (33, 33)], [(51, 51), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab70bd610>"": ""{\n    Object firstObject = in.readObject();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5878e20>"": ""Node.Handle h = (Node.Handle) obj;"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5878d00>"": ""{\n    Node n = h.getNode();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab70b9310>"": "" else {\n   Object obj = in.readObject();\n   if (obj instanceof String) {\n       obj = in.readObject();\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab70bd580>"": ""public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n}""}",0,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/openide.windows/src/org/openide/windows/TopComponent.java,readExternal,1143,7.0,23.0,"[(1172, 1188), (1183, 1188), (1172, 1181)]","[(1183, 1183)]","[[(1144, 1144), (1194, 1194), (1143, 1143)], [(1186, 1186), (1188, 1188), (1185, 1185)], [(1189, 1189), (1168, 1168), (1181, 1181), (1178, 1178), (1180, 1180), (1176, 1176)], [(1194, 1194), (1143, 1143)]]","[(1147, 1153), (1147, 1154), (1147, 1155), (1147, 1157), (1147, 1158), (1147, 1160), (1147, 1167), (1148, 1154), (1148, 1155), (1148, 1157), (1148, 1158), (1148, 1160), (1148, 1167), (1150, 1157), (1150, 1158), (1150, 1160), (1150, 1167), (1152, 1158), (1152, 1160), (1152, 1167), (1153, 1160), (1153, 1167), (1154, 1160), (1154, 1167), (1155, 1167), (1157, 1167), (1158, 1167), (1160, 1167), (1169, 1176), (1169, 1181), (1169, 1183), (1169, 1188), (1170, 1176), (1170, 1181), (1170, 1183), (1170, 1188), (1172, 1181), (1172, 1183), (1172, 1188), (1173, 1181), (1173, 1183), (1173, 1188), (1174, 1181), (1174, 1183), (1174, 1188), (1176, 1183), (1176, 1188), (1178, 1188)]"
86,89,89,2,False,[],[],"[[(19, 19), (24, 24), (15, 15)], [(8, 8), (1, 1), (29, 29), (0, 0)], [(8, 8), (9, 9), (0, 0), (1, 1), (29, 29), (2, 2)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab70b9e80>"": ""FileObject dir = getBuildClassesDir();\ndir = getDistJar(); // not really a dir at all, of course\ndir = getBuildTestClassesDir();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab70bdbb0>"": ""{\n    FileObject[] srcPath = getPrimarySrcPath();\n    srcPath = getTestSrcDir();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6a1f1c0>"": ""{\n    FileObject[] srcPath = getPrimarySrcPath();\n    for (int i=0; i < srcPath.length; i++) {\n    srcPath = getTestSrcDir();\n    for (int i=0; i< srcPath.length; i++) {\n}""}",4,0,0,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/ruby.project/src/org/netbeans/modules/ruby/rubyproject/classpath/ClassPathProviderImpl.java,getType,143,15.0,21.0,[],[],"[[(162, 162), (167, 167), (158, 158)], [(151, 151), (144, 144), (172, 172), (143, 143)], [(151, 151), (152, 152), (143, 143), (144, 144), (172, 172), (145, 145)]]","[(144, 150), (144, 151), (144, 157), (144, 158), (144, 161), (144, 162), (144, 162), (144, 166), (145, 151), (145, 157), (145, 158), (145, 161), (145, 162), (145, 162), (145, 166), (145, 167), (151, 157), (151, 158), (151, 161), (151, 162), (151, 162), (151, 166), (151, 167), (151, 170), (151, 171), (152, 158), (152, 161), (152, 162), (152, 162), (152, 166), (152, 167), (152, 170), (152, 171), (158, 166), (158, 167), (158, 170), (158, 171), (159, 166), (159, 167), (159, 170), (159, 171), (162, 170), (162, 170), (162, 171), (162, 171), (163, 170), (163, 171)]"
87,90,90,2,False,"[(7, 14), (9, 14)]",[],"[[(6, 6), (8, 8), (5, 5), (15, 15)], [(1, 1), (27, 27), (0, 0)], [(4, 4), (14, 14), (7, 7), (9, 9), (13, 13), (10, 10), (6, 6), (11, 11), (15, 15)], [(4, 4), (6, 6), (7, 7), (15, 15)], [(6, 6), (15, 15), (9, 9)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab687ec10>"": ""FileOutputStream os = null;\ntry {\n\tos = new FileOutputStream(target);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6874e50>"": ""{\n\tFile source = new File(originPath.toFile(), name);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6874670>"": ""FileInputStream is = null;\ntry {\n\tis = new FileInputStream(source);\n\tbyte[] buf = new byte[1024];\n\tint len = is.read(buf);\n\twhile (len != -1) {\n\t\tlen = is.read(buf);\n\t}\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab687ed00>"": ""FileInputStream is = null;\ntry {\n\tis = new FileInputStream(source);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab687e9a0>"": ""{\nbyte[] buf = new byte[1024];\n""}",0,1,2,3,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/pde/internal/core/util/CoreUtility.java,copyFile,229,7.0,22.0,"[(236, 243), (238, 243)]",[],"[[(235, 235), (237, 237), (234, 234), (244, 244)], [(230, 230), (256, 256), (229, 229)], [(233, 233), (243, 243), (236, 236), (238, 238), (242, 242), (239, 239), (235, 235), (240, 240), (244, 244)], [(233, 233), (235, 235), (236, 236), (244, 244)], [(235, 235), (244, 244), (238, 238)]]","[(235, 255), (236, 243), (237, 243), (247, 254)]"
88,91,91,1,False,"[(11, 23)]",[],"[[(6, 6), (25, 25), (7, 7)], [(30, 30), (1, 1), (0, 0)], [(4, 4), (30, 30), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab61272b0>"": ""{\n    long total = runtime.totalMemory();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6381850>"": ""{\n    Runtime runtime = Runtime.getRuntime();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab6127070>"": ""{\n    Runtime runtime = Runtime.getRuntime();\n    long free = runtime.freeMemory();\n}""}",0,0,0,1,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/mobility.midpexamples/SunSamples-Demos/src/example/PropExample.java,startApp,62,2.0,21.0,"[(73, 85)]",[],"[[(68, 68), (87, 87), (69, 69)], [(92, 92), (63, 63), (62, 62)], [(66, 66), (92, 92), (63, 63), (62, 62)]]","[(66, 89), (68, 89), (68, 91), (69, 76), (69, 77), (69, 79), (69, 80), (69, 81), (69, 83), (69, 84), (69, 85), (69, 86), (71, 77), (71, 79), (71, 80), (71, 81), (71, 83), (71, 84), (71, 85), (71, 86), (73, 79), (73, 80), (73, 81), (73, 83), (73, 84), (73, 85), (73, 86), (74, 80), (74, 81), (74, 83), (74, 84), (74, 85), (74, 86), (76, 83), (76, 84), (76, 85), (76, 86), (77, 83), (77, 84), (77, 85), (77, 86), (79, 85), (79, 86), (80, 86)]"
89,92,92,2,False,"[(13, 26)]",[],[],{},0,0,0,10,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/weka/weka-3.7.9/src/src/main/java/weka/core/neighboursearch/PerformanceStats.java,getMeasure,291,12.0,32.0,"[(304, 317)]",[],[],"[(298, 317), (298, 317), (298, 317), (300, 317), (300, 317), (300, 317), (303, 317), (304, 317), (304, 317), (304, 317), (306, 317), (306, 317), (306, 317), (308, 317), (308, 317), (308, 317), (310, 317), (310, 317), (310, 317)]"
90,93,93,2,False,[],[],"[[(14, 14), (16, 16), (33, 33)], [(36, 36), (0, 0)], [(4, 4), (17, 17), (5, 5), (14, 14), (16, 16), (23, 23), (0, 0), (9, 9), (36, 36), (29, 29), (13, 13), (3, 3), (18, 18), (2, 2), (33, 33)], [(4, 4), (36, 36), (0, 0)], [(36, 36), (2, 2), (0, 0)], [(17, 17), (18, 18), (29, 29)], [(3, 3), (2, 2), (36, 36), (0, 0)], [(17, 17), (14, 14), (16, 16), (33, 33)], [(33, 33), (14, 14), (15, 15)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8040>"": ""{\n  String[] newVersions = propVal.split(\"",\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46e50>"": ""private void doCheck() throws IOException {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46850>"": ""{\n  URL updateUrl = buildUpdateCheckUrl();\n  Properties updateProps = getUpdateProperties(updateUrl);\n  String currentVersion = getQuartzVersion();\n  String propVal = updateProps.getProperty(\""general.notice\"");\n  propVal = updateProps.getProperty(currentVersion + \"".notice\"");\n  propVal = updateProps.getProperty(currentVersion + \"".updates\"");\n  if (notBlank(propVal)) {\n    String[] newVersions = propVal.split(\"",\"");\n    for (int i = 0; i < newVersions.length; i++) {\n      String newVersion = newVersions[i].trim();\n      propVal = updateProps.getProperty(newVersion + \"".release-notes\"");\n    }\n  }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e466d0>"": ""{\n  String currentVersion = getQuartzVersion();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46af0>"": ""{\n  URL updateUrl = buildUpdateCheckUrl();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8af0>"": ""i++) {\n  String newVersion = newVersions[i].trim();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5e46940>"": ""{\n  URL updateUrl = buildUpdateCheckUrl();\n  Properties updateProps = getUpdateProperties(updateUrl);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8370>"": ""{\n  String[] newVersions = propVal.split(\"",\"");\n  for (int i = 0; i < newVersions.length; i++) {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ff8190>"": ""{\n  StringBuilder sb = new StringBuilder();\n}""}",2,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/quartz/quartz-1.8.3/src/quartz-1.8.3/quartz/src/main/java/org/quartz/utils/UpdateChecker.java,doCheck,55,8.0,28.0,[],[],"[[(69, 69), (71, 71), (88, 88)], [(91, 91), (55, 55)], [(59, 59), (72, 72), (60, 60), (69, 69), (71, 71), (78, 78), (55, 55), (64, 64), (91, 91), (84, 84), (68, 68), (58, 58), (73, 73), (57, 57), (88, 88)], [(59, 59), (91, 91), (55, 55)], [(91, 91), (57, 57), (55, 55)], [(72, 72), (73, 73), (84, 84)], [(58, 58), (57, 57), (91, 91), (55, 55)], [(72, 72), (69, 69), (71, 71), (88, 88)], [(88, 88), (69, 69), (70, 70)]]","[(56, 63), (56, 64), (56, 67), (56, 68), (57, 63), (57, 64), (57, 67), (57, 68), (58, 64), (58, 67), (58, 68), (59, 67), (59, 68), (60, 67), (60, 68), (61, 67), (61, 68), (64, 90), (65, 90), (68, 90), (69, 90), (70, 84), (70, 87), (71, 84), (71, 87), (72, 84), (72, 87), (73, 83), (74, 83), (77, 83)]"
91,94,94,2,False,[],[],"[[(27, 27), (16, 16), (20, 20), (21, 21), (22, 22)], [(20, 20), (27, 27), (16, 16)], [(36, 36), (27, 27), (29, 29)], [(4, 4), (44, 44), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab5c55880>"": ""{\n    String msg = NbBundle.getMessage(QueryBuilder.class, \""EMPTY_QUERY_ADD_TABLE\"");\n    NotifyDescriptor d =\n            new NotifyDescriptor.Message(msg + \""\\n\\n\"", NotifyDescriptor.ERROR_MESSAGE); // NOI18N\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5c55220>"": ""{\n    String msg = NbBundle.getMessage(QueryBuilder.class, \""EMPTY_QUERY_ADD_TABLE\"");\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5c55a00>"": "" else {\n   String queryText = getSqlText();\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5ce1760>"": ""{\n    String command = getSqlCommand();\n}""}",0,0,0,4,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/db.sql.visualeditor/src/org/netbeans/modules/db/sql/visualeditor/querybuilder/QueryBuilder.java,componentShowing,1416,7.0,24.0,[],[],"[[(1443, 1443), (1432, 1432), (1436, 1436), (1437, 1437), (1438, 1438)], [(1436, 1436), (1443, 1443), (1432, 1432)], [(1452, 1452), (1443, 1443), (1445, 1445)], [(1420, 1420), (1460, 1460), (1416, 1416)]]","[(1418, 1425), (1418, 1425), (1418, 1427), (1418, 1427), (1418, 1429), (1418, 1429), (1418, 1430), (1418, 1430), (1418, 1431), (1418, 1431), (1418, 1452), (1418, 1452), (1420, 1427), (1420, 1429), (1420, 1430), (1420, 1431), (1420, 1452), (1420, 1453), (1422, 1429), (1422, 1430), (1422, 1431), (1422, 1452), (1422, 1453), (1422, 1455), (1425, 1431), (1425, 1452), (1425, 1453), (1425, 1455), (1425, 1458), (1425, 1458), (1427, 1452), (1427, 1453), (1427, 1455), (1427, 1458), (1427, 1458), (1429, 1452), (1429, 1453), (1429, 1455), (1429, 1458), (1429, 1458), (1430, 1452), (1430, 1453), (1430, 1455), (1430, 1458), (1430, 1458), (1431, 1452), (1431, 1453), (1431, 1455), (1431, 1458), (1431, 1458), (1432, 1452), (1432, 1453), (1432, 1455), (1432, 1458), (1432, 1458), (1433, 1439), (1433, 1441), (1434, 1441), (1435, 1441), (1445, 1451)]"
92,95,95,2,False,[],[],[],{},0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/freecol/freecol-0.10.7/src/freecol/src/net/sf/freecol/client/gui/panel/ColonyPanel.java,actionPerformed,448,10.0,34.0,[],[],[],
93,96,96,1,False,"[(8, 18)]",[],"[[(54, 54), (25, 25), (0, 0)], [(30, 30), (27, 27), (0, 0), (36, 36), (25, 25), (29, 29), (54, 54)], [(5, 5), (54, 54), (0, 0)], [(4, 4), (54, 54), (0, 0)], [(27, 27), (0, 0), (54, 54), (25, 25), (29, 29)], [(3, 3), (54, 54), (0, 0)], [(30, 30), (27, 27), (0, 0), (54, 54), (25, 25), (29, 29), (38, 38)], [(54, 54), (0, 0)], [(27, 27), (25, 25), (54, 54), (0, 0)], [(30, 30), (27, 27), (0, 0), (54, 54), (25, 25), (29, 29), (37, 37)], [(30, 30), (27, 27), (0, 0), (54, 54), (25, 25), (29, 29)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab440a220>"": ""{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3c47220>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\nHSLFSlideShow hss_read = new HSLFSlideShow(bais);\nSlideShow ss_read = new SlideShow(hss_read);\nSlide _s1 = ss_read.getSlides()[0];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5cdea60>"": ""{\n\tSlide s3 = ss_three.getSlides()[2];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5cde070>"": ""{\n\tSlide s2 = ss_three.getSlides()[1];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a670>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\nHSLFSlideShow hss_read = new HSLFSlideShow(bais);\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab5cde700>"": ""{\n\tSlide s1 = ss_three.getSlides()[0];\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3c47520>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\nHSLFSlideShow hss_read = new HSLFSlideShow(bais);\nSlideShow ss_read = new SlideShow(hss_read);\nSlide _s3 = ss_read.getSlides()[2];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440ad60>"": ""public void testReOrder3swap() throws Exception {\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a760>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3c473a0>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\nHSLFSlideShow hss_read = new HSLFSlideShow(bais);\nSlideShow ss_read = new SlideShow(hss_read);\nSlide _s2 = ss_read.getSlides()[1];\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab440a5b0>"": ""{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\nHSLFSlideShow hss_read = new HSLFSlideShow(bais);\nSlideShow ss_read = new SlideShow(hss_read);\n""}",0,0,0,0,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/poi/poi-3.6/src/poi-3.6/src/scratchpad/testcases/org/apache/poi/hslf/usermodel/TestReOrderingSlides.java,testReOrder3swap,241,1.0,33.0,"[(249, 259)]",[],"[[(295, 295), (266, 266), (241, 241)], [(271, 271), (268, 268), (241, 241), (277, 277), (266, 266), (270, 270), (295, 295)], [(246, 246), (295, 295), (241, 241)], [(245, 245), (295, 295), (241, 241)], [(268, 268), (241, 241), (295, 295), (266, 266), (270, 270)], [(244, 244), (295, 295), (241, 241)], [(271, 271), (268, 268), (241, 241), (295, 295), (266, 266), (270, 270), (279, 279)], [(295, 295), (241, 241)], [(268, 268), (266, 266), (295, 295), (241, 241)], [(271, 271), (268, 268), (241, 241), (295, 295), (266, 266), (270, 270), (278, 278)], [(271, 271), (268, 268), (241, 241), (295, 295), (266, 266), (270, 270)]]","[(242, 248), (242, 249), (242, 250), (242, 250), (242, 251), (242, 252), (242, 253), (242, 254), (242, 254), (242, 255), (242, 256), (242, 257), (242, 258), (242, 258), (242, 259), (242, 261), (242, 262), (242, 263), (242, 265), (242, 266), (242, 267), (242, 268), (242, 270), (242, 271), (242, 273), (242, 274), (242, 276), (242, 277), (242, 278), (242, 279), (242, 281), (242, 282), (242, 283), (242, 284), (243, 249), (243, 250), (243, 250), (243, 251), (243, 252), (243, 253), (243, 254), (243, 254), (243, 255), (243, 256), (243, 257), (243, 258), (243, 258), (243, 259), (243, 261), (243, 262), (243, 263), (243, 265), (243, 266), (243, 267), (243, 268), (243, 270), (243, 271), (243, 273), (243, 274), (243, 276), (243, 277), (243, 278), (243, 279), (243, 281), (243, 282), (243, 283), (243, 284), (244, 250), (244, 250), (244, 251), (244, 252), (244, 253), (244, 254), (244, 254), (244, 255), (244, 256), (244, 257), (244, 258), (244, 258), (244, 259), (244, 261), (244, 262), (244, 263), (244, 265), (244, 266), (244, 267), (244, 268), (244, 270), (244, 271), (244, 273), (244, 274), (244, 276), (244, 277), (244, 278), (244, 279), (244, 281), (244, 282), (244, 283), (244, 284), (244, 286), (245, 251), (245, 252), (245, 253), (245, 254), (245, 254), (245, 255), (245, 256), (245, 257), (245, 258), (245, 258), (245, 259), (245, 261), (245, 262), (245, 263), (245, 265), (245, 266), (245, 267), (245, 268), (245, 270), (245, 271), (245, 273), (245, 274), (245, 276), (245, 277), (245, 278), (245, 279), (245, 281), (245, 282), (245, 283), (245, 284), (245, 286), (245, 287), (246, 252), (246, 253), (246, 254), (246, 254), (246, 255), (246, 256), (246, 257), (246, 258), (246, 258), (246, 259), (246, 261), (246, 262), (246, 263), (246, 265), (246, 266), (246, 267), (246, 268), (246, 270), (246, 271), (246, 273), (246, 274), (246, 276), (246, 277), (246, 278), (246, 279), (246, 281), (246, 282), (246, 283), (246, 284), (246, 286), (246, 287), (246, 288), (248, 254), (248, 254), (248, 255), (248, 256), (248, 257), (248, 258), (248, 258), (248, 259), (248, 261), (248, 262), (248, 263), (248, 265), (248, 266), (248, 267), (248, 268), (248, 270), (248, 271), (248, 273), (248, 274), (248, 276), (248, 277), (248, 278), (248, 279), (248, 281), (248, 282), (248, 283), (248, 284), (248, 286), (248, 287), (248, 288), (248, 289), (249, 255), (249, 256), (249, 257), (249, 258), (249, 258), (249, 259), (249, 261), (249, 262), (249, 263), (249, 265), (249, 266), (249, 267), (249, 268), (249, 270), (249, 271), (249, 273), (249, 274), (249, 276), (249, 277), (249, 278), (249, 279), (249, 281), (249, 282), (249, 283), (249, 284), (249, 286), (249, 287), (249, 288), (249, 289), (249, 291), (250, 256), (250, 256), (250, 257), (250, 257), (250, 258), (250, 258), (250, 258), (250, 258), (250, 259), (250, 259), (250, 261), (250, 261), (250, 262), (250, 262), (250, 263), (250, 263), (250, 265), (250, 265), (250, 266), (250, 266), (250, 267), (250, 267), (250, 268), (250, 268), (250, 270), (250, 270), (250, 271), (250, 271), (250, 273), (250, 273), (250, 274), (250, 274), (250, 276), (250, 276), (250, 277), (250, 277), (250, 278), (250, 278), (250, 279), (250, 279), (250, 281), (250, 281), (250, 282), (250, 282), (250, 283), (250, 283), (250, 284), (250, 284), (250, 286), (250, 286), (250, 287), (250, 287), (250, 288), (250, 288), (250, 289), (250, 289), (250, 291), (250, 291), (250, 292), (250, 292), (251, 257), (251, 258), (251, 258), (251, 259), (251, 261), (251, 262), (251, 263), (251, 265), (251, 266), (251, 267), (251, 268), (251, 270), (251, 271), (251, 273), (251, 274), (251, 276), (251, 277), (251, 278), (251, 279), (251, 281), (251, 282), (251, 283), (251, 284), (251, 286), (251, 287), (251, 288), (251, 289), (251, 291), (251, 292), (251, 293), (252, 258), (252, 258), (252, 259), (252, 261), (252, 262), (252, 263), (252, 265), (252, 266), (252, 267), (252, 268), (252, 270), (252, 271), (252, 273), (252, 274), (252, 276), (252, 277), (252, 278), (252, 279), (252, 281), (252, 282), (252, 283), (252, 284), (252, 286), (252, 287), (252, 288), (252, 289), (252, 291), (252, 292), (252, 293), (252, 294), (253, 259), (253, 261), (253, 262), (253, 263), (253, 265), (253, 266), (253, 267), (253, 268), (253, 270), (253, 271), (253, 273), (253, 274), (253, 276), (253, 277), (253, 278), (253, 279), (253, 281), (253, 282), (253, 283), (253, 284), (253, 286), (253, 287), (253, 288), (253, 289), (253, 291), (253, 292), (253, 293), (253, 294), (254, 261), (254, 261), (254, 262), (254, 262), (254, 263), (254, 263), (254, 265), (254, 265), (254, 266), (254, 266), (254, 267), (254, 267), (254, 268), (254, 268), (254, 270), (254, 270), (254, 271), (254, 271), (254, 273), (254, 273), (254, 274), (254, 274), (254, 276), (254, 276), (254, 277), (254, 277), (254, 278), (254, 278), (254, 279), (254, 279), (254, 281), (254, 281), (254, 282), (254, 282), (254, 283), (254, 283), (254, 284), (254, 284), (254, 286), (254, 286), (254, 287), (254, 287), (254, 288), (254, 288), (254, 289), (254, 289), (254, 291), (254, 291), (254, 292), (254, 292), (254, 293), (254, 293), (254, 294), (254, 294), (255, 261), (255, 262), (255, 263), (255, 265), (255, 266), (255, 267), (255, 268), (255, 270), (255, 271), (255, 273), (255, 274), (255, 276), (255, 277), (255, 278), (255, 279), (255, 281), (255, 282), (255, 283), (255, 284), (255, 286), (255, 287), (255, 288), (255, 289), (255, 291), (255, 292), (255, 293), (255, 294), (256, 262), (256, 263), (256, 265), (256, 266), (256, 267), (256, 268), (256, 270), (256, 271), (256, 273), (256, 274), (256, 276), (256, 277), (256, 278), (256, 279), (256, 281), (256, 282), (256, 283), (256, 284), (256, 286), (256, 287), (256, 288), (256, 289), (256, 291), (256, 292), (256, 293), (256, 294), (257, 263), (257, 265), (257, 266), (257, 267), (257, 268), (257, 270), (257, 271), (257, 273), (257, 274), (257, 276), (257, 277), (257, 278), (257, 279), (257, 281), (257, 282), (257, 283), (257, 284), (257, 286), (257, 287), (257, 288), (257, 289), (257, 291), (257, 292), (257, 293), (257, 294), (258, 265), (258, 265), (258, 266), (258, 266), (258, 267), (258, 267), (258, 268), (258, 268), (258, 270), (258, 270), (258, 271), (258, 271), (258, 273), (258, 273), (258, 274), (258, 274), (258, 276), (258, 276), (258, 277), (258, 277), (258, 278), (258, 278), (258, 279), (258, 279), (258, 281), (258, 281), (258, 282), (258, 282), (258, 283), (258, 283), (258, 284), (258, 284), (258, 286), (258, 286), (258, 287), (258, 287), (258, 288), (258, 288), (258, 289), (258, 289), (258, 291), (258, 291), (258, 292), (258, 292), (258, 293), (258, 293), (258, 294), (258, 294), (259, 265), (259, 266), (259, 267), (259, 268), (259, 270), (259, 271), (259, 273), (259, 274), (259, 276), (259, 277), (259, 278), (259, 279), (259, 281), (259, 282), (259, 283), (259, 284), (259, 286), (259, 287), (259, 288), (259, 289), (259, 291), (259, 292), (259, 293), (259, 294), (261, 267), (261, 268), (261, 270), (261, 271), (261, 273), (261, 274), (261, 276), (261, 277), (261, 278), (261, 279), (261, 281), (261, 282), (261, 283), (261, 284), (261, 286), (261, 287), (261, 288), (261, 289), (261, 291), (261, 292), (261, 293), (261, 294), (262, 268), (262, 270), (262, 271), (262, 273), (262, 274), (262, 276), (262, 277), (262, 278), (262, 279), (262, 281), (262, 282), (262, 283), (262, 284), (262, 286), (262, 287), (262, 288), (262, 289), (262, 291), (262, 292), (262, 293), (262, 294), (263, 270), (263, 271), (263, 273), (263, 274), (263, 276), (263, 277), (263, 278), (263, 279), (263, 281), (263, 282), (263, 283), (263, 284), (263, 286), (263, 287), (263, 288), (263, 289), (263, 291), (263, 292), (263, 293), (263, 294), (265, 271), (265, 273), (265, 274), (265, 276), (265, 277), (265, 278), (265, 279), (265, 281), (265, 282), (265, 283), (265, 284), (265, 286), (265, 287), (265, 288), (265, 289), (265, 291), (265, 292), (265, 293), (265, 294), (266, 273), (266, 274), (266, 276), (266, 277), (266, 278), (266, 279), (266, 281), (266, 282), (266, 283), (266, 284), (266, 286), (266, 287), (266, 288), (266, 289), (266, 291), (266, 292), (266, 293), (266, 294), (267, 273), (267, 274), (267, 276), (267, 277), (267, 278), (267, 279), (267, 281), (267, 282), (267, 283), (267, 284), (267, 286), (267, 287), (267, 288), (267, 289), (267, 291), (267, 292), (267, 293), (267, 294), (268, 274), (268, 276), (268, 277), (268, 278), (268, 279), (268, 281), (268, 282), (268, 283), (268, 284), (268, 286), (268, 287), (268, 288), (268, 289), (268, 291), (268, 292), (268, 293), (268, 294), (270, 276), (270, 277), (270, 278), (270, 279), (270, 281), (270, 282), (270, 283), (270, 284), (270, 286), (270, 287), (270, 288), (270, 289), (270, 291), (270, 292), (270, 293), (270, 294), (271, 277), (271, 278), (271, 279), (271, 281), (271, 282), (271, 283), (271, 284), (271, 286), (271, 287), (271, 288), (271, 289), (271, 291), (271, 292), (271, 293), (271, 294), (273, 279), (273, 281), (273, 282), (273, 283), (273, 284), (273, 286), (273, 287), (273, 288), (273, 289), (273, 291), (273, 292), (273, 293), (273, 294), (274, 281), (274, 282), (274, 283), (274, 284), (274, 286), (274, 287), (274, 288), (274, 289), (274, 291), (274, 292), (274, 293), (274, 294), (276, 282), (276, 283), (276, 284), (276, 286), (276, 287), (276, 288), (276, 289), (276, 291), (276, 292), (276, 293), (276, 294), (277, 283), (277, 284), (277, 286), (277, 287), (277, 288), (277, 289), (277, 291), (277, 292), (277, 293), (277, 294), (278, 284), (278, 286), (278, 287), (278, 288), (278, 289), (278, 291), (278, 292), (278, 293), (278, 294), (279, 286), (279, 287), (279, 288), (279, 289), (279, 291), (279, 292), (279, 293), (279, 294), (281, 287), (281, 288), (281, 289), (281, 291), (281, 292), (281, 293), (281, 294), (282, 288), (282, 289), (282, 291), (282, 292), (282, 293), (282, 294), (283, 289), (283, 291), (283, 292), (283, 293), (283, 294), (284, 291), (284, 292), (284, 293), (284, 294), (286, 292), (286, 293), (286, 294), (287, 293), (287, 294), (288, 294)]"
94,97,97,1,False,"[(31, 42), (15, 29), (15, 21), (23, 29)]","[(44, 44)]",[],"{""<program_slicing.graph.statement.Statement object at 0x7f4ab3a8a2b0>"": ""javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);""}",0,0,0,0,2,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/lib.terminalemulator/demosrc/nativeexecution.test/src/org/netbeans/nativeexecution/terminal/ui/TargetSelector.java,initComponents,44,1.0,31.0,"[(75, 86), (59, 73), (59, 65), (67, 73)]","[(88, 88)]",[],"[(46, 52), (46, 53), (46, 54), (46, 55), (46, 56), (46, 57), (46, 59), (46, 60), (46, 60), (46, 65), (46, 67), (46, 68), (46, 68), (46, 73), (46, 75), (46, 75), (46, 77), (46, 77), (46, 79), (46, 80), (46, 80), (46, 82), (46, 83), (46, 83), (46, 85), (46, 86), (46, 86), (46, 88), (46, 89), (46, 115), (47, 53), (47, 54), (47, 55), (47, 56), (47, 57), (47, 59), (47, 60), (47, 60), (47, 65), (47, 67), (47, 68), (47, 68), (47, 73), (47, 75), (47, 75), (47, 77), (47, 77), (47, 79), (47, 80), (47, 80), (47, 82), (47, 83), (47, 83), (47, 85), (47, 86), (47, 86), (47, 88), (47, 89), (47, 115), (48, 54), (48, 55), (48, 56), (48, 57), (48, 59), (48, 60), (48, 60), (48, 65), (48, 67), (48, 68), (48, 68), (48, 73), (48, 75), (48, 75), (48, 77), (48, 77), (48, 79), (48, 80), (48, 80), (48, 82), (48, 83), (48, 83), (48, 85), (48, 86), (48, 86), (48, 88), (48, 89), (48, 115), (49, 55), (49, 56), (49, 57), (49, 59), (49, 60), (49, 60), (49, 65), (49, 67), (49, 68), (49, 68), (49, 73), (49, 75), (49, 75), (49, 77), (49, 77), (49, 79), (49, 80), (49, 80), (49, 82), (49, 83), (49, 83), (49, 85), (49, 86), (49, 86), (49, 88), (49, 89), (49, 115), (50, 56), (50, 57), (50, 59), (50, 60), (50, 60), (50, 65), (50, 67), (50, 68), (50, 68), (50, 73), (50, 75), (50, 75), (50, 77), (50, 77), (50, 79), (50, 80), (50, 80), (50, 82), (50, 83), (50, 83), (50, 85), (50, 86), (50, 86), (50, 88), (50, 89), (50, 115), (51, 57), (51, 59), (51, 60), (51, 60), (51, 65), (51, 67), (51, 68), (51, 68), (51, 73), (51, 75), (51, 75), (51, 77), (51, 77), (51, 79), (51, 80), (51, 80), (51, 82), (51, 83), (51, 83), (51, 85), (51, 86), (51, 86), (51, 88), (51, 89), (51, 115), (52, 59), (52, 60), (52, 60), (52, 65), (52, 67), (52, 68), (52, 68), (52, 73), (52, 75), (52, 75), (52, 77), (52, 77), (52, 79), (52, 80), (52, 80), (52, 82), (52, 83), (52, 83), (52, 85), (52, 86), (52, 86), (52, 88), (52, 89), (52, 115), (53, 59), (53, 60), (53, 60), (53, 65), (53, 67), (53, 68), (53, 68), (53, 73), (53, 75), (53, 75), (53, 77), (53, 77), (53, 79), (53, 80), (53, 80), (53, 82), (53, 83), (53, 83), (53, 85), (53, 86), (53, 86), (53, 88), (53, 89), (53, 115), (54, 60), (54, 60), (54, 65), (54, 67), (54, 68), (54, 68), (54, 73), (54, 75), (54, 75), (54, 77), (54, 77), (54, 79), (54, 80), (54, 80), (54, 82), (54, 83), (54, 83), (54, 85), (54, 86), (54, 86), (54, 88), (54, 89), (54, 115), (55, 65), (55, 67), (55, 68), (55, 68), (55, 73), (55, 75), (55, 75), (55, 77), (55, 77), (55, 79), (55, 80), (55, 80), (55, 82), (55, 83), (55, 83), (55, 85), (55, 86), (55, 86), (55, 88), (55, 89), (55, 115), (56, 65), (56, 67), (56, 68), (56, 68), (56, 73), (56, 75), (56, 75), (56, 77), (56, 77), (56, 79), (56, 80), (56, 80), (56, 82), (56, 83), (56, 83), (56, 85), (56, 86), (56, 86), (56, 88), (56, 89), (56, 115), (57, 65), (57, 67), (57, 68), (57, 68), (57, 73), (57, 75), (57, 75), (57, 77), (57, 77), (57, 79), (57, 80), (57, 80), (57, 82), (57, 83), (57, 83), (57, 85), (57, 86), (57, 86), (57, 88), (57, 89), (57, 115), (59, 65), (59, 67), (59, 68), (59, 68), (59, 73), (59, 75), (59, 75), (59, 77), (59, 77), (59, 79), (59, 80), (59, 80), (59, 82), (59, 83), (59, 83), (59, 85), (59, 86), (59, 86), (59, 88), (59, 89), (59, 115), (60, 67), (60, 67), (60, 68), (60, 68), (60, 68), (60, 68), (60, 73), (60, 73), (60, 75), (60, 75), (60, 75), (60, 75), (60, 77), (60, 77), (60, 77), (60, 77), (60, 79), (60, 79), (60, 80), (60, 80), (60, 80), (60, 80), (60, 82), (60, 82), (60, 83), (60, 83), (60, 83), (60, 83), (60, 85), (60, 85), (60, 86), (60, 86), (60, 86), (60, 86), (60, 88), (60, 88), (60, 89), (60, 89), (60, 115), (60, 115), (61, 67), (61, 68), (61, 68), (61, 73), (61, 75), (61, 75), (61, 77), (61, 77), (61, 79), (61, 80), (61, 80), (61, 82), (61, 83), (61, 83), (61, 85), (61, 86), (61, 86), (61, 88), (61, 89), (61, 115), (67, 73), (67, 75), (67, 75), (67, 77), (67, 77), (67, 79), (67, 80), (67, 80), (67, 82), (67, 83), (67, 83), (67, 85), (67, 86), (67, 86), (67, 88), (67, 89), (67, 115), (67, 142), (68, 75), (68, 75), (68, 75), (68, 75), (68, 77), (68, 77), (68, 77), (68, 77), (68, 79), (68, 79), (68, 80), (68, 80), (68, 80), (68, 80), (68, 82), (68, 82), (68, 83), (68, 83), (68, 83), (68, 83), (68, 85), (68, 85), (68, 86), (68, 86), (68, 86), (68, 86), (68, 88), (68, 88), (68, 89), (68, 89), (68, 115), (68, 115), (68, 142), (68, 142), (69, 75), (69, 75), (69, 77), (69, 77), (69, 79), (69, 80), (69, 80), (69, 82), (69, 83), (69, 83), (69, 85), (69, 86), (69, 86), (69, 88), (69, 89), (69, 115), (69, 142), (75, 82), (75, 82), (75, 83), (75, 83), (75, 83), (75, 83), (75, 85), (75, 85), (75, 86), (75, 86), (75, 86), (75, 86), (75, 88), (75, 88), (75, 89), (75, 89), (75, 115), (75, 115), (75, 142), (75, 142), (77, 83), (77, 83), (77, 83), (77, 83), (77, 85), (77, 85), (77, 86), (77, 86), (77, 86), (77, 86), (77, 88), (77, 88), (77, 89), (77, 89), (77, 115), (77, 115), (77, 142), (77, 142), (79, 85), (79, 86), (79, 86), (79, 88), (79, 89), (79, 115), (79, 142), (80, 86), (80, 86), (80, 86), (80, 86), (80, 88), (80, 88), (80, 89), (80, 89), (80, 115), (80, 115), (80, 142), (80, 142), (82, 88), (82, 89), (82, 115), (82, 142), (83, 89), (83, 89), (83, 115), (83, 115), (83, 142), (83, 142), (85, 115), (85, 142), (86, 115), (86, 115), (86, 142), (86, 142), (88, 115), (88, 142), (89, 115), (89, 142), (90, 115), (90, 142), (116, 142)]"
95,98,98,2,False,"[(22, 27)]",[],"[[(46, 46), (43, 43), (45, 45), (49, 49), (44, 44), (39, 39), (48, 48), (37, 37), (41, 41), (47, 47), (40, 40), (42, 42)], [(50, 50), (21, 21), (22, 22)], [(23, 23), (27, 27), (16, 16), (9, 9), (26, 26), (19, 19), (21, 21), (12, 12), (50, 50), (51, 51)], [(43, 43), (39, 39), (40, 40), (37, 37), (49, 49)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab3b093a0>"": "" else {\n   try {\n       int latinCode = getLatinKeycode(ch);\n       setMnemonic(item, latinCode);\n       setMnemonicIndex(item, i);\n   } catch (MissingResourceException e) {\n       Logger.getLogger(Mnemonics.class.getName()).info(\""Mapping from a non-Latin character '\""+ch+ \n               \""' not found in a localized (branded) version of \""+\n               \""openide/awt/src/org/openide/awt/Mnemonics.properties - \""+\n               \""mnemonic cannot be assigned in \""+text);\n   }\n"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b14ac0>"": "" else {\n    char ch = text.charAt(i + 1);\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b24b50>"": ""int i = findMnemonicAmpersand(text);\nif (i < 0) {\n} else {\n    if (Utilities.isMac()) {\n    } else {\n        if (text.startsWith(\""<html>\"")) { // NOI18N\n            i += 3; // just in case it gets fixed\n        }\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b09370>"": "" else {\n   try {\n       int latinCode = getLatinKeycode(ch);\n   }\n""}",0,0,1,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/openide.awt/src/org/openide/awt/Mnemonics.java,setLocalizedText2,75,12.0,27.0,"[(97, 102)]",[],"[[(121, 121), (118, 118), (120, 120), (124, 124), (119, 119), (114, 114), (123, 123), (112, 112), (116, 116), (122, 122), (115, 115), (117, 117)], [(125, 125), (96, 96), (97, 97)], [(98, 98), (102, 102), (91, 91), (84, 84), (101, 101), (94, 94), (96, 96), (87, 87), (125, 125), (126, 126)], [(118, 118), (114, 114), (115, 115), (112, 112), (124, 124)]]","[(76, 82), (76, 84), (76, 86), (77, 84), (77, 86), (78, 84), (78, 86), (86, 126), (87, 126), (92, 125), (93, 125), (94, 125), (97, 124), (98, 124), (103, 124), (104, 110), (104, 111), (105, 111), (113, 123), (114, 123)]"
96,99,99,2,False,"[(7, 12), (1, 6)]","[(8, 8), (3, 3)]","[[(8, 8), (9, 9)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab32c08e0>"": ""ISourceRange sourceRange= fField.getNameRange();\nASTNode node= NodeFinder.perform(fRoot, sourceRange.getOffset(), sourceRange.getLength());"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab32c0160>"": ""ISourceRange sourceRange= fField.getNameRange();"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab3b09070>"": ""RefactoringStatus result=  new RefactoringStatus();""}",0,0,0,6,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/eclipse_SDK/eclipse_SDK-4.3/src/src/org/eclipse/jdt/internal/corext/refactoring/sef/SelfEncapsulateFieldRefactoring.java,checkInitialConditions,235,7.0,21.0,"[(242, 247), (236, 241)]","[(243, 243), (238, 238)]","[[(243, 243), (244, 244)]]","[(236, 242), (236, 243), (236, 244), (236, 247), (236, 248), (236, 251), (238, 244), (238, 247), (238, 248), (238, 251), (238, 256), (239, 247), (239, 248), (239, 251), (239, 256), (239, 257), (240, 247), (240, 248), (240, 251), (240, 256), (240, 257), (240, 258), (242, 248), (242, 251), (242, 256), (242, 257), (242, 258), (243, 251), (243, 256), (243, 257), (243, 258), (244, 251), (244, 256), (244, 257), (244, 258), (245, 251), (245, 256), (245, 257), (245, 258), (248, 256), (248, 257), (248, 258), (249, 256), (249, 257), (249, 258), (252, 258)]"
97,100,100,2,False,"[(12, 25), (26, 32), (26, 31)]",[],"[[(20, 20), (29, 29), (33, 33), (2, 2), (11, 11), (30, 30), (7, 7), (16, 16), (25, 25), (26, 26), (3, 3), (21, 21), (31, 31), (17, 17), (18, 18), (4, 4), (5, 5), (14, 14), (0, 0), (1, 1), (19, 19), (28, 28), (6, 6), (15, 15)], [(33, 33), (1, 1), (0, 0)]]","{""<program_slicing.graph.statement.Statement object at 0x7f4ab321b910>"": ""{\n    char[] chars = new char[end - start];\n    int charsIndex = 0;\n    if (start < offset) {\n        int bound = (end < offset) ? end : offset;\n        while (start < bound) {\n            chars[charsIndex++] = currentText.charAt(start++);\n        }\n    }\n    int bound = removedText.length();\n    if (start < bound) {\n        if (end < bound) {\n            bound = end;\n        }\n        while (start < bound) {\n            chars[charsIndex++] = removedText.charAt(start++);\n        }\n    }\n    bound = offset - removedText.length() + insertedTextLength;\n    bound += end;\n    while (start < bound) {\n        chars[charsIndex++] = currentText.charAt(start++);\n    }\n}"", ""<program_slicing.graph.statement.Statement object at 0x7f4ab321b8e0>"": ""{\n    char[] chars = new char[end - start];\n}""}",0,3,0,5,0,/hdd/new_dataset/qualitas/dataset/QualitasCorpus/Systems/netbeans/netbeans-6.9.1/src/lexer/src/org/netbeans/lib/lexer/inc/OriginalText.java,toCharArray,93,10.0,25.0,"[(105, 118), (119, 125), (119, 124)]",[],"[[(113, 113), (122, 122), (126, 126), (95, 95), (104, 104), (123, 123), (100, 100), (109, 109), (118, 118), (119, 119), (96, 96), (114, 114), (124, 124), (110, 110), (111, 111), (97, 97), (98, 98), (107, 107), (93, 93), (94, 94), (112, 112), (121, 121), (99, 99), (108, 108)], [(126, 126), (94, 94), (93, 93)]]",exception_happened
